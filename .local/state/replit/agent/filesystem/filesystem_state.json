{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcrypt\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\nimport { logError, extractErrorContext } from \"./logger\";\nimport type { User } from \"@shared/schema\";\n\nif (process.env.NODE_ENV === \"production\" && !process.env.SESSION_SECRET) {\n  throw new Error(\n    \"SESSION_SECRET environment variable must be set in production. \" +\n    \"Generate a secure random string and set it as an environment variable.\"\n  );\n}\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL environment variable must be set. \" +\n    \"Please configure your PostgreSQL database connection.\"\n  );\n}\n\nconst app = express();\n\n// CORS configuration for production security\nconst allowedOrigins = process.env.ALLOWED_ORIGINS \n  ? process.env.ALLOWED_ORIGINS.split(',')\n  : [];\n\napp.use(cors({\n  origin: process.env.NODE_ENV === \"production\" \n    ? (origin, callback) => {\n        if (!origin || allowedOrigins.includes(origin)) {\n          callback(null, true);\n        } else {\n          callback(new Error('Not allowed by CORS'));\n        }\n      }\n    : true,\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration with PostgreSQL store\nconst PgSession = connectPgSimple(session);\napp.use(\n  session({\n    store: new PgSession({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || \"pos-system-secret-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  })\n);\n\n// Passport configuration\napp.use(passport.initialize());\napp.use(passport.session());\n\npassport.use(\n  new LocalStrategy(async (username, password, done) => {\n    try {\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return done(null, false, { message: \"Неверное имя пользователя или пароль\" });\n      }\n\n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return done(null, false, { message: \"Неверное имя пользователя или пароль\" });\n      }\n\n      return done(null, user);\n    } catch (error) {\n      return done(error);\n    }\n  })\n);\n\npassport.serializeUser((user: Express.User, done) => {\n  done(null, (user as User).id);\n});\n\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    if (!user) {\n      return done(null, false);\n    }\n    const { password, ...userWithoutPassword } = user;\n    done(null, userWithoutPassword);\n  } catch (error) {\n    done(error);\n  }\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    const context = extractErrorContext(req, status);\n    logError(err, context);\n\n    if (!res.headersSent) {\n      const responseMessage = process.env.NODE_ENV === \"production\" \n        ? (status >= 500 ? \"Внутренняя ошибка сервера\" : message)\n        : message;\n      \n      res.status(status).json({ \n        message: responseMessage,\n        ...(process.env.NODE_ENV === \"development\" && { \n          error: err.name,\n          stack: err.stack \n        })\n      });\n    }\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":5486},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport passport from \"passport\";\nimport bcrypt from \"bcrypt\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport rateLimit from \"express-rate-limit\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertCustomerSchema, insertSupplierSchema, insertTransactionSchema, insertTransactionItemSchema, insertReturnSchema, insertReturnItemSchema, insertShiftSchema, insertGoodsAcceptanceSchema, insertInventoryAuditSchema, insertInventoryAuditItemSchema, insertWriteOffSchema, insertAuditLogSchema, insertCustomerTierSchema, type User } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { generateShiftReportExcel, generateShiftReportCSV, generateProductsExcel, generateCustomersExcel, generateSalesReportExcel, generateInventoryReportExcel } from \"./excel-generator\";\n\n// Type for authenticated user (without password)\nexport type AuthUser = Omit<User, 'password'>;\n\n// Type for authenticated requests\nexport interface AuthenticatedRequest extends Request {\n  user: AuthUser;\n}\n\n// Authentication middleware\nfunction requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Необходима авторизация\" });\n}\n\n// Role-based authorization middleware\nfunction requireRole(role: string) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (req.isAuthenticated() && req.user && (req.user as AuthUser).role === role) {\n      return next();\n    }\n    res.status(403).json({ message: \"Недостаточно прав доступа\" });\n  };\n}\n\n// Rate limiting for login attempts\nconst loginLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 минут\n  max: 5, // максимум 5 попыток с одного IP\n  message: 'Слишком много попыток входа. Пожалуйста, попробуйте позже.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Rate limiting for user management operations (stricter for admin operations)\nconst userManagementLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 минут\n  max: 20, // максимум 20 операций с пользователями за 15 минут\n  message: 'Слишком много операций управления пользователями. Попробуйте позже.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Rate limiting for product modifications\nconst productModificationLimiter = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 минут\n  max: 50, // максимум 50 изменений продуктов за 5 минут\n  message: 'Слишком много операций с продуктами. Попробуйте позже.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Rate limiting for transactions (sales)\nconst transactionLimiter = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 минута\n  max: 30, // максимум 30 транзакций в минуту (достаточно для быстрых продаж)\n  message: 'Слишком много транзакций. Подождите немного.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Rate limiting for returns processing\nconst returnsLimiter = rateLimit({\n  windowMs: 5 * 60 * 1000, // 5 минут\n  max: 20, // максимум 20 возвратов за 5 минут\n  message: 'Слишком много операций возврата. Попробуйте позже.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"attached_assets\", \"products\");\n\n// Ensure upload directory exists\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst storage_config = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({ \n  storage: storage_config,\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif|webp/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Только изображения разрешены (jpeg, jpg, png, gif, webp)'));\n    }\n  },\n  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes (public)\n  app.post(\"/api/auth/login\", loginLimiter, (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return next(err);\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Ошибка авторизации\" });\n      }\n      req.logIn(user, (err) => {\n        if (err) {\n          return next(err);\n        }\n        const { password, ...userWithoutPassword } = user;\n        return res.json({ user: userWithoutPassword });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Ошибка при выходе\" });\n      }\n      res.json({ message: \"Успешный выход\" });\n    });\n  });\n\n  app.get(\"/api/auth/session\", (req, res) => {\n    if (req.isAuthenticated() && req.user) {\n      return res.json({ user: req.user as AuthUser });\n    }\n    res.status(401).json({ message: \"Не авторизован\" });\n  });\n\n  // User management routes (admin only)\n  app.get(\"/api/users\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remove passwords from response\n      const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/users\", requireAuth, requireRole('admin'), userManagementLimiter, async (req, res) => {\n    try {\n      const { username, password, role, email } = req.body;\n      \n      if (!username || !password || !role) {\n        return res.status(400).json({ message: \"Необходимы username, password и role\" });\n      }\n      \n      const hashedPassword = await bcrypt.hash(password, 10);\n      const user = await storage.createUser({\n        username,\n        password: hashedPassword,\n        role,\n        email: email || null\n      });\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/users/:id\", requireAuth, requireRole('admin'), userManagementLimiter, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { username, password, role, email } = req.body;\n      \n      const updates: any = {};\n      if (username) updates.username = username;\n      if (role) updates.role = role;\n      if (email !== undefined) updates.email = email;\n      if (password) {\n        updates.password = await bcrypt.hash(password, 10);\n      }\n      \n      const user = await storage.updateUser(id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"Пользователь не найден\" });\n      }\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", requireAuth, requireRole('admin'), userManagementLimiter, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user as AuthUser;\n      \n      // Prevent deleting yourself\n      if (currentUser.id === id) {\n        return res.status(400).json({ message: \"Нельзя удалить свой аккаунт\" });\n      }\n      \n      const success = await storage.deleteUser(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Пользователь не найден\" });\n      }\n      \n      res.json({ message: \"Пользователь удален\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // All routes below require authentication\n  // Products\n  app.get(\"/api/products\", requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/products/expiring\", requireAuth, async (req, res) => {\n    try {\n      const daysThreshold = parseInt(req.query.days as string) || 7;\n      const expiringProducts = await storage.getExpiringProducts(daysThreshold);\n      res.json(expiringProducts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/products\", requireAuth, productModificationLimiter, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/products/:id\", requireAuth, productModificationLimiter, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, updates);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", requireAuth, productModificationLimiter, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteProduct(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Product Image Upload\n  app.post(\"/api/products/upload-image\", requireAuth, upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file provided\" });\n      }\n      \n      // Return the relative URL path for the uploaded image\n      const imageUrl = `/api/assets/products/${req.file.filename}`;\n      res.json({ imageUrl });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Serve uploaded product images\n  app.use(\"/api/assets/products\", express.static(path.join(process.cwd(), \"attached_assets\", \"products\")));\n\n  // Categories\n  app.get(\"/api/categories\", requireAuth, async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Customers\n  app.get(\"/api/customers\", requireAuth, async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/customers\", requireAuth, async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      res.json(customer);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/customers/phone/:phone\", requireAuth, async (req, res) => {\n    try {\n      const { phone } = req.params;\n      const customer = await storage.getCustomerByPhone(phone);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Shifts\n  app.get(\"/api/shifts/current/:userId\", requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const shift = await storage.getCurrentShift(userId);\n      res.json(shift);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/shifts\", requireAuth, async (req, res) => {\n    try {\n      const shiftData = insertShiftSchema.parse(req.body);\n      const shift = await storage.createShift(shiftData);\n      res.json(shift);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/shifts/:id/close\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const closeShiftSchema = z.object({\n        endingCash: z.number().min(0, \"Конечная сумма не может быть отрицательной\")\n      });\n      const { endingCash } = closeShiftSchema.parse(req.body);\n      const shift = await storage.closeShift(id, endingCash);\n      if (!shift) {\n        return res.status(404).json({ message: \"Shift not found\" });\n      }\n      res.json(shift);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/shifts/:id/summary\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const summary = await storage.getShiftSummary(id);\n      if (!summary) {\n        return res.status(404).json({ message: \"Shift not found\" });\n      }\n      res.json(summary);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Export shift report as Excel\n  app.get(\"/api/shifts/:id/export/excel\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const summary = await storage.getShiftSummary(id);\n      if (!summary) {\n        return res.status(404).json({ message: \"Shift not found\" });\n      }\n\n      const transactions = await storage.getTransactions(id);\n      const excelBuffer = generateShiftReportExcel(summary, transactions);\n\n      const filename = `shift_report_${summary.shift.id}_${new Date().toISOString().split('T')[0]}.xlsx`;\n      \n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(excelBuffer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Export shift report as CSV\n  app.get(\"/api/shifts/:id/export/csv\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const summary = await storage.getShiftSummary(id);\n      if (!summary) {\n        return res.status(404).json({ message: \"Shift not found\" });\n      }\n\n      const transactions = await storage.getTransactions(id);\n      const csvBuffer = generateShiftReportCSV(summary, transactions);\n\n      const filename = `shift_report_${summary.shift.id}_${new Date().toISOString().split('T')[0]}.csv`;\n      \n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(csvBuffer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/products/export/excel\", requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      const excelBuffer = generateProductsExcel(products);\n      \n      const filename = `products_${new Date().toISOString().split('T')[0]}.xlsx`;\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(excelBuffer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/customers/export/excel\", requireAuth, async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      const excelBuffer = generateCustomersExcel(customers);\n      \n      const filename = `customers_${new Date().toISOString().split('T')[0]}.xlsx`;\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(excelBuffer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/reports/sales/export/excel\", requireAuth, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"startDate и endDate обязательны\" });\n      }\n      \n      const transactions = await storage.getTransactionsByDateRange(startDate as string, endDate as string);\n      const excelBuffer = generateSalesReportExcel(transactions, startDate as string, endDate as string);\n      \n      const filename = `sales_report_${startDate}_${endDate}.xlsx`;\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(excelBuffer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/reports/inventory/export/excel\", requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      const excelBuffer = generateInventoryReportExcel(products);\n      \n      const filename = `inventory_report_${new Date().toISOString().split('T')[0]}.xlsx`;\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(excelBuffer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Transactions\n  app.get(\"/api/transactions\", requireAuth, async (req, res) => {\n    try {\n      const { shiftId } = req.query;\n      const transactions = await storage.getTransactions(shiftId as string);\n      res.json(transactions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/transactions/receipt/:receiptNumber\", requireAuth, async (req, res) => {\n    try {\n      const { receiptNumber } = req.params;\n      const transaction = await storage.getTransactionByReceiptNumber(receiptNumber);\n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      res.json(transaction);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/transactions\", requireAuth, transactionLimiter, async (req, res) => {\n    try {\n      const { transaction, items } = req.body;\n      const transactionData = insertTransactionSchema.parse(transaction);\n      const itemsData = z.array(insertTransactionItemSchema).parse(items);\n      \n      const result = await storage.createTransaction(transactionData, itemsData);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Returns\n  app.get(\"/api/returns\", requireAuth, async (req, res) => {\n    try {\n      const returns = await storage.getReturns();\n      res.json(returns);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/returns\", requireAuth, returnsLimiter, async (req, res) => {\n    try {\n      const { returnData, items } = req.body;\n      const returnInfo = insertReturnSchema.parse(returnData);\n      const itemsData = z.array(insertReturnItemSchema).parse(items);\n      \n      const result = await storage.createReturn(returnInfo, itemsData);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Analytics\n  app.get(\"/api/analytics/daily/:date\", requireAuth, async (req, res) => {\n    try {\n      const { date } = req.params;\n      const targetDate = new Date(date);\n      const analytics = await storage.getDailySales(targetDate);\n      res.json(analytics);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/analytics/top-products\", requireAuth, async (req, res) => {\n    try {\n      const { limit = 10 } = req.query;\n      const topProducts = await storage.getTopProducts(parseInt(limit as string));\n      res.json(topProducts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/analytics/abc-analysis\", requireAuth, async (req, res) => {\n    try {\n      const analysis = await storage.getABCAnalysis();\n      res.json(analysis);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/analytics/profitability\", requireAuth, async (req, res) => {\n    try {\n      const analysis = await storage.getProfitabilityAnalysis();\n      res.json(analysis);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/analytics/forecast\", requireAuth, async (req, res) => {\n    try {\n      const { days = 7 } = req.query;\n      const forecast = await storage.getSalesForecast(parseInt(days as string));\n      res.json(forecast);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/system/metrics\", requireAuth, async (req, res) => {\n    try {\n      const memUsage = process.memoryUsage();\n      const uptime = process.uptime();\n      \n      const metrics = {\n        uptime: Math.floor(uptime),\n        uptimeFormatted: `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m`,\n        memory: {\n          heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),\n          heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024),\n          rss: Math.round(memUsage.rss / 1024 / 1024)\n        },\n        activeUsers: await storage.getActiveSessionsCount(),\n        timestamp: new Date().toISOString()\n      };\n      \n      res.json(metrics);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Goods Acceptance\n  app.get(\"/api/goods-acceptance\", requireAuth, async (req, res) => {\n    try {\n      const acceptances = await storage.getGoodsAcceptance();\n      res.json(acceptances);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/goods-acceptance\", requireAuth, productModificationLimiter, async (req, res) => {\n    try {\n      const acceptance = insertGoodsAcceptanceSchema.parse(req.body);\n      const result = await storage.createGoodsAcceptance(acceptance);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/goods-acceptance/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      const success = await storage.updateGoodsAcceptanceStatus(id, status);\n      if (!success) {\n        return res.status(404).json({ message: \"Acceptance record not found\" });\n      }\n      res.json({ message: \"Status updated successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Inventory Audits\n  app.get(\"/api/inventory-audits\", requireAuth, async (req, res) => {\n    try {\n      const audits = await storage.getInventoryAudits();\n      res.json(audits);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/inventory-audits/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const audit = await storage.getInventoryAudit(id);\n      if (!audit) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json(audit);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/inventory-audits\", requireAuth, async (req, res) => {\n    try {\n      const audit = insertInventoryAuditSchema.parse(req.body);\n      const result = await storage.createInventoryAudit(audit);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/inventory-audits/:id/items\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const item = insertInventoryAuditItemSchema.parse(req.body);\n      const result = await storage.addAuditItem(id, item);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/inventory-audits/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, completedAt } = req.body;\n      const success = await storage.updateAuditStatus(id, status, completedAt ? new Date(completedAt) : undefined);\n      if (!success) {\n        return res.status(404).json({ message: \"Audit not found\" });\n      }\n      res.json({ message: \"Status updated successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Write-offs\n  app.get(\"/api/write-offs\", requireAuth, async (req, res) => {\n    try {\n      const writeOffs = await storage.getWriteOffs();\n      res.json(writeOffs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/write-offs\", requireAuth, productModificationLimiter, async (req, res) => {\n    try {\n      const writeOff = insertWriteOffSchema.parse(req.body);\n      const result = await storage.createWriteOff(writeOff);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/write-offs/:id/approve\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = req.user as User;\n      const success = await storage.approveWriteOff(id, user.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Write-off not found\" });\n      }\n      res.json({ message: \"Write-off approved successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Audit Logs\n  app.get(\"/api/audit-logs\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { userId, action } = req.query;\n      const logs = await storage.getAuditLogs(userId as string, action as string);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/audit-logs\", requireAuth, async (req, res) => {\n    try {\n      const log = insertAuditLogSchema.parse(req.body);\n      const result = await storage.createAuditLog(log);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Customer Tiers\n  app.get(\"/api/customer-tiers\", requireAuth, async (req, res) => {\n    try {\n      const tiers = await storage.getCustomerTiers();\n      res.json(tiers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/customer-tiers\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const tier = insertCustomerTierSchema.parse(req.body);\n      const result = await storage.createCustomerTier(tier);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/customer-tiers/:id\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertCustomerTierSchema.partial().parse(req.body);\n      const result = await storage.updateCustomerTier(id, updates);\n      if (!result) {\n        return res.status(404).json({ message: \"Tier not found\" });\n      }\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Suppliers\n  app.get(\"/api/suppliers\", requireAuth, async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliers();\n      res.json(suppliers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/suppliers/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const supplier = await storage.getSupplier(id);\n      if (!supplier) {\n        return res.status(404).json({ message: \"Supplier not found\" });\n      }\n      res.json(supplier);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/suppliers\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const supplier = insertSupplierSchema.parse(req.body);\n      const result = await storage.createSupplier(supplier);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/suppliers/:id\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertSupplierSchema.partial().parse(req.body);\n      const result = await storage.updateSupplier(id, updates);\n      if (!result) {\n        return res.status(404).json({ message: \"Supplier not found\" });\n      }\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/suppliers/:id\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteSupplier(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Supplier not found\" });\n      }\n      res.json({ message: \"Supplier deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31044},"server/storage.ts":{"content":"import { type User, type InsertUser, type Product, type InsertProduct, type Category, type InsertCategory, type Customer, type InsertCustomer, type Supplier, type InsertSupplier, type Transaction, type InsertTransaction, type TransactionItem, type InsertTransactionItem, type Shift, type InsertShift, type Return, type InsertReturn, type ReturnItem, type InsertReturnItem, type TransactionWithItems, type ProductWithCategory, type ShiftSummary, type GoodsAcceptance, type InsertGoodsAcceptance, type InventoryAudit, type InsertInventoryAudit, type InventoryAuditItem, type InsertInventoryAuditItem, type WriteOff, type InsertWriteOff, type AuditLog, type InsertAuditLog, type CustomerTier, type InsertCustomerTier, users, products, categories, customers, suppliers, shifts, transactions, transactionItems, returns, returnItems, goodsAcceptance, inventoryAudits, inventoryAuditItems, writeOffs, auditLogs, customerTiers } from \"@shared/schema\";\nimport { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { eq, and, gte, lte, sql, desc } from \"drizzle-orm\";\nimport ws from \"ws\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Categories\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<Category>): Promise<Category | undefined>;\n  deleteCategory(id: string): Promise<boolean>;\n\n  // Products\n  getProducts(): Promise<ProductWithCategory[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductBySku(sku: string): Promise<Product | undefined>;\n  getExpiringProducts(daysThreshold: number): Promise<ProductWithCategory[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<Product>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  updateProductStock(id: string, quantity: number): Promise<boolean>;\n\n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByPhone(phone: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<Customer>): Promise<Customer | undefined>;\n  updateCustomerLoyaltyPoints(id: string, points: number): Promise<boolean>;\n\n  // Shifts\n  getCurrentShift(userId: string): Promise<Shift | undefined>;\n  createShift(shift: InsertShift): Promise<Shift>;\n  closeShift(id: string, endingCash: number): Promise<Shift | undefined>;\n  getShiftSummary(id: string): Promise<ShiftSummary | undefined>;\n\n  // Transactions\n  getTransactions(shiftId?: string): Promise<TransactionWithItems[]>;\n  getTransactionsByDateRange(startDate: string, endDate: string): Promise<TransactionWithItems[]>;\n  getTransaction(id: string): Promise<TransactionWithItems | undefined>;\n  getTransactionByReceiptNumber(receiptNumber: string): Promise<TransactionWithItems | undefined>;\n  createTransaction(transaction: InsertTransaction, items: InsertTransactionItem[]): Promise<TransactionWithItems>;\n  updateTransactionStatus(id: string, status: string): Promise<boolean>;\n\n  // Returns\n  getReturns(): Promise<(Return & { originalTransaction: Transaction })[]>;\n  createReturn(returnData: InsertReturn, items: InsertReturnItem[]): Promise<Return>;\n\n  // Analytics\n  getDailySales(date: Date): Promise<{ revenue: number; transactions: number; averageCheck: number }>;\n  getTopProducts(limit: number): Promise<Array<{ product: Product; sold: number }>>;\n  getABCAnalysis(): Promise<Array<{ product: Product; revenue: number; category: 'A' | 'B' | 'C'; percentage: number }>>;\n  getProfitabilityAnalysis(): Promise<Array<{ product: Product; revenue: number; margin: number; profit: number }>>;\n  getSalesForecast(days: number): Promise<Array<{ date: string; predicted: number; confidence: number }>>;\n  getActiveSessionsCount(): Promise<number>;\n  \n  // Goods Acceptance\n  getGoodsAcceptance(): Promise<any[]>;\n  createGoodsAcceptance(acceptance: any): Promise<any>;\n  updateGoodsAcceptanceStatus(id: string, status: string): Promise<boolean>;\n  \n  // Inventory Audits\n  getInventoryAudits(): Promise<any[]>;\n  getInventoryAudit(id: string): Promise<any | undefined>;\n  createInventoryAudit(audit: any): Promise<any>;\n  addAuditItem(auditId: string, item: any): Promise<any>;\n  updateAuditStatus(id: string, status: string, completedAt?: Date): Promise<boolean>;\n  \n  // Write-offs\n  getWriteOffs(): Promise<any[]>;\n  createWriteOff(writeOff: any): Promise<any>;\n  approveWriteOff(id: string, approvedBy: string): Promise<boolean>;\n  \n  // Audit Logs\n  createAuditLog(log: any): Promise<any>;\n  getAuditLogs(userId?: string, action?: string): Promise<any[]>;\n  \n  // Customer Tiers\n  getCustomerTiers(): Promise<any[]>;\n  createCustomerTier(tier: any): Promise<any>;\n  updateCustomerTier(id: string, tier: Partial<any>): Promise<any | undefined>;\n  \n  // Suppliers\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplier(id: string): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(id: string, supplier: Partial<Supplier>): Promise<Supplier | undefined>;\n  deleteSupplier(id: string): Promise<boolean>;\n}\n\nconst db = drizzle({\n  connection: process.env.DATABASE_URL!,\n  ws: ws,\n});\n\nexport class PostgresStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const result = await db.insert(categories).values(insertCategory).returning();\n    return result[0];\n  }\n\n  async updateCategory(id: string, updates: Partial<Category>): Promise<Category | undefined> {\n    const result = await db.update(categories).set(updates).where(eq(categories.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCategory(id: string): Promise<boolean> {\n    const result = await db.delete(categories).where(eq(categories.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Products\n  async getProducts(): Promise<ProductWithCategory[]> {\n    const result = await db\n      .select()\n      .from(products)\n      .leftJoin(categories, eq(products.categoryId, categories.id));\n    \n    return result.map(row => ({\n      ...row.products,\n      category: row.categories || undefined\n    }));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getProductBySku(sku: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.sku, sku)).limit(1);\n    return result[0];\n  }\n\n  async getExpiringProducts(daysThreshold: number): Promise<ProductWithCategory[]> {\n    const thresholdDate = new Date();\n    thresholdDate.setDate(thresholdDate.getDate() + daysThreshold);\n    \n    const result = await db\n      .select()\n      .from(products)\n      .leftJoin(categories, eq(products.categoryId, categories.id))\n      .where(\n        and(\n          sql`${products.expirationDate} IS NOT NULL`,\n          lte(products.expirationDate, thresholdDate)\n        )\n      );\n    \n    return result.map(row => ({\n      ...row.products,\n      category: row.categories || undefined\n    }));\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const result = await db.insert(products).values(insertProduct).returning();\n    return result[0];\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const result = await db.update(products).set(updates).where(eq(products.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const result = await db.delete(products).where(eq(products.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async updateProductStock(id: string, quantity: number): Promise<boolean> {\n    const product = await this.getProduct(id);\n    if (!product) return false;\n    \n    const newStock = Math.max(0, product.stock + quantity);\n    await db.update(products).set({ stock: newStock }).where(eq(products.id, id));\n    return true;\n  }\n\n  // Customers\n  async getCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers);\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const result = await db.select().from(customers).where(eq(customers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getCustomerByPhone(phone: string): Promise<Customer | undefined> {\n    const result = await db.select().from(customers).where(eq(customers.phone, phone)).limit(1);\n    return result[0];\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const result = await db.insert(customers).values(insertCustomer).returning();\n    return result[0];\n  }\n\n  async updateCustomer(id: string, updates: Partial<Customer>): Promise<Customer | undefined> {\n    const result = await db.update(customers).set(updates).where(eq(customers.id, id)).returning();\n    return result[0];\n  }\n\n  async updateCustomerLoyaltyPoints(id: string, points: number): Promise<boolean> {\n    const customer = await this.getCustomer(id);\n    if (!customer) return false;\n    \n    const newPoints = customer.loyaltyPoints + points;\n    await db.update(customers).set({ loyaltyPoints: newPoints }).where(eq(customers.id, id));\n    return true;\n  }\n\n  // Shifts\n  async getCurrentShift(userId: string): Promise<Shift | undefined> {\n    const result = await db\n      .select()\n      .from(shifts)\n      .where(and(eq(shifts.userId, userId), eq(shifts.status, \"open\")))\n      .limit(1);\n    return result[0];\n  }\n\n  async createShift(insertShift: InsertShift): Promise<Shift> {\n    const result = await db.insert(shifts).values(insertShift).returning();\n    return result[0];\n  }\n\n  async closeShift(id: string, endingCash: number): Promise<Shift | undefined> {\n    return await db.transaction(async (tx) => {\n      const shift = await tx\n        .select()\n        .from(shifts)\n        .where(eq(shifts.id, id))\n        .limit(1);\n      \n      if (!shift[0]) {\n        throw new Error('Смена не найдена');\n      }\n      \n      if (shift[0].status === 'closed') {\n        throw new Error('Смена уже закрыта');\n      }\n      \n      const result = await tx\n        .update(shifts)\n        .set({ \n          endTime: new Date(), \n          endingCash: endingCash.toString(), \n          status: \"closed\" \n        })\n        .where(eq(shifts.id, id))\n        .returning();\n      \n      return result[0];\n    });\n  }\n\n  async getShiftSummary(id: string): Promise<ShiftSummary | undefined> {\n    try {\n      const shift = await db.select().from(shifts).where(eq(shifts.id, id)).limit(1);\n      if (!shift[0]) {\n        return undefined;\n      }\n\n      const shiftTransactions = await db\n        .select()\n        .from(transactions)\n        .where(eq(transactions.shiftId, id));\n\n      if (shiftTransactions.length === 0) {\n        return {\n          shift: shift[0],\n          totalSales: \"0\",\n          totalTransactions: 0,\n          cashSales: \"0\",\n          cardSales: \"0\"\n        };\n      }\n\n      const totalSales = shiftTransactions\n        .reduce((sum, t) => sum + parseFloat(t.total), 0)\n        .toString();\n\n      const cashSales = shiftTransactions\n        .filter(t => t.paymentMethod === \"cash\")\n        .reduce((sum, t) => sum + parseFloat(t.total), 0)\n        .toString();\n\n      const cardSales = shiftTransactions\n        .filter(t => t.paymentMethod === \"card\")\n        .reduce((sum, t) => sum + parseFloat(t.total), 0)\n        .toString();\n\n      return {\n        shift: shift[0],\n        totalSales,\n        totalTransactions: shiftTransactions.length,\n        cashSales,\n        cardSales\n      };\n    } catch (error) {\n      console.error('Error in getShiftSummary:', error);\n      throw new Error('Не удалось получить сводку по смене');\n    }\n  }\n\n  // Transactions\n  async getTransactions(shiftId?: string): Promise<TransactionWithItems[]> {\n    const query = shiftId \n      ? db.select().from(transactions).where(eq(transactions.shiftId, shiftId))\n      : db.select().from(transactions);\n    \n    const txns = await query;\n    \n    const result: TransactionWithItems[] = [];\n    for (const txn of txns) {\n      const items = await db\n        .select()\n        .from(transactionItems)\n        .leftJoin(products, eq(transactionItems.productId, products.id))\n        .where(eq(transactionItems.transactionId, txn.id));\n      \n      const customer = txn.customerId \n        ? await this.getCustomer(txn.customerId)\n        : undefined;\n      \n      result.push({\n        ...txn,\n        items: items.map(item => ({\n          ...item.transaction_items,\n          product: item.products!\n        })),\n        customer\n      });\n    }\n    \n    return result;\n  }\n\n  async getTransactionsByDateRange(startDate: string, endDate: string): Promise<TransactionWithItems[]> {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    end.setHours(23, 59, 59, 999);\n\n    const txns = await db\n      .select()\n      .from(transactions)\n      .where(\n        and(\n          gte(transactions.createdAt, start),\n          lte(transactions.createdAt, end)\n        )\n      )\n      .orderBy(desc(transactions.createdAt));\n    \n    const result: TransactionWithItems[] = [];\n    for (const txn of txns) {\n      const items = await db\n        .select()\n        .from(transactionItems)\n        .leftJoin(products, eq(transactionItems.productId, products.id))\n        .where(eq(transactionItems.transactionId, txn.id));\n      \n      const customer = txn.customerId \n        ? await this.getCustomer(txn.customerId)\n        : undefined;\n      \n      result.push({\n        ...txn,\n        items: items.map(item => ({\n          ...item.transaction_items,\n          product: item.products!\n        })),\n        customer\n      });\n    }\n    \n    return result;\n  }\n\n  async getTransaction(id: string): Promise<TransactionWithItems | undefined> {\n    const txn = await db.select().from(transactions).where(eq(transactions.id, id)).limit(1);\n    if (!txn[0]) return undefined;\n\n    const items = await db\n      .select()\n      .from(transactionItems)\n      .leftJoin(products, eq(transactionItems.productId, products.id))\n      .where(eq(transactionItems.transactionId, id));\n    \n    const customer = txn[0].customerId \n      ? await this.getCustomer(txn[0].customerId)\n      : undefined;\n\n    return {\n      ...txn[0],\n      items: items.map(item => ({\n        ...item.transaction_items,\n        product: item.products!\n      })),\n      customer\n    };\n  }\n\n  async getTransactionByReceiptNumber(receiptNumber: string): Promise<TransactionWithItems | undefined> {\n    const txn = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.receiptNumber, receiptNumber))\n      .limit(1);\n    \n    if (!txn[0]) return undefined;\n\n    const items = await db\n      .select()\n      .from(transactionItems)\n      .leftJoin(products, eq(transactionItems.productId, products.id))\n      .where(eq(transactionItems.transactionId, txn[0].id));\n    \n    const customer = txn[0].customerId \n      ? await this.getCustomer(txn[0].customerId)\n      : undefined;\n\n    return {\n      ...txn[0],\n      items: items.map(item => ({\n        ...item.transaction_items,\n        product: item.products!\n      })),\n      customer\n    };\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction, items: InsertTransactionItem[]): Promise<TransactionWithItems> {\n    return await db.transaction(async (tx) => {\n      const txn = await tx.insert(transactions).values(insertTransaction).returning();\n      \n      const itemsWithTransactionId = items.map(item => ({\n        ...item,\n        transactionId: txn[0].id\n      }));\n      \n      const insertedItems = await tx.insert(transactionItems).values(itemsWithTransactionId).returning();\n      \n      for (const item of insertedItems) {\n        await tx.update(products)\n          .set({ stock: sql`GREATEST(0, stock - ${item.quantity})` })\n          .where(eq(products.id, item.productId));\n      }\n      \n      const itemsWithProducts = await Promise.all(\n        insertedItems.map(async (item) => {\n          const product = await tx.select().from(products).where(eq(products.id, item.productId)).limit(1);\n          return {\n            ...item,\n            product: product[0]!\n          };\n        })\n      );\n      \n      const customer = txn[0].customerId \n        ? (await tx.select().from(customers).where(eq(customers.id, txn[0].customerId)).limit(1))[0]\n        : undefined;\n\n      return {\n        ...txn[0],\n        items: itemsWithProducts,\n        customer\n      };\n    });\n  }\n\n  async updateTransactionStatus(id: string, status: string): Promise<boolean> {\n    const result = await db.update(transactions).set({ status }).where(eq(transactions.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Returns\n  async getReturns(): Promise<(Return & { originalTransaction: Transaction })[]> {\n    const returnRecords = await db.select().from(returns);\n    \n    const result = await Promise.all(\n      returnRecords.map(async (returnRecord) => {\n        const originalTxn = await db\n          .select()\n          .from(transactions)\n          .where(eq(transactions.id, returnRecord.originalTransactionId))\n          .limit(1);\n        \n        return {\n          ...returnRecord,\n          originalTransaction: originalTxn[0]\n        };\n      })\n    );\n    \n    return result;\n  }\n\n  async createReturn(insertReturn: InsertReturn, items: InsertReturnItem[]): Promise<Return> {\n    return await db.transaction(async (tx) => {\n      const returnRecord = await tx.insert(returns).values(insertReturn).returning();\n      \n      const itemsWithReturnId = items.map(item => ({\n        ...item,\n        returnId: returnRecord[0].id\n      }));\n      \n      const insertedItems = await tx.insert(returnItems).values(itemsWithReturnId).returning();\n      \n      for (const item of insertedItems) {\n        await tx.update(products)\n          .set({ stock: sql`stock + ${item.quantity}` })\n          .where(eq(products.id, item.productId));\n      }\n      \n      return returnRecord[0];\n    });\n  }\n\n  // Analytics\n  async getDailySales(date: Date): Promise<{ revenue: number; transactions: number; averageCheck: number }> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const dayTransactions = await db\n      .select()\n      .from(transactions)\n      .where(and(\n        gte(transactions.createdAt, startOfDay),\n        lte(transactions.createdAt, endOfDay)\n      ));\n\n    const revenue = dayTransactions.reduce((sum, t) => sum + parseFloat(t.total), 0);\n    const transactionCount = dayTransactions.length;\n    const averageCheck = transactionCount > 0 ? revenue / transactionCount : 0;\n\n    return { revenue, transactions: transactionCount, averageCheck };\n  }\n\n  async getTopProducts(limit: number): Promise<Array<{ product: Product; sold: number }>> {\n    const result = await db\n      .select({\n        productId: transactionItems.productId,\n        sold: sql<number>`CAST(SUM(${transactionItems.quantity}) AS INTEGER)`\n      })\n      .from(transactionItems)\n      .groupBy(transactionItems.productId)\n      .orderBy(desc(sql`SUM(${transactionItems.quantity})`))\n      .limit(limit);\n\n    const topProducts = await Promise.all(\n      result.map(async (item) => ({\n        product: (await this.getProduct(item.productId))!,\n        sold: item.sold\n      }))\n    );\n\n    return topProducts;\n  }\n\n  async getABCAnalysis(): Promise<Array<{ product: Product; revenue: number; category: 'A' | 'B' | 'C'; percentage: number }>> {\n    const result = await db\n      .select({\n        productId: transactionItems.productId,\n        revenue: sql<number>`CAST(SUM(${transactionItems.totalPrice}) AS DECIMAL)`\n      })\n      .from(transactionItems)\n      .groupBy(transactionItems.productId)\n      .orderBy(desc(sql`SUM(${transactionItems.totalPrice})`));\n\n    const totalRevenue = result.reduce((sum, item) => sum + parseFloat(item.revenue.toString()), 0);\n    let cumulativePercentage = 0;\n\n    const analysis = await Promise.all(\n      result.map(async (item) => {\n        const revenue = parseFloat(item.revenue.toString());\n        const percentage = (revenue / totalRevenue) * 100;\n        cumulativePercentage += percentage;\n        \n        let category: 'A' | 'B' | 'C';\n        if (cumulativePercentage <= 80) {\n          category = 'A';\n        } else if (cumulativePercentage <= 95) {\n          category = 'B';\n        } else {\n          category = 'C';\n        }\n\n        return {\n          product: (await this.getProduct(item.productId))!,\n          revenue,\n          category,\n          percentage\n        };\n      })\n    );\n\n    return analysis;\n  }\n\n  async getProfitabilityAnalysis(): Promise<Array<{ product: Product; revenue: number; margin: number; profit: number }>> {\n    const result = await db\n      .select({\n        productId: transactionItems.productId,\n        revenue: sql<number>`CAST(SUM(${transactionItems.totalPrice}) AS DECIMAL)`,\n        cost: sql<number>`CAST(SUM(${transactionItems.quantity} * ${products.price} * 0.6) AS DECIMAL)`\n      })\n      .from(transactionItems)\n      .leftJoin(products, eq(transactionItems.productId, products.id))\n      .groupBy(transactionItems.productId)\n      .orderBy(desc(sql`SUM(${transactionItems.totalPrice})`));\n\n    const analysis = await Promise.all(\n      result.map(async (item) => {\n        const revenue = parseFloat(item.revenue.toString());\n        const cost = parseFloat(item.cost?.toString() || '0');\n        const profit = revenue - cost;\n        const margin = revenue > 0 ? (profit / revenue) * 100 : 0;\n\n        return {\n          product: (await this.getProduct(item.productId))!,\n          revenue,\n          margin,\n          profit\n        };\n      })\n    );\n\n    return analysis;\n  }\n\n  async getSalesForecast(days: number): Promise<Array<{ date: string; predicted: number; confidence: number }>> {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 30);\n\n    const historicalSales = await db\n      .select({\n        date: sql<string>`DATE(${transactions.createdAt})`,\n        total: sql<number>`CAST(SUM(${transactions.total}) AS DECIMAL)`\n      })\n      .from(transactions)\n      .where(\n        and(\n          gte(transactions.createdAt, startDate),\n          lte(transactions.createdAt, endDate)\n        )\n      )\n      .groupBy(sql`DATE(${transactions.createdAt})`)\n      .orderBy(sql`DATE(${transactions.createdAt})`);\n\n    const dailyAvg = historicalSales.reduce((sum, day) => sum + parseFloat(day.total.toString()), 0) / historicalSales.length;\n    const forecast: Array<{ date: string; predicted: number; confidence: number }> = [];\n\n    for (let i = 1; i <= days; i++) {\n      const forecastDate = new Date();\n      forecastDate.setDate(forecastDate.getDate() + i);\n      \n      const dayOfWeek = forecastDate.getDay();\n      const weekendMultiplier = (dayOfWeek === 0 || dayOfWeek === 6) ? 1.2 : 1.0;\n      const predicted = dailyAvg * weekendMultiplier;\n      const confidence = Math.max(0.6, 1 - (i * 0.02));\n\n      forecast.push({\n        date: forecastDate.toISOString().split('T')[0],\n        predicted: Math.round(predicted),\n        confidence: Math.round(confidence * 100) / 100\n      });\n    }\n\n    return forecast;\n  }\n\n  async getActiveSessionsCount(): Promise<number> {\n    const result = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(shifts)\n      .where(eq(shifts.status, 'open'));\n    \n    return result[0]?.count || 0;\n  }\n\n  // Goods Acceptance\n  async getGoodsAcceptance(): Promise<GoodsAcceptance[]> {\n    return db.select().from(goodsAcceptance).orderBy(desc(goodsAcceptance.createdAt));\n  }\n\n  async createGoodsAcceptance(acceptance: InsertGoodsAcceptance): Promise<GoodsAcceptance> {\n    const [result] = await db.insert(goodsAcceptance).values(acceptance).returning();\n    \n    if (acceptance.status === 'accepted') {\n      await db.update(products)\n        .set({ stock: sql`stock + ${acceptance.actualQuantity}` })\n        .where(eq(products.id, acceptance.productId));\n    }\n    \n    return result;\n  }\n\n  async updateGoodsAcceptanceStatus(id: string, status: string): Promise<boolean> {\n    const [acceptance] = await db.select().from(goodsAcceptance).where(eq(goodsAcceptance.id, id));\n    if (!acceptance) return false;\n\n    await db.update(goodsAcceptance).set({ status }).where(eq(goodsAcceptance.id, id));\n    \n    if (status === 'accepted' && acceptance.status !== 'accepted') {\n      await db.update(products)\n        .set({ stock: sql`stock + ${acceptance.actualQuantity}` })\n        .where(eq(products.id, acceptance.productId));\n    }\n    \n    return true;\n  }\n\n  // Inventory Audits\n  async getInventoryAudits(): Promise<InventoryAudit[]> {\n    return db.select().from(inventoryAudits).orderBy(desc(inventoryAudits.createdAt));\n  }\n\n  async getInventoryAudit(id: string): Promise<InventoryAudit | undefined> {\n    const [result] = await db.select().from(inventoryAudits).where(eq(inventoryAudits.id, id));\n    return result;\n  }\n\n  async createInventoryAudit(audit: InsertInventoryAudit): Promise<InventoryAudit> {\n    const [result] = await db.insert(inventoryAudits).values(audit).returning();\n    return result;\n  }\n\n  async addAuditItem(auditId: string, item: InsertInventoryAuditItem): Promise<InventoryAuditItem> {\n    const [result] = await db.insert(inventoryAuditItems).values({ ...item, auditId }).returning();\n    return result;\n  }\n\n  async updateAuditStatus(id: string, status: string, completedAt?: Date): Promise<boolean> {\n    const updateData: any = { status };\n    if (completedAt) {\n      updateData.completedAt = completedAt;\n    }\n    \n    await db.update(inventoryAudits).set(updateData).where(eq(inventoryAudits.id, id));\n    return true;\n  }\n\n  // Write-offs\n  async getWriteOffs(): Promise<WriteOff[]> {\n    return db.select().from(writeOffs).orderBy(desc(writeOffs.createdAt));\n  }\n\n  async createWriteOff(writeOff: InsertWriteOff): Promise<WriteOff> {\n    return db.transaction(async (tx) => {\n      const [result] = await tx.insert(writeOffs).values(writeOff).returning();\n      \n      if (result.approved) {\n        await tx.update(products)\n          .set({ stock: sql`stock - ${result.quantity}` })\n          .where(eq(products.id, result.productId));\n      }\n      \n      return result;\n    });\n  }\n\n  async approveWriteOff(id: string, approvedBy: string): Promise<boolean> {\n    return db.transaction(async (tx) => {\n      const [writeOff] = await tx.select().from(writeOffs).where(eq(writeOffs.id, id));\n      if (!writeOff) return false;\n\n      await tx.update(writeOffs)\n        .set({ \n          approved: true, \n          approvedBy, \n          approvedAt: new Date() \n        })\n        .where(eq(writeOffs.id, id));\n\n      await tx.update(products)\n        .set({ stock: sql`stock - ${writeOff.quantity}` })\n        .where(eq(products.id, writeOff.productId));\n\n      return true;\n    });\n  }\n\n  // Audit Logs\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const [result] = await db.insert(auditLogs).values(log).returning();\n    return result;\n  }\n\n  async getAuditLogs(userId?: string, action?: string): Promise<AuditLog[]> {\n    let query = db.select().from(auditLogs);\n    \n    const conditions = [];\n    if (userId) conditions.push(eq(auditLogs.userId, userId));\n    if (action) conditions.push(eq(auditLogs.action, action));\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n    \n    return query.orderBy(desc(auditLogs.createdAt));\n  }\n\n  // Customer Tiers\n  async getCustomerTiers(): Promise<CustomerTier[]> {\n    return db.select().from(customerTiers).orderBy(customerTiers.minPoints);\n  }\n\n  async createCustomerTier(tier: InsertCustomerTier): Promise<CustomerTier> {\n    const [result] = await db.insert(customerTiers).values(tier).returning();\n    return result;\n  }\n\n  async updateCustomerTier(id: string, tier: Partial<CustomerTier>): Promise<CustomerTier | undefined> {\n    const [result] = await db.update(customerTiers).set(tier).where(eq(customerTiers.id, id)).returning();\n    return result;\n  }\n\n  async getSuppliers(): Promise<Supplier[]> {\n    return db.select().from(suppliers).orderBy(suppliers.name);\n  }\n\n  async getSupplier(id: string): Promise<Supplier | undefined> {\n    const [result] = await db.select().from(suppliers).where(eq(suppliers.id, id)).limit(1);\n    return result;\n  }\n\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const [result] = await db.insert(suppliers).values(supplier).returning();\n    return result;\n  }\n\n  async updateSupplier(id: string, supplier: Partial<Supplier>): Promise<Supplier | undefined> {\n    const [result] = await db.update(suppliers).set(supplier).where(eq(suppliers.id, id)).returning();\n    return result;\n  }\n\n  async deleteSupplier(id: string): Promise<boolean> {\n    const result = await db.delete(suppliers).where(eq(suppliers.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n}\n\nexport const storage = new PostgresStorage();\n","size_bytes":30836},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, json, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"cashier\"), // cashier, manager\n  email: text(\"email\"),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sku: text(\"sku\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  stock: integer(\"stock\").notNull().default(0),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  expirationDate: timestamp(\"expiration_date\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  categoryIdx: index(\"products_category_idx\").on(table.categoryId),\n  expirationIdx: index(\"products_expiration_idx\").on(table.expirationDate),\n  activeIdx: index(\"products_active_idx\").on(table.isActive),\n  skuIdx: index(\"products_sku_idx\").on(table.sku),\n}));\n\n// Customer Tiers (Уровни лояльности) - определяем до customers для ссылки\nexport const customerTiers = pgTable(\"customer_tiers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // Bronze, Silver, Gold, Platinum\n  minPoints: integer(\"min_points\").notNull().default(0),\n  maxPoints: integer(\"max_points\"),\n  discountPercent: decimal(\"discount_percent\", { precision: 5, scale: 2 }).notNull().default(\"0\"),\n  color: text(\"color\"), // For UI display\n  benefits: text(\"benefits\"), // Description of benefits\n});\n\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  contactPerson: text(\"contact_person\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  taxId: text(\"tax_id\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  nameIdx: index(\"suppliers_name_idx\").on(table.name),\n  activeIdx: index(\"suppliers_active_idx\").on(table.isActive),\n}));\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  loyaltyPoints: integer(\"loyalty_points\").notNull().default(0),\n  tierId: varchar(\"tier_id\").references(() => customerTiers.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  phoneIdx: index(\"customers_phone_idx\").on(table.phone),\n  emailIdx: index(\"customers_email_idx\").on(table.email),\n  tierIdx: index(\"customers_tier_idx\").on(table.tierId),\n}));\n\nexport const shifts = pgTable(\"shifts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  startTime: timestamp(\"start_time\").notNull().defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  startingCash: decimal(\"starting_cash\", { precision: 10, scale: 2 }).notNull(),\n  endingCash: decimal(\"ending_cash\", { precision: 10, scale: 2 }),\n  status: text(\"status\").notNull().default(\"open\"), // open, closed\n}, (table) => ({\n  userIdx: index(\"shifts_user_idx\").on(table.userId),\n  statusIdx: index(\"shifts_status_idx\").on(table.status),\n  startTimeIdx: index(\"shifts_start_time_idx\").on(table.startTime),\n}));\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  receiptNumber: text(\"receipt_number\").notNull().unique(),\n  shiftId: varchar(\"shift_id\").notNull().references(() => shifts.id),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  tax: decimal(\"tax\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(), // cash, card\n  receivedAmount: decimal(\"received_amount\", { precision: 10, scale: 2 }),\n  changeAmount: decimal(\"change_amount\", { precision: 10, scale: 2 }),\n  status: text(\"status\").notNull().default(\"completed\"), // completed, refunded, cancelled\n  isOffline: boolean(\"is_offline\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  shiftIdx: index(\"transactions_shift_idx\").on(table.shiftId),\n  customerIdx: index(\"transactions_customer_idx\").on(table.customerId),\n  userIdx: index(\"transactions_user_idx\").on(table.userId),\n  createdAtIdx: index(\"transactions_created_at_idx\").on(table.createdAt),\n  receiptIdx: index(\"transactions_receipt_idx\").on(table.receiptNumber),\n  statusIdx: index(\"transactions_status_idx\").on(table.status),\n}));\n\nexport const transactionItems = pgTable(\"transaction_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: varchar(\"transaction_id\").notNull().references(() => transactions.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n}, (table) => ({\n  transactionIdx: index(\"transaction_items_transaction_idx\").on(table.transactionId),\n  productIdx: index(\"transaction_items_product_idx\").on(table.productId),\n}));\n\nexport const returns = pgTable(\"returns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  originalTransactionId: varchar(\"original_transaction_id\").notNull().references(() => transactions.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  reason: text(\"reason\"),\n  refundAmount: decimal(\"refund_amount\", { precision: 10, scale: 2 }).notNull(),\n  refundMethod: text(\"refund_method\").notNull(), // cash, card\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  transactionIdx: index(\"returns_transaction_idx\").on(table.originalTransactionId),\n  userIdx: index(\"returns_user_idx\").on(table.userId),\n  createdAtIdx: index(\"returns_created_at_idx\").on(table.createdAt),\n}));\n\nexport const returnItems = pgTable(\"return_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  returnId: varchar(\"return_id\").notNull().references(() => returns.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n}, (table) => ({\n  returnIdx: index(\"return_items_return_idx\").on(table.returnId),\n  productIdx: index(\"return_items_product_idx\").on(table.productId),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true });\nexport const insertCategorySchema = createInsertSchema(categories).omit({ id: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true, createdAt: true });\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({ id: true, createdAt: true });\nexport const insertCustomerSchema = createInsertSchema(customers).omit({ id: true, createdAt: true });\nexport const insertShiftSchema = createInsertSchema(shifts).omit({ id: true, startTime: true });\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({ id: true, createdAt: true });\nexport const insertTransactionItemSchema = createInsertSchema(transactionItems).omit({ id: true, transactionId: true });\nexport const insertReturnSchema = createInsertSchema(returns).omit({ id: true, createdAt: true });\nexport const insertReturnItemSchema = createInsertSchema(returnItems).omit({ id: true, returnId: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Shift = typeof shifts.$inferSelect;\nexport type InsertShift = z.infer<typeof insertShiftSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type TransactionItem = typeof transactionItems.$inferSelect;\nexport type InsertTransactionItem = z.infer<typeof insertTransactionItemSchema>;\nexport type Return = typeof returns.$inferSelect;\nexport type InsertReturn = z.infer<typeof insertReturnSchema>;\nexport type ReturnItem = typeof returnItems.$inferSelect;\nexport type InsertReturnItem = z.infer<typeof insertReturnItemSchema>;\n\n// Complex types for API responses\nexport type TransactionWithItems = Transaction & {\n  items: (TransactionItem & { product: Product })[];\n  customer?: Customer;\n};\n\nexport type ProductWithCategory = Product & {\n  category?: Category;\n};\n\nexport type ShiftSummary = {\n  shift: Shift;\n  totalSales: string;\n  totalTransactions: number;\n  cashSales: string;\n  cardSales: string;\n};\n\n// Goods Acceptance (Приемка товаров)\nexport const goodsAcceptance = pgTable(\"goods_acceptance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  expectedQuantity: integer(\"expected_quantity\").notNull(),\n  actualQuantity: integer(\"actual_quantity\").notNull(),\n  discrepancy: integer(\"discrepancy\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, partial, rejected\n  supplierInvoice: text(\"supplier_invoice\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  acceptedBy: varchar(\"accepted_by\").notNull().references(() => users.id),\n}, (table) => ({\n  productIdx: index(\"goods_acceptance_product_idx\").on(table.productId),\n  statusIdx: index(\"goods_acceptance_status_idx\").on(table.status),\n  createdAtIdx: index(\"goods_acceptance_created_at_idx\").on(table.createdAt),\n}));\n\n// Inventory Audits (Инвентаризация)\nexport const inventoryAudits = pgTable(\"inventory_audits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, in_progress, completed, cancelled\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n}, (table) => ({\n  statusIdx: index(\"inventory_audits_status_idx\").on(table.status),\n  createdAtIdx: index(\"inventory_audits_created_at_idx\").on(table.createdAt),\n}));\n\nexport const inventoryAuditItems = pgTable(\"inventory_audit_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  auditId: varchar(\"audit_id\").notNull().references(() => inventoryAudits.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  expectedQuantity: integer(\"expected_quantity\").notNull(),\n  actualQuantity: integer(\"actual_quantity\").notNull(),\n  variance: integer(\"variance\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, counted, verified\n  notes: text(\"notes\"),\n}, (table) => ({\n  auditIdx: index(\"inventory_audit_items_audit_idx\").on(table.auditId),\n  productIdx: index(\"inventory_audit_items_product_idx\").on(table.productId),\n}));\n\n// Write-offs (Списания)\nexport const writeOffs = pgTable(\"write_offs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  reason: text(\"reason\").notNull(), // expired, damaged, theft, loss, defective, other\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  approved: boolean(\"approved\").notNull().default(false),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n}, (table) => ({\n  productIdx: index(\"write_offs_product_idx\").on(table.productId),\n  reasonIdx: index(\"write_offs_reason_idx\").on(table.reason),\n  createdAtIdx: index(\"write_offs_created_at_idx\").on(table.createdAt),\n  approvedIdx: index(\"write_offs_approved_idx\").on(table.approved),\n}));\n\n// Audit Logs (Аудит действий)\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(), // login, logout, create, update, delete, approve, etc.\n  entityType: text(\"entity_type\").notNull(), // product, user, transaction, etc.\n  entityId: varchar(\"entity_id\"),\n  changes: json(\"changes\"), // JSON with before/after values\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n}, (table) => ({\n  userIdx: index(\"audit_logs_user_idx\").on(table.userId),\n  actionIdx: index(\"audit_logs_action_idx\").on(table.action),\n  entityIdx: index(\"audit_logs_entity_idx\").on(table.entityType, table.entityId),\n  createdAtIdx: index(\"audit_logs_created_at_idx\").on(table.createdAt),\n}));\n\n// Insert schemas for new tables\nexport const insertCustomerTierSchema = createInsertSchema(customerTiers).omit({ id: true });\nexport const insertGoodsAcceptanceSchema = createInsertSchema(goodsAcceptance).omit({ id: true, createdAt: true });\nexport const insertInventoryAuditSchema = createInsertSchema(inventoryAudits).omit({ id: true, createdAt: true });\nexport const insertInventoryAuditItemSchema = createInsertSchema(inventoryAuditItems).omit({ id: true });\nexport const insertWriteOffSchema = createInsertSchema(writeOffs).omit({ id: true, createdAt: true });\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({ id: true, createdAt: true });\n\n// Types for new tables\nexport type GoodsAcceptance = typeof goodsAcceptance.$inferSelect;\nexport type InsertGoodsAcceptance = z.infer<typeof insertGoodsAcceptanceSchema>;\nexport type InventoryAudit = typeof inventoryAudits.$inferSelect;\nexport type InsertInventoryAudit = z.infer<typeof insertInventoryAuditSchema>;\nexport type InventoryAuditItem = typeof inventoryAuditItems.$inferSelect;\nexport type InsertInventoryAuditItem = z.infer<typeof insertInventoryAuditItemSchema>;\nexport type WriteOff = typeof writeOffs.$inferSelect;\nexport type InsertWriteOff = z.infer<typeof insertWriteOffSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type CustomerTier = typeof customerTiers.$inferSelect;\nexport type InsertCustomerTier = z.infer<typeof insertCustomerTierSchema>;\n\n// Complex types for new features\nexport type GoodsAcceptanceWithProduct = GoodsAcceptance & {\n  product: ProductWithCategory;\n  acceptedByUser: User;\n};\n\nexport type InventoryAuditWithItems = InventoryAudit & {\n  items: (InventoryAuditItem & { product: ProductWithCategory })[];\n  createdByUser: User;\n  totalItems: number;\n  countedItems: number;\n  totalVariance: number;\n};\n\nexport type WriteOffWithProduct = WriteOff & {\n  product: ProductWithCategory;\n  createdByUser: User;\n  approvedByUser?: User;\n};\n\nexport type CustomerWithTier = Customer & {\n  tier?: CustomerTier;\n};\n","size_bytes":16575},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route, Redirect, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { LanguageProvider } from \"@/i18n/LanguageContext\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport { ErrorBoundary } from \"@/components/ErrorBoundary\";\nimport POS from \"@/pages/pos\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ component: Component }: { component: () => JSX.Element }) {\n  const [location] = useLocation();\n  const setUserId = useSessionStore((state) => state.setUserId);\n\n  const { data: session, isLoading } = useQuery<{ user?: { id: string; username: string; role: string } }>({\n    queryKey: [\"/api/auth/session\"],\n    retry: false,\n    refetchOnMount: true,\n  });\n\n  useEffect(() => {\n    if (session?.user?.id) {\n      setUserId(session.user.id);\n    }\n  }, [session, setUserId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Загрузка...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!session || !session.user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\">\n        {() => <ProtectedRoute component={POS} />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider defaultTheme=\"light\">\n          <LanguageProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </LanguageProvider>\n        </ThemeProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":2301},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 20%, 14%);\n  --foreground: hsl(220, 10%, 95%);\n  --card: hsl(220, 20%, 18%);\n  --card-foreground: hsl(220, 10%, 95%);\n  --popover: hsl(220, 20%, 14%);\n  --popover-foreground: hsl(220, 10%, 95%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 15%, 25%);\n  --secondary-foreground: hsl(220, 10%, 90%);\n  --muted: hsl(220, 15%, 21%);\n  --muted-foreground: hsl(220, 10%, 70%);\n  --accent: hsl(220, 15%, 25%);\n  --accent-foreground: hsl(220, 10%, 90%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 28%);\n  --input: hsl(220, 13%, 28%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(220, 20%, 18%);\n  --sidebar-foreground: hsl(220, 10%, 95%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 15%, 25%);\n  --sidebar-accent-foreground: hsl(220, 10%, 90%);\n  --sidebar-border: hsl(220, 13%, 28%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 1px 2px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 1px 2px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 2px 4px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 4px 6px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 8px 10px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(220, 20%, 14%);\n  --foreground: hsl(220, 10%, 95%);\n  --card: hsl(220, 20%, 18%);\n  --card-foreground: hsl(220, 10%, 95%);\n  --popover: hsl(220, 20%, 14%);\n  --popover-foreground: hsl(220, 10%, 95%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 15%, 25%);\n  --secondary-foreground: hsl(220, 10%, 90%);\n  --muted: hsl(220, 15%, 21%);\n  --muted-foreground: hsl(220, 10%, 70%);\n  --accent: hsl(220, 15%, 25%);\n  --accent-foreground: hsl(220, 10%, 90%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 28%);\n  --input: hsl(220, 13%, 28%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(220, 20%, 18%);\n  --sidebar-foreground: hsl(220, 10%, 95%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 15%, 25%);\n  --sidebar-accent-foreground: hsl(220, 10%, 90%);\n  --sidebar-border: hsl(220, 13%, 28%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .sidebar-btn {\n    @apply w-full flex items-center gap-3 px-4 py-3 text-left text-sm font-medium rounded-lg transition-colors duration-200;\n  }\n  \n  .sidebar-btn.active {\n    @apply bg-primary text-primary-foreground;\n  }\n  \n  .sidebar-btn:not(.active) {\n    @apply text-muted-foreground hover:text-foreground hover:bg-accent;\n  }\n  \n  .product-card {\n    @apply bg-card border border-border rounded-lg p-6 cursor-pointer transition-all duration-200 hover:border-primary hover:shadow-lg hover:scale-105 active:scale-95 active:bg-accent min-h-[140px] touch-manipulation;\n  }\n  \n  .cart-item {\n    @apply flex items-center justify-between py-3 border-b border-border;\n  }\n  \n  .payment-btn {\n    @apply w-full py-5 px-6 text-lg font-semibold rounded-lg transition-all duration-200 active:scale-95 hover:scale-105 min-h-[56px] touch-manipulation;\n  }\n  \n  .number-pad-btn {\n    @apply w-full h-14 text-xl font-semibold rounded-lg transition-colors duration-200 bg-card border border-border hover:bg-accent;\n  }\n  \n  .status-badge {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n  }\n  \n  .status-online {\n    @apply bg-green-100 text-green-800;\n  }\n  \n  .status-offline {\n    @apply bg-red-100 text-red-800;\n  }\n\n  .touch-btn {\n    @apply min-h-[48px] min-w-[48px] transition-all duration-200 active:scale-95 active:bg-accent hover:scale-105 touch-manipulation;\n  }\n  \n  .touch-btn-sm {\n    @apply min-h-[44px] min-w-[44px] transition-all duration-200 active:scale-95 active:bg-accent hover:scale-105 touch-manipulation;\n  }\n  \n  .category-btn {\n    @apply px-6 py-3 text-base font-medium min-h-[48px] transition-all duration-200 active:scale-95 hover:scale-105 touch-manipulation;\n  }\n  \n  .stat-card {\n    @apply bg-card border border-border rounded-lg p-6;\n  }\n}\n","size_bytes":5565},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-pos-store.ts":{"content":"import { create } from 'zustand';\nimport type { TransactionWithItems } from '@shared/schema';\nimport { useSessionStore } from './use-session-store';\nimport { \n  addItemToCart, \n  removeItemFromCart, \n  updateItemQuantity, \n  clearCart, \n  calculateCartSummary,\n  type CartItem,\n  type CartSummary \n} from '@/domain/cart';\nimport { \n  validatePayment, \n  buildTransaction, \n  type PaymentMethod,\n  type PaymentRequest \n} from '@/domain/payment';\n\ninterface PaymentModalState {\n  isOpen: boolean;\n  method: 'cash' | 'card' | null;\n  amount: number;\n}\n\ninterface ReceiptModalState {\n  isOpen: boolean;\n  transaction: TransactionWithItems | null;\n}\n\ninterface POSStore {\n  // Cart state\n  cart: CartItem[];\n  selectedCustomer: string | null;\n  \n  // Modal states\n  paymentModal: PaymentModalState;\n  receiptModal: ReceiptModalState;\n  \n  // Computed state\n  cartSummary: CartSummary;\n  \n  // Pure cart actions\n  addToCart: (item: Omit<CartItem, 'quantity'>) => void;\n  removeFromCart: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  setSelectedCustomer: (customerId: string | null) => void;\n  \n  // Modal actions\n  openPaymentModal: (method: PaymentMethod, amount: number) => void;\n  closePaymentModal: () => void;\n  openReceiptModal: (transaction: TransactionWithItems) => void;\n  closeReceiptModal: () => void;\n  \n  // Payment preparation (pure functions)\n  validatePaymentRequest: (payment: PaymentRequest) => ReturnType<typeof validatePayment>;\n  prepareTransaction: () => { cart: CartItem[]; summary: CartSummary; context: any } | null;\n}\n\nexport const usePOSStore = create<POSStore>((set, get) => ({\n  // Initial state\n  cart: [],\n  selectedCustomer: null,\n  paymentModal: {\n    isOpen: false,\n    method: null,\n    amount: 0,\n  },\n  receiptModal: {\n    isOpen: false,\n    transaction: null,\n  },\n  \n  // Computed state - recalculated on every access\n  get cartSummary() {\n    return calculateCartSummary(get().cart);\n  },\n  \n  // Pure cart actions using domain functions\n  addToCart: (item) => {\n    const { cart } = get();\n    const newCart = addItemToCart(cart, item);\n    set({ cart: newCart });\n  },\n  \n  removeFromCart: (id) => {\n    const { cart } = get();\n    const newCart = removeItemFromCart(cart, id);\n    set({ cart: newCart });\n  },\n  \n  updateQuantity: (id, quantity) => {\n    const { cart } = get();\n    const newCart = updateItemQuantity(cart, id, quantity);\n    set({ cart: newCart });\n  },\n  \n  clearCart: () => {\n    const newCart = clearCart();\n    set({ cart: newCart, selectedCustomer: null });\n  },\n  \n  setSelectedCustomer: (customerId) => {\n    set({ selectedCustomer: customerId === \"new\" ? null : customerId });\n  },\n  \n  // Modal actions\n  openPaymentModal: (method, amount) => {\n    set({\n      paymentModal: {\n        isOpen: true,\n        method,\n        amount,\n      }\n    });\n  },\n  \n  closePaymentModal: () => {\n    set({\n      paymentModal: {\n        isOpen: false,\n        method: null,\n        amount: 0,\n      }\n    });\n  },\n  \n  openReceiptModal: (transaction) => {\n    set({\n      receiptModal: {\n        isOpen: true,\n        transaction,\n      }\n    });\n  },\n  \n  closeReceiptModal: () => {\n    set({\n      receiptModal: {\n        isOpen: false,\n        transaction: null,\n      }\n    });\n  },\n  \n  // Pure payment functions\n  validatePaymentRequest: (payment) => {\n    const { cartSummary } = get();\n    return validatePayment(payment, cartSummary.total);\n  },\n  \n  prepareTransaction: () => {\n    const { cart, cartSummary, selectedCustomer } = get();\n    \n    if (cart.length === 0) return null;\n    \n    // Get session from session store\n    const session = useSessionStore.getState();\n    \n    // Ensure we have an active shift\n    if (!session.currentShift) {\n      return null;\n    }\n    \n    // Use real shift and user IDs from session\n    const context = {\n      shiftId: session.currentShift.id,\n      userId: session.userId,\n      customerId: selectedCustomer || undefined,\n    };\n    \n    // This will be used by external mutation hooks\n    return {\n      cart: [...cart],\n      summary: cartSummary,\n      context\n    };\n  },\n}));\n","size_bytes":4149},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/pdf-generator.ts":{"content":"import jsPDF from 'jspdf';\nimport type { TransactionWithItems } from '@shared/schema';\n\nexport const generateReceiptPDF = (transaction: TransactionWithItems) => {\n  const doc = new jsPDF({\n    orientation: 'portrait',\n    unit: 'mm',\n    format: [80, 200], // Thermal printer paper size\n  });\n\n  // Set font\n  doc.setFont('helvetica');\n  \n  let yPosition = 10;\n  const lineHeight = 4;\n  const pageWidth = 80;\n  \n  // Helper function to add centered text\n  const addCenteredText = (text: string, y: number, fontSize = 10) => {\n    doc.setFontSize(fontSize);\n    const textWidth = doc.getTextWidth(text);\n    const x = (pageWidth - textWidth) / 2;\n    doc.text(text, x, y);\n    return y + lineHeight;\n  };\n  \n  // Helper function to add left-right aligned text\n  const addLeftRightText = (left: string, right: string, y: number, fontSize = 8) => {\n    doc.setFontSize(fontSize);\n    doc.text(left, 2, y);\n    \n    const rightWidth = doc.getTextWidth(right);\n    doc.text(right, pageWidth - rightWidth - 2, y);\n    return y + lineHeight;\n  };\n  \n  // Helper function to add line separator\n  const addLine = (y: number) => {\n    doc.line(2, y, pageWidth - 2, y);\n    return y + 2;\n  };\n  \n  // Store header\n  yPosition = addCenteredText('Кафе \"Уютное место\"', yPosition, 14);\n  yPosition = addCenteredText('ул. Пушкина, д. 10', yPosition, 10);\n  yPosition = addCenteredText('+7 (495) 123-45-67', yPosition, 10);\n  yPosition += 3;\n  \n  yPosition = addLine(yPosition);\n  \n  // Receipt info\n  yPosition = addLeftRightText('Чек:', `#${transaction.receiptNumber}`, yPosition);\n  yPosition = addLeftRightText('Дата:', new Date(transaction.createdAt).toLocaleString('ru-RU'), yPosition);\n  yPosition = addLeftRightText('Кассир:', 'Анна Петрова', yPosition);\n  yPosition = addLeftRightText('Касса:', '#001', yPosition);\n  \n  yPosition = addLine(yPosition);\n  \n  // Items\n  doc.setFontSize(8);\n  transaction.items.forEach((item) => {\n    // Item name\n    doc.text(item.product.name, 2, yPosition);\n    yPosition += lineHeight;\n    \n    // Item details and total\n    const details = `₸${item.unitPrice} × ${item.quantity}`;\n    yPosition = addLeftRightText(details, `₸${item.totalPrice}`, yPosition);\n  });\n  \n  yPosition = addLine(yPosition);\n  \n  // Totals\n  yPosition = addLeftRightText('Подытог:', `₸${transaction.subtotal}`, yPosition);\n  yPosition = addLeftRightText('Налог (10%):', `₸${transaction.tax}`, yPosition);\n  \n  yPosition = addLine(yPosition);\n  \n  // Total\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'bold');\n  yPosition = addLeftRightText('ИТОГО:', `₸${transaction.total}`, yPosition, 10);\n  \n  doc.setFont('helvetica', 'normal');\n  doc.setFontSize(8);\n  \n  // Payment info\n  if (transaction.paymentMethod === 'cash') {\n    yPosition = addLeftRightText('Получено:', `₸${transaction.receivedAmount}`, yPosition);\n    yPosition = addLeftRightText('Сдача:', `₸${transaction.changeAmount}`, yPosition);\n  } else {\n    yPosition = addLeftRightText('Оплата:', 'Карта', yPosition);\n  }\n  \n  yPosition += 3;\n  yPosition = addLine(yPosition);\n  \n  // Footer\n  yPosition = addCenteredText('Спасибо за покупку!', yPosition, 10);\n  yPosition = addCenteredText('Обмен и возврат в течение 14 дней', yPosition, 8);\n  \n  // QR code placeholder (if needed)\n  yPosition += 5;\n  doc.rect(25, yPosition, 30, 30); // Placeholder for QR code\n  yPosition = addCenteredText('QR-код для проверки', yPosition + 35, 6);\n  \n  // Save/Print PDF\n  const fileName = `receipt_${transaction.receiptNumber}_${new Date().toISOString().split('T')[0]}.pdf`;\n  \n  // Check if we're in a browser environment that supports printing\n  if (typeof window !== 'undefined') {\n    try {\n      // Try to print directly\n      doc.autoPrint();\n      window.open(doc.output('bloburl'), '_blank');\n    } catch (error) {\n      console.error('Print failed, downloading instead:', error);\n      doc.save(fileName);\n    }\n  } else {\n    // Fallback to download\n    doc.save(fileName);\n  }\n  \n  return doc;\n};\n\nexport const generateShiftReportPDF = (shiftData: any) => {\n  const doc = new jsPDF();\n  \n  let yPosition = 20;\n  const lineHeight = 7;\n  \n  // Header\n  doc.setFontSize(20);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Отчет по смене', 20, yPosition);\n  yPosition += lineHeight * 2;\n  \n  // Shift info\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'normal');\n  doc.text(`Смена: ${shiftData.shift.id}`, 20, yPosition);\n  yPosition += lineHeight;\n  doc.text(`Открыта: ${new Date(shiftData.shift.startTime).toLocaleString('ru-RU')}`, 20, yPosition);\n  yPosition += lineHeight;\n  \n  if (shiftData.shift.endTime) {\n    doc.text(`Закрыта: ${new Date(shiftData.shift.endTime).toLocaleString('ru-RU')}`, 20, yPosition);\n    yPosition += lineHeight;\n  }\n  \n  yPosition += lineHeight;\n  \n  // Financial summary\n  doc.setFontSize(14);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Финансовая сводка', 20, yPosition);\n  yPosition += lineHeight;\n  \n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'normal');\n  doc.text(`Касса на начало: ₸${shiftData.shift.startingCash}`, 20, yPosition);\n  yPosition += lineHeight;\n  doc.text(`Общие продажи: ₸${shiftData.totalSales}`, 20, yPosition);\n  yPosition += lineHeight;\n  doc.text(`Продажи наличными: ₸${shiftData.cashSales}`, 20, yPosition);\n  yPosition += lineHeight;\n  doc.text(`Продажи по картам: ₸${shiftData.cardSales}`, 20, yPosition);\n  yPosition += lineHeight;\n  doc.text(`Количество транзакций: ${shiftData.totalTransactions}`, 20, yPosition);\n  yPosition += lineHeight;\n  \n  if (shiftData.shift.endingCash) {\n    doc.text(`Касса на конец: ₸${shiftData.shift.endingCash}`, 20, yPosition);\n    yPosition += lineHeight;\n  }\n  \n  // Save PDF\n  const fileName = `shift_report_${shiftData.shift.id}_${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(fileName);\n  \n  return doc;\n};\n\nexport const generateInventoryReportPDF = (products: any[]) => {\n  const doc = new jsPDF();\n  \n  let yPosition = 20;\n  const lineHeight = 7;\n  \n  // Header\n  doc.setFontSize(20);\n  doc.setFont('helvetica', 'bold');\n  doc.text('Отчет по товарам', 20, yPosition);\n  yPosition += lineHeight * 2;\n  \n  // Date\n  doc.setFontSize(12);\n  doc.setFont('helvetica', 'normal');\n  doc.text(`Дата: ${new Date().toLocaleDateString('ru-RU')}`, 20, yPosition);\n  yPosition += lineHeight * 2;\n  \n  // Table headers\n  doc.setFontSize(10);\n  doc.setFont('helvetica', 'bold');\n  doc.text('SKU', 20, yPosition);\n  doc.text('Название', 50, yPosition);\n  doc.text('Цена', 120, yPosition);\n  doc.text('Остаток', 150, yPosition);\n  yPosition += lineHeight;\n  \n  // Table line\n  doc.line(20, yPosition - 2, 180, yPosition - 2);\n  \n  // Products\n  doc.setFont('helvetica', 'normal');\n  products.forEach((product) => {\n    if (yPosition > 270) { // New page if needed\n      doc.addPage();\n      yPosition = 20;\n    }\n    \n    doc.text(product.sku, 20, yPosition);\n    doc.text(product.name.substring(0, 25), 50, yPosition); // Truncate long names\n    doc.text(`₸${product.price}`, 120, yPosition);\n    doc.text(product.stock.toString(), 150, yPosition);\n    yPosition += lineHeight;\n  });\n  \n  // Save PDF\n  const fileName = `inventory_report_${new Date().toISOString().split('T')[0]}.pdf`;\n  doc.save(fileName);\n  \n  return doc;\n};\n","size_bytes":7556},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: data && !isFormData ? { \"Content-Type\": \"application/json\" } : {},\n    body: isFormData ? data : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1470},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pos.tsx":{"content":"import { useState } from \"react\";\nimport { Menu, ShoppingBag } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport Sidebar from \"@/components/pos/sidebar\";\nimport SalesTab from \"@/components/pos/sales-tab\";\nimport InventoryTab from \"@/components/pos/inventory-tab\";\nimport GoodsAcceptanceTab from \"@/components/pos/goods-acceptance-tab\";\nimport InventoryAuditTab from \"@/components/pos/inventory-audit-tab\";\nimport WriteOffsTab from \"@/components/pos/write-offs-tab\";\nimport LoyaltyProgram from \"@/components/pos/loyalty-program\";\nimport PromotionsTab from \"@/components/pos/promotions-tab\";\nimport HardwareConfig from \"@/components/pos/hardware-config\";\nimport ReportsTab from \"@/components/pos/reports-tab\";\nimport MonitoringDashboard from \"@/components/pos/monitoring-dashboard\";\nimport AnalyticsTab from \"@/components/pos/analytics-tab\";\nimport CustomersTab from \"@/components/pos/customers-tab\";\nimport ReturnsTab from \"@/components/pos/returns-tab\";\nimport ShiftTab from \"@/components/pos/shift-tab\";\nimport UsersManagement from \"@/pages/users-management\";\nimport PaymentModal from \"@/components/pos/payment-modal\";\nimport EnhancedReceiptModal from \"@/components/pos/enhanced-receipt-modal\";\nimport ExpirationAlert from \"@/components/pos/expiration-alert\";\nimport LowStockAlert from \"@/components/pos/low-stock-alert\";\nimport { usePOSStore } from \"@/hooks/use-pos-store\";\nimport { useSyncCurrentShift } from \"@/hooks/use-sync-current-shift\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function POS() {\n  const [activeTab, setActiveTab] = useState(\"sales\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { paymentModal, receiptModal, cart } = usePOSStore();\n  const isMobile = useIsMobile();\n  \n  // Sync current shift with backend\n  useSyncCurrentShift();\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"sales\":\n        return <SalesTab />;\n      case \"inventory\":\n        return <InventoryTab />;\n      case \"acceptance\":\n        return <GoodsAcceptanceTab />;\n      case \"audit\":\n        return <InventoryAuditTab />;\n      case \"writeoffs\":\n        return <WriteOffsTab />;\n      case \"loyalty\":\n        return <LoyaltyProgram />;\n      case \"promotions\":\n        return <PromotionsTab />;\n      case \"hardware\":\n        return <HardwareConfig />;\n      case \"reports\":\n        return <ReportsTab />;\n      case \"monitoring\":\n        return <MonitoringDashboard />;\n      case \"analytics\":\n        return <AnalyticsTab />;\n      case \"customers\":\n        return <CustomersTab />;\n      case \"returns\":\n        return <ReturnsTab />;\n      case \"shift\":\n        return <ShiftTab />;\n      case \"users\":\n        return <UsersManagement />;\n      default:\n        return <SalesTab />;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen overflow-hidden bg-background text-foreground\" data-testid=\"pos-main\">\n      {/* Mobile Header */}\n      {isMobile && (\n        <div className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-card\">\n          <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"mobile-menu\">\n                <Menu className=\"w-5 h-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"w-64 p-0\">\n              <Sidebar activeTab={activeTab} onTabChange={(tab) => {\n                setActiveTab(tab);\n                setSidebarOpen(false);\n              }} />\n            </SheetContent>\n          </Sheet>\n          \n          <h1 className=\"text-lg font-bold\">POS System</h1>\n          \n          <div className=\"relative\">\n            {cart.length > 0 && (\n              <Badge className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\">\n                {cart.length}\n              </Badge>\n            )}\n            <ShoppingBag className=\"w-5 h-5\" />\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Desktop Sidebar */}\n        {!isMobile && <Sidebar activeTab={activeTab} onTabChange={setActiveTab} />}\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {renderTabContent()}\n        </div>\n      </div>\n      \n      {paymentModal.isOpen && <PaymentModal />}\n      {receiptModal.isOpen && <EnhancedReceiptModal />}\n      <ExpirationAlert />\n      <LowStockAlert threshold={5} />\n    </div>\n  );\n}\n","size_bytes":4673},"client/src/components/pos/analytics-tab.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Banknote, Receipt, TrendingUp, Wifi } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { Product } from \"@shared/schema\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\n\ninterface DailySales {\n  revenue: number;\n  transactions: number;\n  averageCheck: number;\n}\n\ninterface TopProduct {\n  product: Product;\n  sold: number;\n}\n\nexport default function AnalyticsTab() {\n  const [dateFilter, setDateFilter] = useState(\"today\");\n  const { t } = useLanguage();\n  const { formatCurrency } = useFormatters();\n\n  const { data: dailyAnalytics } = useQuery<DailySales>({\n    queryKey: [\"/api/analytics/daily\", new Date().toISOString().split('T')[0]],\n  });\n\n  const { data: topProducts = [] } = useQuery<TopProduct[]>({\n    queryKey: [\"/api/analytics/top-products\"],\n  });\n\n  return (\n    <div className=\"flex-1 p-3 sm:p-6\" data-testid=\"analytics-tab\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 sm:mb-6 gap-3 sm:gap-0\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground\">{t.analytics.title}</h1>\n          <Select value={dateFilter} onValueChange={setDateFilter}>\n            <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"date-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">{t.analytics.today}</SelectItem>\n              <SelectItem value=\"yesterday\">{t.analytics.yesterday}</SelectItem>\n              <SelectItem value=\"week\">{t.analytics.thisWeek}</SelectItem>\n              <SelectItem value=\"month\">{t.analytics.thisMonth}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-6 sm:mb-8\">\n          <Card className=\"stat-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">{t.analytics.revenue}</CardTitle>\n              <Banknote className=\"w-4 h-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-card-foreground\" data-testid=\"revenue\">\n                {formatCurrency(dailyAnalytics?.revenue || 0)}\n              </div>\n              <p className=\"text-xs text-green-600\">+12% {t.analytics.fromYesterday}</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"stat-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">{t.analytics.transactions}</CardTitle>\n              <Receipt className=\"w-4 h-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-card-foreground\" data-testid=\"transactions\">\n                {dailyAnalytics?.transactions || 0}\n              </div>\n              <p className=\"text-xs text-blue-600\">+3 {t.analytics.fromYesterday}</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"stat-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">{t.analytics.averageCheck}</CardTitle>\n              <TrendingUp className=\"w-4 h-4 text-purple-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-card-foreground\" data-testid=\"average-check\">\n                {formatCurrency(dailyAnalytics?.averageCheck || 0)}\n              </div>\n              <p className=\"text-xs text-purple-600\">+{formatCurrency(15)} {t.analytics.fromYesterday}</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"stat-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">{t.analytics.offlineOperations}</CardTitle>\n              <Wifi className=\"w-4 h-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-card-foreground\">0</div>\n              <p className=\"text-xs text-red-600\">{t.analytics.waitingSync}</p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-6\">\n          {/* Revenue Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-card-foreground\">{t.analytics.hourlyRevenue}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">{t.common.chartPlaceholder}</p>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Top Products */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-card-foreground\">{t.analytics.topProducts}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {topProducts.length > 0 ? (\n                  topProducts.map((item, index) => (\n                    <div key={item.product.id} className=\"flex items-center justify-between\" data-testid={`top-product-${index}`}>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-muted rounded flex items-center justify-center\">\n                          <span className=\"text-muted-foreground text-sm\">{index + 1}</span>\n                        </div>\n                        <span className=\"text-card-foreground\">{item.product.name}</span>\n                      </div>\n                      <span className=\"font-semibold text-card-foreground\">{item.sold} {t.common.pieces}</span>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-muted-foreground text-center\">{t.common.noData}</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6763},"client/src/components/pos/cart.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Minus, Plus, CreditCard, Banknote } from \"lucide-react\";\nimport { usePOSStore } from \"@/hooks/use-pos-store\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport type { Customer } from \"@shared/schema\";\n\nexport default function Cart() {\n  const { \n    cart,\n    cartSummary,\n    selectedCustomer, \n    setSelectedCustomer, \n    removeFromCart, \n    updateQuantity, \n    clearCart, \n    openPaymentModal \n  } = usePOSStore();\n  \n  \n  const { formatCurrency } = useFormatters();\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const handleCashPayment = () => {\n    openPaymentModal(\"cash\", cartSummary.total);\n  };\n\n  const handleCardPayment = () => {\n    openPaymentModal(\"card\", cartSummary.total);\n  };\n\n  return (\n    <div className=\"w-full sm:w-96 bg-card sm:border-l border-border flex flex-col h-full\" data-testid=\"cart\">\n      {/* Cart Header */}\n      <div className=\"p-4 sm:p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n          <h2 className=\"text-lg sm:text-xl font-bold text-card-foreground\">Корзина</h2>\n          {cart.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              onClick={clearCart}\n              className=\"text-destructive hover:text-destructive/80 touch-btn-sm\"\n              data-testid=\"clear-cart\"\n            >\n              <Trash2 className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Customer Selection */}\n        <Select value={selectedCustomer || \"\"} onValueChange={setSelectedCustomer}>\n          <SelectTrigger data-testid=\"customer-select\">\n            <SelectValue placeholder=\"Новый покупатель\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"new\">Новый покупатель</SelectItem>\n            {customers.map((customer) => (\n              <SelectItem key={customer.id} value={customer.id}>\n                {customer.name} ({customer.phone})\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      \n      {/* Cart Items */}\n      <div className=\"flex-1 p-4 sm:p-6 overflow-y-auto\">\n        {cart.length === 0 ? (\n          <div className=\"text-center py-8 sm:py-12\">\n            <p className=\"text-muted-foreground\">Корзина пуста</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3 sm:space-y-4\">\n            {cart.map((item) => (\n              <div key={item.id} className=\"cart-item flex-wrap sm:flex-nowrap gap-2 sm:gap-3\" data-testid={`cart-item-${item.id}`}>\n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"font-medium text-card-foreground text-sm sm:text-base md:text-lg mb-1 truncate\">{item.name}</h4>\n                  <p className=\"text-xs sm:text-sm text-muted-foreground\">{formatCurrency(parseFloat(item.price))}</p>\n                </div>\n                <div className=\"flex items-center gap-2 sm:gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"touch-btn-sm h-8 w-8 p-0 sm:h-9 sm:w-9\"\n                    onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                    disabled={item.quantity <= 1}\n                    data-testid={`decrease-${item.id}`}\n                  >\n                    <Minus className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                  </Button>\n                  <span className=\"w-8 sm:w-10 text-center font-medium text-sm sm:text-base\" data-testid={`quantity-${item.id}`}>\n                    {item.quantity}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"touch-btn-sm h-8 w-8 p-0 sm:h-9 sm:w-9\"\n                    onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                    disabled={item.quantity >= item.stock}\n                    data-testid={`increase-${item.id}`}\n                  >\n                    <Plus className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                  </Button>\n                </div>\n                <div className=\"w-16 sm:w-20 text-right font-bold text-card-foreground text-sm sm:text-base md:text-lg\">\n                  {formatCurrency(parseFloat(item.price) * item.quantity)}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      {/* Cart Summary */}\n      {cart.length > 0 && (\n        <div className=\"p-4 sm:p-6 border-t border-border\">\n          <div className=\"space-y-2 sm:space-y-3 mb-4 sm:mb-6\">\n            <div className=\"flex justify-between text-card-foreground text-sm sm:text-base\">\n              <span>Подытог:</span>\n              <span data-testid=\"subtotal\">{formatCurrency(cartSummary.subtotal)}</span>\n            </div>\n            <div className=\"flex justify-between text-card-foreground text-sm sm:text-base\">\n              <span>Налог:</span>\n              <span data-testid=\"tax\">{formatCurrency(cartSummary.tax)}</span>\n            </div>\n            <div className=\"flex justify-between text-lg sm:text-xl font-bold border-t border-border pt-2 sm:pt-3 text-card-foreground\">\n              <span>Итого:</span>\n              <span data-testid=\"total\">{formatCurrency(cartSummary.total)}</span>\n            </div>\n          </div>\n          \n          {/* Payment Buttons */}\n          <div className=\"grid grid-cols-2 gap-3 sm:gap-4\">\n            <Button\n              className=\"payment-btn bg-green-600 hover:bg-green-700 text-white text-sm sm:text-base py-2 sm:py-3\"\n              onClick={handleCashPayment}\n              data-testid=\"cash-payment\"\n            >\n              <Banknote className=\"w-4 h-4 sm:w-5 sm:h-5 sm:mr-2\" />\n              <span className=\"hidden sm:inline\">Наличные</span>\n              <span className=\"sm:hidden\">Нал</span>\n            </Button>\n            <Button\n              className=\"payment-btn bg-blue-600 hover:bg-blue-700 text-white text-sm sm:text-base py-2 sm:py-3\"\n              onClick={handleCardPayment}\n              data-testid=\"card-payment\"\n            >\n              <CreditCard className=\"w-4 h-4 sm:w-5 sm:h-5 sm:mr-2\" />\n              <span className=\"sm:inline\">Карта</span>\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6704},"client/src/components/pos/customers-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Plus, User, Star } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport type { Customer } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CustomersTab() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const addCustomerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/customers\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"Успех\",\n        description: \"Клиент успешно добавлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n    },\n  });\n\n  const filteredCustomers = customers.filter(customer =>\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (customer.phone && customer.phone.includes(searchTerm)) ||\n    (customer.email && customer.email.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const onSubmit = (data: any) => {\n    addCustomerMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-3 sm:p-6 overflow-auto\" data-testid=\"customers-tab\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-0 mb-4 sm:mb-6\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground\">Клиенты</h1>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"w-full sm:w-auto\" data-testid=\"add-customer\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Добавить клиента\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Добавить нового клиента</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Имя</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-customer-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Телефон</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-customer-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} data-testid=\"input-customer-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button type=\"submit\" disabled={addCustomerMutation.isPending} data-testid=\"submit-customer\">\n                    {addCustomerMutation.isPending ? \"Добавление...\" : \"Добавить\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"mb-4 sm:mb-6\">\n          <Input\n            placeholder=\"Поиск клиентов...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full sm:max-w-sm\"\n            data-testid=\"search-customers\"\n          />\n        </div>\n        \n        {/* Customers Table */}\n        <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Клиент</TableHead>\n                  <TableHead>Телефон</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Бонусы</TableHead>\n                  <TableHead>Дата регистрации</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredCustomers.map((customer) => (\n                  <TableRow key={customer.id} data-testid={`customer-row-${customer.id}`}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center\">\n                          <User className=\"text-muted-foreground w-5 h-5\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-card-foreground\">{customer.name}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-card-foreground\">{customer.phone || \"-\"}</TableCell>\n                    <TableCell className=\"text-card-foreground\">{customer.email || \"-\"}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"w-4 h-4 text-yellow-500\" />\n                        <span className=\"text-card-foreground\">{customer.loyaltyPoints}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-card-foreground\">\n                      {new Date(customer.createdAt).toLocaleDateString('ru-RU')}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {filteredCustomers.length === 0 && (\n            <div className=\"text-center py-8 sm:py-12\">\n              <p className=\"text-muted-foreground\">Клиенты не найдены</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8158},"client/src/components/pos/inventory-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Edit, Trash2, Coffee, Cookie, Sandwich, Upload, Image } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema } from \"@shared/schema\";\nimport type { ProductWithCategory, Category } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\n\nconst iconMap: Record<string, any> = {\n  \"Напитки\": Coffee,\n  \"Выпечка\": Cookie,\n  \"Закуски\": Sandwich,\n  default: Coffee\n};\n\nexport default function InventoryTab() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<ProductWithCategory | null>(null);\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [isUploadingImage, setIsUploadingImage] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t } = useLanguage();\n\n  const { data: products = [], isLoading } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const addProductMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsAddDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Успех\",\n        description: \"Товар успешно добавлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsEditDialogOpen(false);\n      setEditingProduct(null);\n      resetForm();\n      toast({\n        title: \"Успех\",\n        description: \"Товар успешно обновлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Товар успешно удален\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      sku: \"\",\n      name: \"\",\n      description: \"\",\n      price: \"0\",\n      stock: 0,\n      categoryId: \"\",\n      imageUrl: \"\",\n      isActive: true,\n      expirationDate: \"\",\n    },\n  });\n\n  const handleImageSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedImage(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const uploadImage = async (): Promise<string | null> => {\n    if (!selectedImage) return null;\n    \n    setIsUploadingImage(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', selectedImage);\n      \n      const response = await apiRequest(\"POST\", \"/api/products/upload-image\", formData);\n      const data = await response.json();\n      return data.imageUrl;\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось загрузить изображение\",\n        variant: \"destructive\",\n      });\n      return null;\n    } finally {\n      setIsUploadingImage(false);\n    }\n  };\n\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    product.sku.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const onSubmit = async (data: any) => {\n    let imageUrl = data.imageUrl || \"\";\n    \n    // Upload image first if selected\n    if (selectedImage) {\n      const uploadedImageUrl = await uploadImage();\n      if (uploadedImageUrl) {\n        imageUrl = uploadedImageUrl;\n      }\n    }\n    \n    // Create or update product with image URL\n    const productData = { ...data };\n    if (imageUrl) {\n      productData.imageUrl = imageUrl;\n    }\n    \n    // Convert empty expirationDate to undefined\n    if (productData.expirationDate === \"\" || !productData.expirationDate) {\n      productData.expirationDate = undefined;\n    }\n    \n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data: productData });\n    } else {\n      addProductMutation.mutate(productData);\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setSelectedImage(null);\n    setImagePreview(null);\n  };\n\n  const handleEdit = (product: ProductWithCategory) => {\n    setEditingProduct(product);\n    setSelectedImage(null); // Clear any stale image selection\n    form.reset({\n      sku: product.sku,\n      name: product.name,\n      description: product.description || \"\",\n      price: product.price,\n      stock: product.stock,\n      categoryId: product.categoryId || \"\",\n      imageUrl: product.imageUrl || \"\",\n      isActive: product.isActive,\n      expirationDate: product.expirationDate ? new Date(product.expirationDate).toISOString().split('T')[0] : \"\",\n    });\n    if (product.imageUrl) {\n      setImagePreview(product.imageUrl);\n    } else {\n      setImagePreview(null);\n    }\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Вы уверены, что хотите удалить этот товар?\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-3 sm:p-6\" data-testid=\"inventory-tab\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 sm:mb-6 gap-3 sm:gap-0\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground\">Управление товарами</h1>\n          <Dialog open={isAddDialogOpen} onOpenChange={(open) => {\n            setIsAddDialogOpen(open);\n            if (!open) {\n              resetForm();\n            }\n          }}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"add-product\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Добавить товар\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Добавить новый товар</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"sku\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SKU</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-sku\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Название</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Описание</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Цена</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-price\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Количество</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} data-testid=\"input-stock\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Категория</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Выберите категорию\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories.map((category) => (\n                              <SelectItem key={category.id} value={category.id}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"expirationDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Срок годности (необязательно)</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} value={field.value || \"\"} data-testid=\"input-expiration-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {/* Image Upload Field */}\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Изображение товара</label>\n                    <div className=\"flex flex-col space-y-2\">\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageSelect}\n                        className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90\"\n                        data-testid=\"input-image\"\n                      />\n                      {imagePreview && (\n                        <div className=\"relative w-32 h-32 border border-border rounded-lg overflow-hidden\">\n                          <img\n                            src={imagePreview}\n                            alt=\"Предпросмотр\"\n                            className=\"w-full h-full object-cover\"\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => {\n                              setSelectedImage(null);\n                              setImagePreview(null);\n                            }}\n                            className=\"absolute top-1 right-1 bg-destructive text-destructive-foreground rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-destructive/90\"\n                          >\n                            ×\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" disabled={addProductMutation.isPending || isUploadingImage} data-testid=\"submit-product\">\n                    {addProductMutation.isPending || isUploadingImage ? \"Добавление...\" : \"Добавить\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n          \n          {/* Edit Product Dialog */}\n          <Dialog open={isEditDialogOpen} onOpenChange={(open) => {\n            setIsEditDialogOpen(open);\n            if (!open) {\n              setEditingProduct(null);\n              resetForm();\n            }\n          }}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Редактировать товар</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"sku\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SKU</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-sku-edit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Название</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-name-edit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Описание</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-description-edit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Цена</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-price-edit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Количество</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value))} data-testid=\"input-stock-edit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Категория</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category-edit\">\n                              <SelectValue placeholder=\"Выберите категорию\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories.map((category) => (\n                              <SelectItem key={category.id} value={category.id}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"expirationDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Срок годности (необязательно)</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} value={field.value || \"\"} data-testid=\"input-expiration-date-edit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {/* Image Upload Field */}\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Изображение товара</label>\n                    <div className=\"flex flex-col space-y-2\">\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageSelect}\n                        className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90\"\n                        data-testid=\"input-image-edit\"\n                      />\n                      {imagePreview && (\n                        <div className=\"relative w-32 h-32 border border-border rounded-lg overflow-hidden\">\n                          <img\n                            src={imagePreview}\n                            alt=\"Предпросмотр\"\n                            className=\"w-full h-full object-cover\"\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => {\n                              setSelectedImage(null);\n                              setImagePreview(null);\n                            }}\n                            className=\"absolute top-1 right-1 bg-destructive text-destructive-foreground rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-destructive/90\"\n                          >\n                            ×\n                          </button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <Button type=\"submit\" disabled={updateProductMutation.isPending || isUploadingImage} data-testid=\"submit-product-edit\">\n                    {updateProductMutation.isPending || isUploadingImage ? \"Обновление...\" : \"Обновить\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"mb-4 sm:mb-6\">\n          <Input\n            placeholder=\"Поиск товаров...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full sm:max-w-sm\"\n            data-testid=\"search-inventory\"\n          />\n        </div>\n        \n        {/* Inventory Table */}\n        <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Товар</TableHead>\n                  <TableHead>SKU</TableHead>\n                  <TableHead>Цена</TableHead>\n                  <TableHead>Остаток</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProducts.map((product) => {\n                  const Icon = iconMap[product.category?.name || \"default\"] || iconMap.default;\n                  return (\n                    <TableRow key={product.id} data-testid={`inventory-row-${product.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-muted rounded flex items-center justify-center overflow-hidden\">\n                            {product.imageUrl ? (\n                              <img\n                                src={product.imageUrl}\n                                alt={product.name}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            ) : (\n                              <Icon className=\"text-muted-foreground w-5 h-5\" />\n                            )}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-card-foreground\">{product.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{product.category?.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-card-foreground\">{product.sku}</TableCell>\n                      <TableCell className=\"font-semibold text-card-foreground\">₸{product.price}</TableCell>\n                      <TableCell className=\"text-card-foreground\">{product.stock}</TableCell>\n                      <TableCell>\n                        {product.stock > 10 ? (\n                          <Badge className=\"bg-green-100 text-green-800\">В наличии</Badge>\n                        ) : product.stock > 0 ? (\n                          <Badge variant=\"secondary\">Мало</Badge>\n                        ) : (\n                          <Badge variant=\"destructive\">Нет в наличии</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-primary hover:bg-primary hover:text-primary-foreground\"\n                            onClick={() => handleEdit(product)}\n                            data-testid={`edit-product-${product.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                            onClick={() => handleDelete(product.id)}\n                            data-testid={`delete-product-${product.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {filteredProducts.length === 0 && (\n            <div className=\"text-center py-8 sm:py-12\">\n              <p className=\"text-muted-foreground\">Товары не найдены</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26855},"client/src/components/pos/payment-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Delete } from \"lucide-react\";\nimport { usePOSStore } from \"@/hooks/use-pos-store\";\nimport { usePOSMutations } from \"@/hooks/use-pos-mutations\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\n\nexport default function PaymentModal() {\n  const { paymentModal, closePaymentModal } = usePOSStore();\n  const { createTransaction } = usePOSMutations();\n  const { t } = useLanguage();\n  const { formatCurrency } = useFormatters();\n  const currentShift = useSessionStore((state) => state.currentShift);\n  const [receivedAmountCents, setReceivedAmountCents] = useState(0);\n\n  const receivedAmount = receivedAmountCents / 100;\n  const change = Math.max(0, receivedAmount - paymentModal.amount);\n  const canProcess = receivedAmount >= paymentModal.amount && !!currentShift;\n\n  useEffect(() => {\n    setReceivedAmountCents(0);\n  }, [paymentModal.isOpen]);\n\n  const handleNumberClick = (value: string) => {\n    if (value === \"00\") {\n      setReceivedAmountCents(prev => prev * 100);\n    } else {\n      const digit = parseInt(value);\n      setReceivedAmountCents(prev => prev * 10 + digit);\n    }\n  };\n\n  const handleBackspace = () => {\n    setReceivedAmountCents(prev => Math.floor(prev / 10));\n  };\n\n  const handleProcess = () => {\n    if (paymentModal.method === \"card\" || canProcess) {\n      createTransaction.mutate({\n        method: paymentModal.method!,\n        amount: paymentModal.amount,\n        receivedAmount: paymentModal.method === \"cash\" ? receivedAmount : paymentModal.amount,\n      });\n    }\n  };\n\n  if (!paymentModal.isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" data-testid=\"payment-modal\">\n      <div className=\"bg-card border border-border rounded-lg w-96 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-card-foreground\">\n            {paymentModal.method === \"cash\" ? t.payment.cashPayment : t.payment.cardPayment}\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={closePaymentModal}\n            data-testid=\"close-payment-modal\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {/* Amount Display */}\n        <div className=\"bg-muted rounded-lg p-4 mb-4\">\n          <p className=\"text-sm text-muted-foreground mb-1\">{t.payment.toPay}</p>\n          <p className=\"text-2xl font-bold text-primary\" data-testid=\"payment-amount\">\n            {formatCurrency(paymentModal.amount)}\n          </p>\n        </div>\n        \n        {paymentModal.method === \"cash\" && (\n          <>\n            <div className=\"bg-input rounded-lg p-4 mb-4\">\n              <p className=\"text-sm text-muted-foreground mb-1\">{t.payment.received}</p>\n              <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"received-amount\">\n                {formatCurrency(receivedAmount)}\n              </p>\n            </div>\n            \n            <div className=\"bg-accent rounded-lg p-4 mb-6\">\n              <p className=\"text-sm text-muted-foreground mb-1\">{t.payment.change}</p>\n              <p className=\"text-2xl font-bold text-green-600\" data-testid=\"change-amount\">\n                {formatCurrency(change)}\n              </p>\n            </div>\n            \n            {/* Number Pad */}\n            <div className=\"grid grid-cols-3 gap-2 mb-6\">\n              {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (\n                <Button\n                  key={num}\n                  variant=\"outline\"\n                  className=\"number-pad-btn\"\n                  onClick={() => handleNumberClick(num.toString())}\n                  data-testid={`number-${num}`}\n                >\n                  {num}\n                </Button>\n              ))}\n              <Button\n                variant=\"outline\"\n                className=\"number-pad-btn\"\n                onClick={() => handleNumberClick(\"00\")}\n                data-testid=\"number-00\"\n              >\n                00\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"number-pad-btn\"\n                onClick={() => handleNumberClick(\"0\")}\n                data-testid=\"number-0\"\n              >\n                0\n              </Button>\n              <Button\n                variant=\"destructive\"\n                className=\"number-pad-btn\"\n                onClick={handleBackspace}\n                data-testid=\"backspace\"\n              >\n                <Delete className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </>\n        )}\n        \n        {/* Action Buttons */}\n        <div className=\"flex gap-3\">\n          <Button\n            variant=\"outline\"\n            className=\"flex-1\"\n            onClick={closePaymentModal}\n            data-testid=\"cancel-payment\"\n          >\n            {t.payment.cancel}\n          </Button>\n          <Button\n            className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n            onClick={handleProcess}\n            disabled={!currentShift || (paymentModal.method === \"cash\" && !canProcess)}\n            data-testid=\"process-payment\"\n          >\n            {t.payment.complete}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5511},"client/src/components/pos/product-grid.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Barcode, Coffee, Cookie, GlassWater, Sandwich, IceCream, PillBottle } from \"lucide-react\";\nimport { usePOSStore } from \"@/hooks/use-pos-store\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport BarcodeScanner from \"./barcode-scanner\";\nimport type { ProductWithCategory, Category } from \"@shared/schema\";\n\nconst iconMap: Record<string, any> = {\n  \"Напитки\": Coffee,\n  \"Выпечка\": Cookie,\n  \"Закуски\": Sandwich,\n  default: Coffee\n};\n\nexport default function ProductGrid() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [scannerOpen, setScannerOpen] = useState(false);\n  const { addToCart } = usePOSStore();\n  const { formatCurrency } = useFormatters();\n\n  const { data: products = [], isLoading } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Автоматический тест отключен - корзина работает корректно!\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.sku.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || product.categoryId === selectedCategory;\n    return matchesSearch && matchesCategory && product.isActive;\n  });\n\n  const handleAddToCart = (product: ProductWithCategory) => {\n    const cartItem = {\n      id: product.id,\n      name: product.name,\n      price: product.price,\n      stock: product.stock,\n      sku: product.sku\n    };\n    addToCart(cartItem);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col\" data-testid=\"product-grid\">\n      {/* Search and Categories */}\n      <div className=\"p-3 sm:p-6 border-b border-border\">\n        <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 mb-4\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Поиск товаров...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-products\"\n            />\n          </div>\n          <Button \n            className=\"px-4 sm:px-6 w-full sm:w-auto\" \n            data-testid=\"barcode-scanner\"\n            onClick={() => setScannerOpen(true)}\n          >\n            <Barcode className=\"w-4 h-4 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">Сканер</span>\n          </Button>\n        </div>\n        \n        {/* Categories */}\n        <div className=\"flex gap-2 sm:gap-3 overflow-x-auto pb-2 -mb-2\">\n          <Button\n            variant={selectedCategory === \"all\" ? \"default\" : \"outline\"}\n            className=\"category-btn whitespace-nowrap text-sm sm:text-base\"\n            onClick={() => setSelectedCategory(\"all\")}\n            data-testid=\"category-all\"\n          >\n            Все\n          </Button>\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n              className=\"category-btn whitespace-nowrap text-sm sm:text-base\"\n              onClick={() => setSelectedCategory(category.id)}\n              data-testid={`category-${category.id}`}\n            >\n              {category.name}\n            </Button>\n          ))}\n        </div>\n      </div>\n      \n      {/* Products Grid */}\n      <div className=\"flex-1 p-3 sm:p-6 overflow-y-auto\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 md:gap-6\">\n          {filteredProducts.map((product) => {\n            const Icon = iconMap[product.category?.name || \"default\"] || iconMap.default;\n            return (\n              <div\n                key={product.id}\n                className=\"product-card\"\n                onClick={() => handleAddToCart(product)}\n                data-testid={`product-${product.id}`}\n              >\n                <div className=\"aspect-square bg-muted rounded-lg mb-2 sm:mb-4 flex items-center justify-center overflow-hidden\">\n                  {product.imageUrl ? (\n                    <img\n                      src={product.imageUrl}\n                      alt={product.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <Icon className=\"text-muted-foreground w-8 h-8 sm:w-12 sm:h-12\" />\n                  )}\n                </div>\n                <h3 className=\"font-semibold mb-1 sm:mb-2 text-card-foreground text-sm sm:text-base md:text-lg line-clamp-2\">{product.name}</h3>\n                <p className=\"text-base sm:text-lg md:text-xl font-bold text-primary mb-1\">{formatCurrency(parseFloat(product.price))}</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  В наличии: {product.stock}\n                  {product.stock <= 5 && (\n                    <Badge variant=\"destructive\" className=\"ml-1 sm:ml-2 text-xs\">Мало</Badge>\n                  )}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n        \n        {filteredProducts.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Товары не найдены</p>\n          </div>\n        )}\n      </div>\n      \n      <BarcodeScanner\n        isOpen={scannerOpen}\n        onClose={() => setScannerOpen(false)}\n        onProductScanned={(product) => {\n          addToCart({\n            id: product.id,\n            name: product.name,\n            price: product.price,\n            stock: product.stock,\n            sku: product.sku\n          });\n          setScannerOpen(false);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":6581},"client/src/components/pos/receipt-modal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { X, Printer, Mail } from \"lucide-react\";\nimport { usePOSStore } from \"@/hooks/use-pos-store\";\nimport { generateReceiptPDF } from \"@/lib/pdf-generator\";\n\nexport default function ReceiptModal() {\n  const { receiptModal, closeReceiptModal } = usePOSStore();\n\n  if (!receiptModal.isOpen || !receiptModal.transaction) return null;\n\n  const { transaction } = receiptModal;\n\n  const handlePrint = () => {\n    generateReceiptPDF(transaction);\n  };\n\n  const handleEmail = () => {\n    // TODO: Implement email functionality\n    console.log(\"Email receipt\");\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" data-testid=\"receipt-modal\">\n      <div className=\"bg-card border border-border rounded-lg w-96 max-h-[80vh] overflow-y-auto\">\n        <div className=\"sticky top-0 bg-card border-b border-border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-bold text-card-foreground\">\n              Чек #{transaction.receiptNumber}\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={closeReceiptModal}\n              data-testid=\"close-receipt-modal\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"p-6\">\n          {/* Receipt Content */}\n          <div className=\"text-center mb-6\">\n            <h3 className=\"font-bold text-lg text-card-foreground\">Кафе \"Уютное место\"</h3>\n            <p className=\"text-sm text-muted-foreground\">ул. Пушкина, д. 10</p>\n            <p className=\"text-sm text-muted-foreground\">+7 (495) 123-45-67</p>\n          </div>\n          \n          <div className=\"space-y-2 mb-4 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Дата:</span>\n              <span data-testid=\"receipt-date\">\n                {new Date(transaction.createdAt).toLocaleString('ru-RU')}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Кассир:</span>\n              <span>Анна Петрова</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Касса:</span>\n              <span>#001</span>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-b border-border py-4 mb-4\">\n            {transaction.items.map((item) => (\n              <div key={item.id} className=\"flex justify-between text-sm mb-2\">\n                <div>\n                  <p className=\"text-card-foreground\">{item.product.name}</p>\n                  <p className=\"text-muted-foreground\">\n                    ₸{item.unitPrice} × {item.quantity}\n                  </p>\n                </div>\n                <span className=\"text-card-foreground\">₸{item.totalPrice}</span>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"space-y-1 text-sm mb-6\">\n            <div className=\"flex justify-between\">\n              <span>Подытог:</span>\n              <span data-testid=\"receipt-subtotal\">₸{transaction.subtotal}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Налог (10%):</span>\n              <span data-testid=\"receipt-tax\">₸{transaction.tax}</span>\n            </div>\n            <div className=\"flex justify-between font-bold text-base border-t border-border pt-2\">\n              <span>Итого:</span>\n              <span data-testid=\"receipt-total\">₸{transaction.total}</span>\n            </div>\n            {transaction.paymentMethod === \"cash\" && (\n              <>\n                <div className=\"flex justify-between\">\n                  <span>Получено:</span>\n                  <span data-testid=\"receipt-received\">₸{transaction.receivedAmount}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Сдача:</span>\n                  <span data-testid=\"receipt-change\">₸{transaction.changeAmount}</span>\n                </div>\n              </>\n            )}\n          </div>\n          \n          <div className=\"text-center text-xs text-muted-foreground mb-6\">\n            <p>Спасибо за покупку!</p>\n            <p>Обмен и возврат в течение 14 дней</p>\n          </div>\n        </div>\n        \n        <div className=\"sticky bottom-0 bg-card border-t border-border p-6\">\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={handleEmail}\n              data-testid=\"email-receipt\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Email\n            </Button>\n            <Button\n              className=\"flex-1\"\n              onClick={handlePrint}\n              data-testid=\"print-receipt\"\n            >\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Печать\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5228},"client/src/components/pos/returns-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, RotateCcw } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport type { TransactionWithItems, Return, Transaction } from \"@shared/schema\";\n\ntype ReturnWithTransaction = Return & { originalTransaction: Transaction };\n\nexport default function ReturnsTab() {\n  const [receiptNumber, setReceiptNumber] = useState(\"\");\n  const [foundTransaction, setFoundTransaction] = useState<TransactionWithItems | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: returns = [] } = useQuery<ReturnWithTransaction[]>({\n    queryKey: [\"/api/returns\"],\n  });\n\n  const searchTransactionMutation = useMutation({\n    mutationFn: async (receiptNumber: string) => {\n      const response = await apiRequest(\"GET\", `/api/transactions/receipt/${receiptNumber}`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setFoundTransaction(data);\n      toast({\n        title: \"Найдено\",\n        description: \"Транзакция найдена\",\n      });\n    },\n    onError: () => {\n      setFoundTransaction(null);\n      toast({\n        title: \"Не найдено\",\n        description: \"Транзакция с таким номером чека не найдена\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createReturnMutation = useMutation({\n    mutationFn: async ({ returnData, items }: any) => {\n      const response = await apiRequest(\"POST\", \"/api/returns\", { returnData, items });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/returns\"] });\n      setFoundTransaction(null);\n      setReceiptNumber(\"\");\n      toast({\n        title: \"Успех\",\n        description: \"Возврат оформлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSearch = () => {\n    if (receiptNumber.trim()) {\n      searchTransactionMutation.mutate(receiptNumber.trim());\n    }\n  };\n\n  const handleReturn = () => {\n    if (!foundTransaction) return;\n\n    const userId = useSessionStore.getState().userId;\n    if (!userId) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Требуется вход в систему\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const returnData = {\n      originalTransactionId: foundTransaction.id,\n      userId,\n      reason: \"Customer return\",\n      refundAmount: foundTransaction.total,\n      refundMethod: foundTransaction.paymentMethod,\n    };\n\n    const items = foundTransaction.items.map(item => ({\n      productId: item.productId,\n      quantity: item.quantity,\n      unitPrice: item.unitPrice,\n      totalPrice: item.totalPrice,\n    }));\n\n    createReturnMutation.mutate({ returnData, items });\n  };\n\n  return (\n    <div className=\"flex-1 p-6\" data-testid=\"returns-tab\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-6 text-foreground\">Возвраты и отмены</h1>\n        \n        {/* Search Receipt */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-card-foreground\">Поиск чека для возврата</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-4\">\n              <Input\n                placeholder=\"Номер чека...\"\n                value={receiptNumber}\n                onChange={(e) => setReceiptNumber(e.target.value)}\n                className=\"flex-1\"\n                data-testid=\"receipt-search\"\n              />\n              <Button \n                onClick={handleSearch}\n                disabled={searchTransactionMutation.isPending}\n                data-testid=\"search-receipt\"\n              >\n                <Search className=\"w-4 h-4 mr-2\" />\n                {searchTransactionMutation.isPending ? \"Поиск...\" : \"Найти\"}\n              </Button>\n            </div>\n            \n            {/* Found Transaction */}\n            {foundTransaction && (\n              <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h3 className=\"font-semibold text-card-foreground\">Чек #{foundTransaction.receiptNumber}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(foundTransaction.createdAt).toLocaleString('ru-RU')}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xl font-bold text-card-foreground\">₸{foundTransaction.total}</p>\n                    <Badge variant=\"secondary\">{foundTransaction.paymentMethod === \"cash\" ? \"Наличные\" : \"Карта\"}</Badge>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2 mb-4\">\n                  {foundTransaction.items.map((item) => (\n                    <div key={item.id} className=\"flex justify-between text-sm\">\n                      <span className=\"text-card-foreground\">{item.product.name} × {item.quantity}</span>\n                      <span className=\"text-card-foreground\">₸{item.totalPrice}</span>\n                    </div>\n                  ))}\n                </div>\n                \n                <Button \n                  onClick={handleReturn}\n                  className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n                  disabled={createReturnMutation.isPending}\n                  data-testid=\"process-return\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  {createReturnMutation.isPending ? \"Оформление...\" : \"Оформить возврат\"}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* Recent Returns */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl font-semibold text-card-foreground\">История возвратов</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {returns.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Возвратов пока нет</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {returns.map((returnItem) => (\n                  <div key={returnItem.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`return-${returnItem.id}`}>\n                    <div>\n                      <p className=\"font-medium text-card-foreground\">Чек #{returnItem.originalTransaction.receiptNumber}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(returnItem.createdAt).toLocaleString('ru-RU')}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">{returnItem.reason}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-red-600\">-₸{returnItem.refundAmount}</p>\n                      <Badge variant=\"destructive\">Возврат</Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8026},"client/src/components/pos/sales-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingCart } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { usePOSStore } from \"@/hooks/use-pos-store\";\nimport ProductGrid from \"@/components/pos/product-grid\";\nimport Cart from \"@/components/pos/cart\";\nimport KeyboardShortcutsHelp from \"@/components/pos/keyboard-shortcuts-help\";\nimport { useKeyboardShortcuts, POS_SHORTCUTS } from \"@/hooks/use-keyboard-shortcuts\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function SalesTab() {\n  const [cartOpen, setCartOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const { cart, clearCart, openPaymentModal } = usePOSStore();\n  const { toast } = useToast();\n\n  // Calculate total\n  const total = cart.reduce((sum, item) => sum + parseFloat(item.price) * item.quantity, 0);\n\n  // Keyboard shortcuts\n  const [showHelp, setShowHelp] = useState(false);\n\n  useKeyboardShortcuts([\n    {\n      key: POS_SHORTCUTS.HELP,\n      description: \"Показать справку по горячим клавишам\",\n      action: () => {\n        setShowHelp(true);\n      },\n    },\n    {\n      key: POS_SHORTCUTS.OPEN_PAYMENT,\n      description: \"Инициировать оплату\",\n      action: () => {\n        if (cart.length > 0) {\n          openPaymentModal('cash', total);\n        } else {\n          toast({\n            title: \"Корзина пуста\",\n            description: \"Добавьте товары для оплаты\",\n            variant: \"destructive\",\n          });\n        }\n      },\n      enabled: cart.length > 0,\n    },\n    {\n      key: POS_SHORTCUTS.CLEAR_CART,\n      description: \"Очистить корзину\",\n      action: () => {\n        if (cart.length > 0) {\n          clearCart();\n          toast({\n            title: \"Корзина очищена\",\n            description: \"Все товары удалены из корзины\",\n          });\n        }\n      },\n      enabled: cart.length > 0,\n    },\n    {\n      key: POS_SHORTCUTS.CANCEL,\n      description: \"Отмена/закрыть модальное окно\",\n      action: () => {\n        if (showHelp) {\n          setShowHelp(false);\n        } else if (cartOpen) {\n          setCartOpen(false);\n        }\n      },\n    },\n  ]);\n\n  if (isMobile) {\n    return (\n      <div className=\"flex-1 flex flex-col relative\" data-testid=\"sales-tab\">\n        <div className=\"absolute top-4 right-4 z-30\">\n          <KeyboardShortcutsHelp open={showHelp} onOpenChange={setShowHelp} />\n        </div>\n        <ProductGrid />\n        \n        {/* Mobile Cart Button */}\n        <div className=\"fixed bottom-4 right-4 z-40\">\n          <Sheet open={cartOpen} onOpenChange={setCartOpen}>\n            <SheetTrigger asChild>\n              <Button size=\"lg\" className=\"rounded-full h-14 w-14 shadow-lg relative\" data-testid=\"mobile-cart-trigger\">\n                <ShoppingCart className=\"w-6 h-6\" />\n                {cart.length > 0 && (\n                  <Badge className=\"absolute -top-2 -right-2 h-6 w-6 flex items-center justify-center p-0\">\n                    {cart.length}\n                  </Badge>\n                )}\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-full sm:w-96 p-0\">\n              <Cart />\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex relative\" data-testid=\"sales-tab\">\n      <div className=\"absolute top-4 right-4 z-30\">\n        <KeyboardShortcutsHelp open={showHelp} onOpenChange={setShowHelp} />\n      </div>\n      <ProductGrid />\n      <Cart />\n    </div>\n  );\n}\n","size_bytes":3828},"client/src/components/pos/shift-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Lock, Printer, Plus, Minus, CreditCard, Banknote, RotateCcw, FileSpreadsheet, FileText } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport jsPDF from \"jspdf\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport type { Shift, ShiftSummary, TransactionWithItems } from \"@shared/schema\";\n\nconst openShiftSchema = z.object({\n  userId: z.string().min(1, \"User ID is required\"),\n  startingCash: z.string().min(1, \"Starting cash is required\"),\n});\n\nconst closeShiftSchema = z.object({\n  endingCash: z.string().min(1, \"Ending cash is required\"),\n});\n\nexport default function ShiftTab() {\n  const [isOpenDialogOpen, setIsOpenDialogOpen] = useState(false);\n  const [isCloseDialogOpen, setIsCloseDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get user ID and current shift from session store\n  const currentUserId = useSessionStore((state) => state.userId);\n  const currentShift = useSessionStore((state) => state.currentShift);\n\n  const { isLoading } = useQuery<Shift>({\n    queryKey: [\"/api/shifts/current\", currentUserId],\n  });\n\n  const { data: shiftSummary } = useQuery<ShiftSummary>({\n    queryKey: [\"/api/shifts\", currentShift?.id, \"summary\"],\n    enabled: !!currentShift?.id,\n  });\n\n  const { data: shiftTransactions = [] } = useQuery<TransactionWithItems[]>({\n    queryKey: [\"/api/transactions\"],\n    select: (data: TransactionWithItems[]) => currentShift ? data.filter((t) => t.shiftId === currentShift.id) : [],\n    enabled: !!currentShift,\n  });\n\n  const openShiftMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/shifts\", {\n        userId: data.userId,\n        startingCash: data.startingCash,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shifts/current\", currentUserId] });\n      setIsOpenDialogOpen(false);\n      toast({\n        title: \"Успех\",\n        description: \"Смена открыта\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const closeShiftMutation = useMutation({\n    mutationFn: async (data: { endingCash: string }) => {\n      if (!currentShift) throw new Error(\"No active shift\");\n      const response = await apiRequest(\"PUT\", `/api/shifts/${currentShift.id}/close`, {\n        endingCash: parseFloat(data.endingCash),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shifts/current\", currentUserId] });\n      setIsCloseDialogOpen(false);\n      toast({\n        title: \"Успех\",\n        description: \"Смена закрыта\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const openForm = useForm({\n    resolver: zodResolver(openShiftSchema),\n    defaultValues: {\n      userId: currentUserId,\n      startingCash: \"2000\",\n    },\n  });\n\n  const closeForm = useForm({\n    resolver: zodResolver(closeShiftSchema),\n    defaultValues: {\n      endingCash: \"\",\n    },\n  });\n\n  const onOpenSubmit = (data: any) => {\n    openShiftMutation.mutate(data);\n  };\n\n  const onCloseSubmit = (data: any) => {\n    closeShiftMutation.mutate(data);\n  };\n\n  const handleExportExcel = async () => {\n    if (!currentShift) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Нет активной смены\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/shifts/${currentShift.id}/export/excel`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to export');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `shift_report_${new Date(currentShift.startTime).toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Успех\",\n        description: \"Отчет экспортирован в Excel\",\n      });\n    } catch (error) {\n      console.error(\"Error exporting to Excel:\", error);\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось экспортировать отчет\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportCSV = async () => {\n    if (!currentShift) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Нет активной смены\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/shifts/${currentShift.id}/export/csv`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to export');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `shift_report_${new Date(currentShift.startTime).toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Успех\",\n        description: \"Отчет экспортирован в CSV\",\n      });\n    } catch (error) {\n      console.error(\"Error exporting to CSV:\", error);\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось экспортировать отчет\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePrintReport = () => {\n    if (!currentShift || !shiftSummary) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Нет данных для печати отчета\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const doc = new jsPDF();\n      const pageWidth = doc.internal.pageSize.getWidth();\n      let yPos = 20;\n\n      doc.setFontSize(18);\n      doc.text(\"ОТЧЕТ О СМЕНЕ\", pageWidth / 2, yPos, { align: \"center\" });\n      yPos += 15;\n\n      doc.setFontSize(10);\n\n      const startTime = new Date(currentShift.startTime).toLocaleString(\"ru-RU\");\n      const endTime = currentShift.endTime \n        ? new Date(currentShift.endTime).toLocaleString(\"ru-RU\")\n        : \"Смена открыта\";\n\n      doc.text(`Дата начала: ${startTime}`, 20, yPos);\n      yPos += 7;\n      doc.text(`Дата окончания: ${endTime}`, 20, yPos);\n      yPos += 7;\n      doc.text(`Статус: ${currentShift.status === \"open\" ? \"Открыта\" : \"Закрыта\"}`, 20, yPos);\n      yPos += 15;\n\n      doc.setFontSize(14);\n      doc.text(\"ФИНАНСОВАЯ ИНФОРМАЦИЯ\", 20, yPos);\n      yPos += 10;\n\n      doc.setFontSize(10);\n      doc.text(`Касса на начало: ₸${parseFloat(currentShift.startingCash).toFixed(2)}`, 20, yPos);\n      yPos += 7;\n      \n      if (currentShift.endingCash) {\n        doc.text(`Касса на конец: ₸${parseFloat(currentShift.endingCash).toFixed(2)}`, 20, yPos);\n        yPos += 7;\n      }\n\n      doc.text(`Всего продаж: ₸${shiftSummary.totalSales}`, 20, yPos);\n      yPos += 7;\n      doc.text(`Количество транзакций: ${shiftSummary.totalTransactions}`, 20, yPos);\n      yPos += 7;\n      doc.text(`Продажи наличными: ₸${shiftSummary.cashSales}`, 20, yPos);\n      yPos += 7;\n      doc.text(`Продажи картой: ₸${shiftSummary.cardSales}`, 20, yPos);\n      yPos += 15;\n\n      if (currentShift.endingCash) {\n        const expected = parseFloat(currentShift.startingCash) + parseFloat(shiftSummary.cashSales);\n        const actual = parseFloat(currentShift.endingCash);\n        const difference = actual - expected;\n\n        doc.text(`Ожидаемая касса: ₸${expected.toFixed(2)}`, 20, yPos);\n        yPos += 7;\n        doc.text(`Фактическая касса: ₸${actual.toFixed(2)}`, 20, yPos);\n        yPos += 7;\n        \n        doc.setTextColor(difference >= 0 ? 0 : 255, difference >= 0 ? 128 : 0, 0);\n        doc.text(`Разница: ₸${difference.toFixed(2)}`, 20, yPos);\n        doc.setTextColor(0, 0, 0);\n        yPos += 15;\n      }\n\n      if (shiftTransactions.length > 0) {\n        doc.setFontSize(14);\n        doc.text(\"ТРАНЗАКЦИИ\", 20, yPos);\n        yPos += 10;\n\n        doc.setFontSize(9);\n\n        shiftTransactions.forEach((transaction, index) => {\n          if (yPos > 270) {\n            doc.addPage();\n            yPos = 20;\n          }\n\n          const time = new Date(transaction.createdAt).toLocaleTimeString(\"ru-RU\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          });\n          const amount = transaction.status === \"refunded\" \n            ? `-₸${transaction.total}` \n            : `₸${transaction.total}`;\n          const method = transaction.paymentMethod === \"cash\" ? \"Наличные\" : \"Карта\";\n          const status = transaction.status === \"refunded\" ? \"Возврат\" : \"Продажа\";\n\n          doc.text(`${index + 1}. ${time} - ${status} - ${method} - ${amount}`, 20, yPos);\n          yPos += 6;\n        });\n      }\n\n      doc.setFontSize(8);\n      doc.setTextColor(128, 128, 128);\n      doc.text(\n        `Отчет сформирован: ${new Date().toLocaleString(\"ru-RU\")}`,\n        pageWidth / 2,\n        doc.internal.pageSize.getHeight() - 10,\n        { align: \"center\" }\n      );\n\n      const fileName = `shift_report_${new Date(currentShift.startTime).toISOString().split(\"T\")[0]}.pdf`;\n      doc.save(fileName);\n\n      toast({\n        title: \"Успех\",\n        description: \"Отчет о смене загружен\",\n      });\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось создать отчет\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6\" data-testid=\"shift-tab\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Управление сменой</h1>\n          <div className=\"flex gap-3\">\n            {currentShift && (\n              <>\n                <Button onClick={handlePrintReport} data-testid=\"print-shift-report\">\n                  <Printer className=\"w-4 h-4 mr-2\" />\n                  PDF\n                </Button>\n                <Button onClick={handleExportExcel} variant=\"outline\" data-testid=\"export-excel\">\n                  <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                  Excel\n                </Button>\n                <Button onClick={handleExportCSV} variant=\"outline\" data-testid=\"export-csv\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  CSV\n                </Button>\n              </>\n            )}\n            \n            {currentShift ? (\n              <Dialog open={isCloseDialogOpen} onOpenChange={setIsCloseDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"destructive\" data-testid=\"close-shift-button\">\n                    <Lock className=\"w-4 h-4 mr-2\" />\n                    Закрыть смену\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Закрыть смену</DialogTitle>\n                  </DialogHeader>\n                  <Form {...closeForm}>\n                    <form onSubmit={closeForm.handleSubmit(onCloseSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={closeForm.control}\n                        name=\"endingCash\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Остаток наличных в кассе</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\" \n                                placeholder=\"0.00\"\n                                {...field} \n                                data-testid=\"input-ending-cash\" \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        variant=\"destructive\"\n                        disabled={closeShiftMutation.isPending}\n                        data-testid=\"confirm-close-shift\"\n                      >\n                        {closeShiftMutation.isPending ? \"Закрытие...\" : \"Закрыть смену\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            ) : (\n              <Dialog open={isOpenDialogOpen} onOpenChange={setIsOpenDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"open-shift-button\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Открыть смену\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Открыть новую смену</DialogTitle>\n                  </DialogHeader>\n                  <Form {...openForm}>\n                    <form onSubmit={openForm.handleSubmit(onOpenSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={openForm.control}\n                        name=\"startingCash\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Начальная сумма в кассе</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\" \n                                {...field} \n                                data-testid=\"input-starting-cash\" \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        disabled={openShiftMutation.isPending}\n                        data-testid=\"confirm-open-shift\"\n                      >\n                        {openShiftMutation.isPending ? \"Открытие...\" : \"Открыть смену\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </div>\n        \n        {!currentShift ? (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-12\">\n                <Lock className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h2 className=\"text-xl font-semibold text-card-foreground mb-2\">Смена не открыта</h2>\n                <p className=\"text-muted-foreground mb-6\">\n                  Для начала работы необходимо открыть смену\n                </p>\n                <Button onClick={() => setIsOpenDialogOpen(true)} data-testid=\"open-shift-cta\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Открыть смену\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            {/* Shift Status */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <Card className=\"stat-card\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Статус смены</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className=\"bg-green-100 text-green-800\" data-testid=\"shift-status\">\n                      {currentShift.status === \"open\" ? \"Открыта\" : \"Закрыта\"}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"shift-start-time\">\n                    Открыта в {new Date(currentShift.startTime).toLocaleTimeString('ru-RU', { \n                      hour: '2-digit', \n                      minute: '2-digit' \n                    })}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"stat-card\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Касса на начало</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-xl font-bold text-card-foreground\" data-testid=\"starting-cash\">\n                    ₸{parseFloat(currentShift.startingCash).toFixed(2)}\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"stat-card\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Текущие продажи</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-xl font-bold text-primary\" data-testid=\"current-sales\">\n                    ₸{shiftSummary?.totalSales || \"0.00\"}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {shiftSummary?.totalTransactions || 0} транзакций\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Transactions Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-xl font-semibold text-card-foreground\">Транзакции смены</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {shiftTransactions.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">Транзакций пока нет</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {shiftTransactions.map((transaction) => (\n                      <div key={transaction.id} className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\" data-testid={`transaction-${transaction.id}`}>\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                            transaction.status === \"refunded\" \n                              ? \"bg-red-100 text-red-600\" \n                              : transaction.paymentMethod === \"cash\"\n                              ? \"bg-green-100 text-green-600\"\n                              : \"bg-blue-100 text-blue-600\"\n                          }`}>\n                            {transaction.status === \"refunded\" ? (\n                              <RotateCcw className=\"w-4 h-4\" />\n                            ) : transaction.paymentMethod === \"cash\" ? (\n                              <Banknote className=\"w-4 h-4\" />\n                            ) : (\n                              <CreditCard className=\"w-4 h-4\" />\n                            )}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-card-foreground\">\n                              {transaction.status === \"refunded\" ? \"Возврат\" : \"Продажа\"}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(transaction.createdAt).toLocaleTimeString('ru-RU', { \n                                hour: '2-digit', \n                                minute: '2-digit' \n                              })}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className={`font-semibold ${\n                            transaction.status === \"refunded\" ? \"text-red-600\" : \"text-card-foreground\"\n                          }`}>\n                            {transaction.status === \"refunded\" ? \"-\" : \"\"}₸{transaction.total}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {transaction.paymentMethod === \"cash\" ? \"Наличные\" : \"Карта\"}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":22694},"client/src/components/pos/sidebar.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport LanguageSwitcher from \"@/components/LanguageSwitcher\";\nimport { ThemeToggleSimple } from \"@/components/theme-toggle\";\nimport FiscalStatus from \"@/components/pos/fiscal-status\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  ShoppingCart, \n  Package, \n  BarChart3, \n  Users, \n  RotateCcw, \n  Clock,\n  ScanBarcode,\n  Wifi,\n  User,\n  Settings,\n  LogOut,\n  UserCog\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\n\nexport default function Sidebar({ activeTab, onTabChange }: SidebarProps) {\n  const { t } = useLanguage();\n  const currentShift = useSessionStore((state) => state.currentShift);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: session } = useQuery<{ user?: { id: string; username: string; role: string } }>({\n    queryKey: [\"/api/auth/session\"],\n  });\n\n  const isAdmin = session?.user?.role === 'admin';\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      \n      // Clear all queries and session store\n      queryClient.clear();\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/session\"] });\n      useSessionStore.setState({ userId: '', currentShift: null });\n      \n      toast({\n        title: \"Выход выполнен\",\n        description: \"Вы успешно вышли из системы\",\n      });\n      setLocation(\"/login\");\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось выйти из системы\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  // Define all tabs with role restrictions\n  const allTabs = [\n    { id: \"sales\", label: t.sidebar.sales, icon: ShoppingCart, roles: ['admin', 'cashier'] },\n    { id: \"shift\", label: t.sidebar.shift, icon: Clock, roles: ['admin', 'cashier'] },\n    { id: \"inventory\", label: t.sidebar.inventory, icon: Package, roles: ['admin', 'cashier'] },\n    { id: \"acceptance\", label: \"Приемка\", icon: Package, roles: ['admin'] },\n    { id: \"audit\", label: \"Инвентаризация\", icon: Package, roles: ['admin'] },\n    { id: \"writeoffs\", label: \"Списания\", icon: Package, roles: ['admin'] },\n    { id: \"loyalty\", label: \"Лояльность\", icon: User, roles: ['admin', 'cashier'] },\n    { id: \"promotions\", label: \"Акции\", icon: Package, roles: ['admin'] },\n    { id: \"hardware\", label: \"Оборудование\", icon: Settings, roles: ['admin'] },\n    { id: \"reports\", label: \"Отчеты\", icon: BarChart3, roles: ['admin'] },\n    { id: \"monitoring\", label: \"Мониторинг\", icon: BarChart3, roles: ['admin'] },\n    { id: \"analytics\", label: t.sidebar.analytics, icon: BarChart3, roles: ['admin'] },\n    { id: \"customers\", label: t.sidebar.customers, icon: Users, roles: ['admin', 'cashier'] },\n    { id: \"returns\", label: t.sidebar.returns, icon: RotateCcw, roles: ['admin', 'cashier'] },\n    { id: \"users\", label: \"Пользователи\", icon: UserCog, roles: ['admin'] },\n  ];\n\n  // Filter tabs based on user role\n  const userRole = session?.user?.role || 'cashier';\n  const tabs = allTabs.filter(tab => tab.roles.includes(userRole));\n  return (\n    <div className=\"w-64 bg-sidebar border-r border-sidebar-border flex flex-col\" data-testid=\"sidebar\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-sidebar-primary rounded-lg flex items-center justify-center\">\n            <ScanBarcode className=\"text-sidebar-primary-foreground text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"font-bold text-lg text-sidebar-foreground\">{t.sidebar.posSystem}</h1>\n            <p className=\"text-xs text-muted-foreground\">{t.sidebar.register}</p>\n          </div>\n        </div>\n        \n        {/* Status */}\n        <div className=\"flex items-center gap-2\">\n          {currentShift ? (\n            <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n              <Wifi className=\"w-3 h-3 mr-1\" />\n              {t.sidebar.shiftOpen}\n            </Badge>\n          ) : (\n            <Badge variant=\"destructive\" className=\"bg-red-100 text-red-800\">\n              <Wifi className=\"w-3 h-3 mr-1\" />\n              Смена закрыта\n            </Badge>\n          )}\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4\" data-testid=\"navigation\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={cn(\n                \"sidebar-btn\",\n                activeTab === tab.id && \"active\"\n              )}\n              data-testid={`tab-${tab.id}`}\n            >\n              <Icon className=\"w-5 h-5\" />\n              {tab.label}\n            </button>\n          );\n        })}\n      </nav>\n      \n      {/* Fiscal Status */}\n      <div className=\"p-4 border-t border-sidebar-border\">\n        <FiscalStatus />\n      </div>\n      \n      {/* Settings */}\n      <div className=\"p-4 border-t border-sidebar-border\">\n        <div className=\"flex items-center justify-between gap-2\">\n          <LanguageSwitcher />\n          <ThemeToggleSimple />\n        </div>\n      </div>\n      \n      {/* User Info */}\n      <div className=\"p-4 border-t border-sidebar-border\">\n        <div className=\"flex items-center gap-3 mb-3\">\n          <div className=\"w-8 h-8 bg-sidebar-primary rounded-full flex items-center justify-center\">\n            <User className=\"text-sidebar-primary-foreground text-sm\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-sidebar-foreground\">\n              {session?.user?.username || \"Пользователь\"}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {isAdmin ? \"Администратор\" : t.common.cashier}\n            </p>\n          </div>\n        </div>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"w-full\" \n          onClick={handleLogout}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Выход\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6810},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Point of Sale (POS) System\n\n## Overview\nThis is a comprehensive Point of Sale system designed for retail operations. It features a modern interface for managing sales, inventory, customer relationships, returns, and analytics. The system aims to provide a robust and user-friendly solution for businesses to streamline their retail processes.\n\n## Recent Changes (October 2025)\n- **Security & Logging Enhancements** (Oct 6): \n  - Added SESSION_SECRET environment variable for secure session management\n  - Implemented CORS configuration with origin whitelisting for production\n  - Integrated Winston for structured logging with JSON formatting and sanitization\n  - Updated dependency security analysis (xlsx and esbuild vulnerabilities noted for monitoring)\n- **Product Expiration Tracking** (Oct 4): Added expiration date field to products with automatic notifications for expiring and expired items\n- **Expiration Alerts** (Oct 4): Implemented visual alerts that display products expiring within 7 days and already expired products\n- **Enhanced Product Forms** (Oct 4): Updated product creation/editing forms to support optional expiration dates\n- **API Rate Limiting** (Oct 5): Implemented comprehensive rate limiting for sensitive operations:\n  - Login attempts: 5 per 15 minutes\n  - User management: 20 operations per 15 minutes\n  - Product modifications: 50 operations per 5 minutes\n  - Transactions: 30 per minute\n  - Returns processing: 20 per 5 minutes\n- **Database Performance Optimization** (Oct 5): Added strategic indexes on frequently queried fields:\n  - Products: categoryId, expirationDate, isActive, sku\n  - Customers: phone, email\n  - Shifts: userId, status, startTime\n  - Transactions: shiftId, customerId, userId, createdAt, receiptNumber, status\n  - Transaction/Return items: Foreign key relationships\n- **Shift Report Printing** (Oct 5): Implemented PDF generation for shift reports using jsPDF library with comprehensive financial summaries\n- **Accessibility Improvements** (Oct 5): Added ARIA labels and attributes to login page and key interactive elements\n- **Excel/CSV Export** (Oct 5): Added Excel and CSV export functionality for shift reports using xlsx library\n- **Keyboard Shortcuts System** (Oct 5): Implemented comprehensive keyboard shortcuts for faster cashier operations:\n  - F1: Show keyboard shortcuts help dialog\n  - F5: Initiate payment\n  - F6: Clear cart\n  - Escape: Cancel/close modal windows\n  - Additional shortcuts for barcode scanner, customer management, quantity adjustments, and shift operations\n- **Low Stock Alerts** (Oct 5): Created automated alert component that monitors inventory levels and displays warnings for items below configurable threshold (default: 5 units)\n\n## User Preferences\n- Full-stack TypeScript development preferred\n- Modern React patterns with hooks and functional components\n- Comprehensive type safety with Zod schemas\n- Clean, maintainable code structure\n\n## System Architecture\n\n### UI/UX Decisions\n- Built with shadcn/ui components and Radix UI primitives for a modern and accessible interface.\n- Utilizes TailwindCSS for styling and custom animations, ensuring a responsive design across mobile, tablet, and desktop devices.\n- Implements Sheet/Drawer navigation for mobile and adaptive product grids to optimize user experience on various screen sizes.\n- Supports multi-language interfaces, including Russian.\n\n### Technical Implementations\n- **Frontend**: Developed with React 18 and TypeScript using Vite.\n    - State Management: Zustand for client-side POS store, TanStack Query for server state synchronization.\n    - Routing: Wouter for efficient client-side navigation.\n- **Backend**: Built on Express.js with TypeScript.\n    - Database Interaction: PostgreSQL managed with Drizzle ORM.\n    - Authentication: Passport.js with LocalStrategy and express-session, using bcrypt for password hashing and `connect-pg-simple` for PostgreSQL-backed sessions.\n    - API: RESTful architecture with all endpoints protected by `requireAuth` middleware and validated by Zod schemas.\n    - Data Integrity: Critical operations are wrapped in database transactions to ensure atomicity and consistency.\n    - Logging: Winston for structured JSON logging with error context and sensitive data sanitization.\n    - Security: CORS configuration with origin whitelisting, SESSION_SECRET for production.\n\n### Feature Specifications\n- **Sales Management**: Full transaction processing, including receipt generation and support for barcode scanning.\n- **Inventory Management**: Comprehensive product catalog, stock tracking, category management, and expiration date tracking with automatic alerts.\n- **Customer Management**: Profiles with loyalty point systems.\n- **Returns & Refunds**: Streamlined processing for product returns with rate limiting protection.\n- **Shift Management**: Tools for managing user shifts, cash reconciliation, PDF report generation, and summary reports.\n- **Analytics**: Provides sales reporting and performance metrics.\n- **Product Expiration Notifications**: Real-time alerts for products that are expired or expiring within 7 days, with automatic categorization and visual indicators.\n- **User Management & Role-Based Access Control**:\n    - **Admin Role**: Full system access, including user management (create, edit, delete), reports, monitoring, hardware configuration, inventory management, and promotions.\n    - **Cashier Role**: Limited to operational functions like sales, shift management, basic inventory viewing, customer management, returns processing, and loyalty programs.\n- **Security & Performance**:\n    - Rate limiting on all sensitive API endpoints (login, user management, product modifications, transactions, returns)\n    - Database indexes for optimized query performance\n    - Comprehensive error logging with sensitive data sanitization\n    - Session-based authentication with secure password hashing\n- **Accessibility**: ARIA labels and attributes for screen reader support\n- **Hardware Integration**: Includes support for barcode scanners and receipt printers.\n- **Offline Mode**: Designed with capabilities for offline transaction processing.\n\n### System Design Choices\n- The system employs a clear separation of concerns with distinct frontend and backend applications.\n- Utilizes a PostgreSQL database with a defined schema for users, categories, products, customers, shifts, transactions, and returns, ensuring robust data relationships.\n- Prioritizes security through session-based authentication, bcrypt for password hashing, comprehensive input validation, and transactional database operations.\n- Optimized for Replit deployment with specific configurations for webview, database connections, and build/start commands.\n\n## External Dependencies\n- **Database**: PostgreSQL\n- **Frontend Libraries**: React, Vite, shadcn/ui, Radix UI, TailwindCSS, Zustand, TanStack Query, Wouter.\n- **Backend Libraries**: Express.js, Drizzle ORM, Passport.js, bcrypt, express-session, connect-pg-simple, Zod, express-rate-limit, cors, winston.\n- **PDF Generation**: jsPDF for shift report printing.\n- **Email Integration**: Resend integration available but not configured (user declined setup). For email functionality, manual setup with SMTP credentials required.\n\n## Replit Setup (October 4, 2025 - Fresh Import)\n- **Project Import**: Imported from GitHub and configured for Replit environment\n- **Database**: PostgreSQL database provisioned and configured with environment variables\n- **Workflow**: \"Start application\" workflow configured to run `npm run dev` on port 5000 with webview output\n- **Database Schema**: Successfully pushed to database using `npm run db:push`\n- **Seed Data**: Initial data seeded including:\n  - Admin user (username: `admin`, password: `admin123`)\n  - Cashier user (username: `cashier`, password: `password`)\n  - Sample categories (Напитки/Beverages, Выпечка/Pastry, Закуски/Snacks)\n  - Sample products (Эспрессо, Круассан, Сок апельсиновый, Сэндвич с курицей, Мороженое ванильное, Вода минеральная)\n- **Dev Server**: Running on port 5000 with Vite HMR enabled\n- **Host Configuration**: Frontend server configured with `allowedHosts: true` in Vite setup to work with Replit's proxy\n- **Deployment**: Configured for autoscale deployment with build and start commands\n\n## Development Commands\n- `npm run dev` - Start development server (frontend + backend on port 5000)\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run db:push` - Push database schema changes to PostgreSQL\n- `npx tsx server/seed.ts` - Seed database with initial data","size_bytes":8718},"client/src/components/LanguageSwitcher.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { Globe } from \"lucide-react\";\n\nexport default function LanguageSwitcher() {\n  const { language, setLanguage } = useLanguage();\n\n  const languages = [\n    { value: 'ru', label: 'Русский', flag: '🇷🇺' },\n    { value: 'kk', label: 'Қазақша', flag: '🇰🇿' },\n    { value: 'en', label: 'English', flag: '🇬🇧' },\n  ];\n\n  const currentLanguage = languages.find(lang => lang.value === language);\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Globe className=\"w-4 h-4 text-muted-foreground\" />\n      <Select value={language} onValueChange={(value) => setLanguage(value as 'ru' | 'kk' | 'en')}>\n        <SelectTrigger className=\"w-32 h-8 text-sm\">\n          <SelectValue>\n            <span className=\"flex items-center gap-2\">\n              <span>{currentLanguage?.flag}</span>\n              <span className=\"hidden sm:inline\">{currentLanguage?.label}</span>\n            </span>\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent>\n          {languages.map((lang) => (\n            <SelectItem key={lang.value} value={lang.value}>\n              <span className=\"flex items-center gap-2\">\n                <span>{lang.flag}</span>\n                <span>{lang.label}</span>\n              </span>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}","size_bytes":1514},"client/src/i18n/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { translations, type Translation } from './translations';\n\ntype Language = 'ru' | 'kk' | 'en';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: Translation;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>(() => {\n    // Check localStorage first, then browser language, default to Russian for Kazakhstan\n    const saved = localStorage.getItem('language') as Language;\n    if (saved && ['ru', 'kk', 'en'].includes(saved)) {\n      return saved;\n    }\n    \n    // Detect browser language and default to appropriate language for Kazakhstan\n    const browserLang = navigator.language.toLowerCase();\n    if (browserLang.includes('kk') || browserLang.includes('kaz')) {\n      return 'kk';\n    } else if (browserLang.includes('en')) {\n      return 'en';\n    }\n    return 'ru'; // Default to Russian for Kazakhstan market\n  });\n\n  useEffect(() => {\n    localStorage.setItem('language', language);\n  }, [language]);\n\n  const contextValue: LanguageContextType = {\n    language,\n    setLanguage,\n    t: translations[language],\n  };\n\n  return (\n    <LanguageContext.Provider value={contextValue}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":1656},"client/src/i18n/translations.ts":{"content":"export interface Translation {\n  // Navigation\n  sidebar: {\n    posSystem: string;\n    register: string;\n    offline: string;\n    shiftOpen: string;\n    sales: string;\n    inventory: string;\n    analytics: string;\n    customers: string;\n    returns: string;\n    shift: string;\n  };\n  \n  // Analytics\n  analytics: {\n    title: string;\n    revenue: string;\n    transactions: string;\n    averageCheck: string;\n    offlineOperations: string;\n    hourlyRevenue: string;\n    topProducts: string;\n    today: string;\n    yesterday: string;\n    thisWeek: string;\n    thisMonth: string;\n    fromYesterday: string;\n    waitingSync: string;\n  };\n  \n  // Inventory\n  inventory: {\n    management: string;\n    addProduct: string;\n    product: string;\n    sku: string;\n    price: string;\n    stock: string;\n    status: string;\n    actions: string;\n    inStock: string;\n    lowStock: string;\n    outOfStock: string;\n  };\n  \n  // Customers\n  customers: {\n    customer: string;\n    phone: string;\n    email: string;\n    bonuses: string;\n    registrationDate: string;\n    addCustomer: string;\n    name: string;\n    searchCustomers: string;\n  };\n  \n  // Payment\n  payment: {\n    cash: string;\n    card: string;\n    cashPayment: string;\n    cardPayment: string;\n    toPay: string;\n    received: string;\n    change: string;\n    cancel: string;\n    complete: string;\n  };\n  \n  // Receipt\n  receipt: {\n    storeName: string;\n    address: string;\n    phone: string;\n    date: string;\n    cashier: string;\n    register: string;\n    subtotal: string;\n    tax: string;\n    total: string;\n    received: string;\n    change: string;\n    thankYou: string;\n    returnPolicy: string;\n    email: string;\n    print: string;\n  };\n  \n  // Common\n  common: {\n    currency: string;\n    search: string;\n    add: string;\n    edit: string;\n    delete: string;\n    save: string;\n    cancel: string;\n    close: string;\n    pieces: string;\n    noData: string;\n    success: string;\n    error: string;\n    cashier: string;\n    chartPlaceholder: string;\n  };\n  \n  // Fiscal (Kazakhstan specific)\n  fiscal: {\n    fiscalMode: string;\n    ofdConnected: string;\n    ofdDisconnected: string;\n    fiscalReceipt: string;\n    taxNumber: string;\n    fiscalSign: string;\n    fiscalPrinter: string;\n    ready: string;\n    queued: string;\n    receipts: string;\n    lastSync: string;\n    fiscalInfo: string;\n    ofdOperator: string;\n    checkReceipt: string;\n  };\n}\n\nexport const translations: Record<string, Translation> = {\n  ru: {\n    sidebar: {\n      posSystem: \"POS Система\",\n      register: \"Касса #001\",\n      offline: \"Офлайн\",\n      shiftOpen: \"Смена открыта\",\n      sales: \"Продажи\",\n      inventory: \"Товары\",\n      analytics: \"Аналитика\",\n      customers: \"Клиенты\",\n      returns: \"Возвраты\",\n      shift: \"Смена\",\n    },\n    analytics: {\n      title: \"Аналитика\",\n      revenue: \"Выручка\",\n      transactions: \"Транзакции\",\n      averageCheck: \"Средний чек\",\n      offlineOperations: \"Офлайн операций\",\n      hourlyRevenue: \"Выручка по часам\",\n      topProducts: \"Топ товары\",\n      today: \"Сегодня\",\n      yesterday: \"Вчера\",\n      thisWeek: \"На этой неделе\",\n      thisMonth: \"В этом месяце\",\n      fromYesterday: \"от вчера\",\n      waitingSync: \"Ожидают синхронизации\",\n    },\n    inventory: {\n      management: \"Управление товарами\",\n      addProduct: \"Добавить новый товар\",\n      product: \"Товар\",\n      sku: \"SKU\",\n      price: \"Цена\",\n      stock: \"Остаток\",\n      status: \"Статус\",\n      actions: \"Действия\",\n      inStock: \"В наличии\",\n      lowStock: \"Мало\",\n      outOfStock: \"Нет в наличии\",\n    },\n    customers: {\n      customer: \"Клиент\",\n      phone: \"Телефон\",\n      email: \"Email\",\n      bonuses: \"Бонусы\",\n      registrationDate: \"Дата регистрации\",\n      addCustomer: \"Добавить нового клиента\",\n      name: \"Имя\",\n      searchCustomers: \"Поиск клиентов...\",\n    },\n    payment: {\n      cash: \"наличными\",\n      card: \"картой\",\n      cashPayment: \"Оплата наличными\",\n      cardPayment: \"Оплата картой\",\n      toPay: \"К оплате:\",\n      received: \"Получено:\",\n      change: \"Сдача:\",\n      cancel: \"Отмена\",\n      complete: \"Завершить\",\n    },\n    receipt: {\n      storeName: 'Кафе \"Уютное место\"',\n      address: \"ул. Пушкина, д. 10\",\n      phone: \"+7 (495) 123-45-67\",\n      date: \"Дата:\",\n      cashier: \"Кассир:\",\n      register: \"Касса:\",\n      subtotal: \"Подытог:\",\n      tax: \"Налог (12%):\",\n      total: \"Итого:\",\n      received: \"Получено:\",\n      change: \"Сдача:\",\n      thankYou: \"Спасибо за покупку!\",\n      returnPolicy: \"Обмен и возврат в течение 14 дней\",\n      email: \"Email\",\n      print: \"Печать\",\n    },\n    common: {\n      currency: \"₸\",\n      search: \"Поиск\",\n      add: \"Добавить\",\n      edit: \"Редактировать\",\n      delete: \"Удалить\",\n      save: \"Сохранить\",\n      cancel: \"Отмена\",\n      close: \"Закрыть\",\n      pieces: \"шт\",\n      noData: \"Нет данных о продажах\",\n      success: \"Успех\",\n      error: \"Ошибка\",\n      cashier: \"Кассир\",\n      chartPlaceholder: \"График выручки по часам\",\n    },\n    fiscal: {\n      fiscalMode: \"Фискальный режим\",\n      ofdConnected: \"ОФД подключен\",\n      ofdDisconnected: \"ОФД отключен\",\n      fiscalReceipt: \"Фискальный чек\",\n      taxNumber: \"ИИН/БИН:\",\n      fiscalSign: \"Фискальный признак:\",\n      fiscalPrinter: \"Фискальный принтер\",\n      ready: \"Готов\",\n      queued: \"В очереди\",\n      receipts: \"чеков\",\n      lastSync: \"Последняя синхронизация:\",\n      fiscalInfo: \"Фискальная информация\",\n      ofdOperator: \"ОФД:\",\n      checkReceipt: \"Проверить чек: check.kz\",\n    },\n  },\n  \n  kk: {\n    sidebar: {\n      posSystem: \"Сату Жүйесі\",\n      register: \"Касса #001\",\n      offline: \"Дербес\",\n      shiftOpen: \"Смена ашық\",\n      sales: \"Сату\",\n      inventory: \"Тауарлар\",\n      analytics: \"Аналитика\",\n      customers: \"Клиенттер\",\n      returns: \"Қайтару\",\n      shift: \"Смена\",\n    },\n    analytics: {\n      title: \"Аналитика\",\n      revenue: \"Кіріс\",\n      transactions: \"Транзакциялар\",\n      averageCheck: \"Орташа чек\",\n      offlineOperations: \"Дербес операциялар\",\n      hourlyRevenue: \"Сағаттық кіріс\",\n      topProducts: \"Үздік тауарлар\",\n      today: \"Бүгін\",\n      yesterday: \"Кеше\",\n      thisWeek: \"Осы аптада\",\n      thisMonth: \"Осы айда\",\n      fromYesterday: \"кешеден бері\",\n      waitingSync: \"Синхронизацияны күтуде\",\n    },\n    inventory: {\n      management: \"Тауарларды басқару\",\n      addProduct: \"Жаңа тауар қосу\",\n      product: \"Тауар\",\n      sku: \"SKU\",\n      price: \"Баға\",\n      stock: \"Қалдық\",\n      status: \"Мәртебе\",\n      actions: \"Әрекеттер\",\n      inStock: \"Қоймада бар\",\n      lowStock: \"Аз\",\n      outOfStock: \"Қоймада жоқ\",\n    },\n    customers: {\n      customer: \"Клиент\",\n      phone: \"Телефон\",\n      email: \"Email\",\n      bonuses: \"Бонустар\",\n      registrationDate: \"Тіркелген күні\",\n      addCustomer: \"Жаңа клиент қосу\",\n      name: \"Аты\",\n      searchCustomers: \"Клиенттерді іздеу...\",\n    },\n    payment: {\n      cash: \"қолма-қол ақшамен\",\n      card: \"картамен\",\n      cashPayment: \"Қолма-қол төлем\",\n      cardPayment: \"Карта арқылы төлем\",\n      toPay: \"Төлеуге:\",\n      received: \"Алынды:\",\n      change: \"Қайтым:\",\n      cancel: \"Болдырмау\",\n      complete: \"Аяқтау\",\n    },\n    receipt: {\n      storeName: '\"Жайлы орын\" кафесі',\n      address: \"Пушкин көшесі, 10 үй\",\n      phone: \"+7 (727) 123-45-67\",\n      date: \"Күні:\",\n      cashier: \"Кассир:\",\n      register: \"Касса:\",\n      subtotal: \"Аралық сома:\",\n      tax: \"Салық (12%):\",\n      total: \"Барлығы:\",\n      received: \"Алынды:\",\n      change: \"Қайтым:\",\n      thankYou: \"Сатып алғаныңыз үшін рахмет!\",\n      returnPolicy: \"14 күн ішінде алмасу және қайтару\",\n      email: \"Email\",\n      print: \"Басып шығару\",\n    },\n    common: {\n      currency: \"₸\",\n      search: \"Іздеу\",\n      add: \"Қосу\",\n      edit: \"Өңдеу\",\n      delete: \"Жою\",\n      save: \"Сақтау\",\n      cancel: \"Болдырмау\",\n      close: \"Жабу\",\n      pieces: \"дана\",\n      noData: \"Сату деректері жоқ\",\n      success: \"Сәтті орындалды\",\n      error: \"Қате\",\n      cashier: \"Кассир\",\n      chartPlaceholder: \"Сағаттық кіріс графигі\",\n    },\n    fiscal: {\n      fiscalMode: \"Фискалды режим\",\n      ofdConnected: \"ФДО қосылған\",\n      ofdDisconnected: \"ФДО ажыратылған\",\n      fiscalReceipt: \"Фискалды чек\",\n      taxNumber: \"ЖСН/БСН:\",\n      fiscalSign: \"Фискалды белгі:\",\n      fiscalPrinter: \"Фискалды принтер\",\n      ready: \"Дайын\",\n      queued: \"Кезекте\",\n      receipts: \"чектер\",\n      lastSync: \"Соңғы синхронизация:\",\n      fiscalInfo: \"Фискалды ақпарат\",\n      ofdOperator: \"ФДО:\",\n      checkReceipt: \"Чекті тексеру: check.kz\",\n    },\n  },\n  \n  en: {\n    sidebar: {\n      posSystem: \"POS System\",\n      register: \"Register #001\",\n      offline: \"Offline\",\n      shiftOpen: \"Shift Open\",\n      sales: \"Sales\",\n      inventory: \"Inventory\",\n      analytics: \"Analytics\",\n      customers: \"Customers\",\n      returns: \"Returns\",\n      shift: \"Shift\",\n    },\n    analytics: {\n      title: \"Analytics\",\n      revenue: \"Revenue\",\n      transactions: \"Transactions\",\n      averageCheck: \"Average Check\",\n      offlineOperations: \"Offline Operations\",\n      hourlyRevenue: \"Hourly Revenue\",\n      topProducts: \"Top Products\",\n      today: \"Today\",\n      yesterday: \"Yesterday\",\n      thisWeek: \"This Week\",\n      thisMonth: \"This Month\",\n      fromYesterday: \"from yesterday\",\n      waitingSync: \"Waiting for sync\",\n    },\n    inventory: {\n      management: \"Product Management\",\n      addProduct: \"Add New Product\",\n      product: \"Product\",\n      sku: \"SKU\",\n      price: \"Price\",\n      stock: \"Stock\",\n      status: \"Status\",\n      actions: \"Actions\",\n      inStock: \"In Stock\",\n      lowStock: \"Low Stock\",\n      outOfStock: \"Out of Stock\",\n    },\n    customers: {\n      customer: \"Customer\",\n      phone: \"Phone\",\n      email: \"Email\",\n      bonuses: \"Bonuses\",\n      registrationDate: \"Registration Date\",\n      addCustomer: \"Add New Customer\",\n      name: \"Name\",\n      searchCustomers: \"Search customers...\",\n    },\n    payment: {\n      cash: \"cash\",\n      card: \"card\",\n      cashPayment: \"Cash Payment\",\n      cardPayment: \"Card Payment\",\n      toPay: \"To Pay:\",\n      received: \"Received:\",\n      change: \"Change:\",\n      cancel: \"Cancel\",\n      complete: \"Complete\",\n    },\n    receipt: {\n      storeName: '\"Cozy Place\" Cafe',\n      address: \"10 Pushkin Street\",\n      phone: \"+7 (727) 123-45-67\",\n      date: \"Date:\",\n      cashier: \"Cashier:\",\n      register: \"Register:\",\n      subtotal: \"Subtotal:\",\n      tax: \"Tax (12%):\",\n      total: \"Total:\",\n      received: \"Received:\",\n      change: \"Change:\",\n      thankYou: \"Thank you for your purchase!\",\n      returnPolicy: \"Exchange and return within 14 days\",\n      email: \"Email\",\n      print: \"Print\",\n    },\n    common: {\n      currency: \"₸\",\n      search: \"Search\",\n      add: \"Add\",\n      edit: \"Edit\",\n      delete: \"Delete\",\n      save: \"Save\",\n      cancel: \"Cancel\",\n      close: \"Close\",\n      pieces: \"pcs\",\n      noData: \"No sales data\",\n      success: \"Success\",\n      error: \"Error\",\n      cashier: \"Cashier\",\n      chartPlaceholder: \"Hourly revenue chart\",\n    },\n    fiscal: {\n      fiscalMode: \"Fiscal Mode\",\n      ofdConnected: \"OFD Connected\",\n      ofdDisconnected: \"OFD Disconnected\",\n      fiscalReceipt: \"Fiscal Receipt\",\n      taxNumber: \"Tax Number:\",\n      fiscalSign: \"Fiscal Sign:\",\n      fiscalPrinter: \"Fiscal Printer\",\n      ready: \"Ready\",\n      queued: \"Queued\",\n      receipts: \"receipts\",\n      lastSync: \"Last sync:\",\n      fiscalInfo: \"Fiscal Information\",\n      ofdOperator: \"OFD:\",\n      checkReceipt: \"Check receipt: check.kz\",\n    },\n  },\n};","size_bytes":13231},"client/src/i18n/utils.ts":{"content":"import { useLanguage } from './LanguageContext';\n\n// Locale mappings for Kazakhstan market\nconst localeMap = {\n  ru: 'ru-KZ',\n  kk: 'kk-KZ', \n  en: 'en-KZ'\n} as const;\n\nexport function useFormatters() {\n  const { language } = useLanguage();\n  const locale = localeMap[language];\n  \n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: 'KZT',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n  \n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat(locale).format(value);\n  };\n  \n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: '2-digit', \n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  };\n  \n  const formatDateShort = (date: Date) => {\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n    }).format(date);\n  };\n  \n  return {\n    formatCurrency,\n    formatNumber,\n    formatDate,\n    formatDateShort,\n  };\n}","size_bytes":1133},"client/src/components/pos/barcode-scanner.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Scan, Camera, Search, Package, CheckCircle, XCircle, Settings } from \"lucide-react\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProductWithCategory } from \"@shared/schema\";\n\ninterface ScanResult {\n  barcode: string;\n  product?: ProductWithCategory;\n  timestamp: Date;\n  success: boolean;\n  error?: string;\n}\n\ninterface ScannerConfig {\n  enabled: boolean;\n  autoFocus: boolean;\n  soundEnabled: boolean;\n  vibrationEnabled: boolean;\n  format: 'ean13' | 'ean8' | 'code128' | 'qr' | 'all';\n  minLength: number;\n  maxLength: number;\n}\n\nexport default function BarcodeScanner({ \n  onProductScanned,\n  isOpen,\n  onClose \n}: {\n  onProductScanned?: (product: ProductWithCategory, quantity?: number) => void;\n  isOpen: boolean;\n  onClose: () => void;\n}) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [manualBarcode, setManualBarcode] = useState(\"\");\n  const [scanResults, setScanResults] = useState<ScanResult[]>([]);\n  const [config, setConfig] = useState<ScannerConfig>({\n    enabled: true,\n    autoFocus: true,\n    soundEnabled: true,\n    vibrationEnabled: true,\n    format: 'all',\n    minLength: 8,\n    maxLength: 14\n  });\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const { t } = useLanguage();\n  const { formatCurrency } = useFormatters();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products = [] } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Initialize camera and scanner\n  useEffect(() => {\n    if (isOpen && config.enabled) {\n      initializeScanner();\n    } else {\n      stopScanner();\n    }\n\n    return () => stopScanner();\n  }, [isOpen, config.enabled]);\n\n  const initializeScanner = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: { \n          facingMode: 'environment',\n          width: { ideal: 640 },\n          height: { ideal: 480 }\n        } \n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n        setIsScanning(true);\n        \n        // Start scanning loop\n        startScanningLoop();\n      }\n    } catch (error) {\n      console.error('Failed to access camera:', error);\n      toast({\n        title: \"Ошибка камеры\",\n        description: \"Не удалось получить доступ к камере. Используйте ручной ввод штрихкода.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopScanner = () => {\n    if (videoRef.current?.srcObject) {\n      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();\n      tracks.forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    setIsScanning(false);\n  };\n\n  const startScanningLoop = () => {\n    const scanFrame = () => {\n      if (videoRef.current && canvasRef.current && isScanning) {\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n        const context = canvas.getContext('2d');\n        \n        if (context && video.readyState === video.HAVE_ENOUGH_DATA) {\n          context.drawImage(video, 0, 0, canvas.width, canvas.height);\n          \n          // Simulate barcode detection (in production, use a real barcode library like QuaggaJS)\n          const mockDetection = Math.random() > 0.95; // 5% chance per frame\n          if (mockDetection) {\n            const mockBarcode = '4870203450' + Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n            handleBarcodeDetected(mockBarcode);\n          }\n        }\n        \n        if (isScanning) {\n          requestAnimationFrame(scanFrame);\n        }\n      }\n    };\n    \n    requestAnimationFrame(scanFrame);\n  };\n\n  const handleBarcodeDetected = (barcode: string) => {\n    // Validate barcode format\n    if (barcode.length < config.minLength || barcode.length > config.maxLength) {\n      return;\n    }\n\n    // Find product by barcode (SKU in this demo)\n    const product = products.find(p => p.sku === barcode || p.sku.includes(barcode.slice(-6)));\n    \n    const scanResult: ScanResult = {\n      barcode,\n      product,\n      timestamp: new Date(),\n      success: !!product,\n      error: product ? undefined : 'Товар не найден'\n    };\n\n    setScanResults(prev => [scanResult, ...prev.slice(0, 9)]);\n\n    if (product) {\n      // Success feedback\n      if (config.soundEnabled) {\n        playSuccessSound();\n      }\n      if (config.vibrationEnabled && navigator.vibrate) {\n        navigator.vibrate(100);\n      }\n      \n      onProductScanned?.(product, 1);\n      \n      toast({\n        title: \"Товар найден\",\n        description: `${product.name} - ${formatCurrency(Number(product.price))}`,\n      });\n    } else {\n      // Error feedback\n      if (config.soundEnabled) {\n        playErrorSound();\n      }\n      \n      toast({\n        title: \"Товар не найден\",\n        description: `Штрихкод ${barcode} не найден в базе`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleManualSearch = () => {\n    if (manualBarcode.trim()) {\n      handleBarcodeDetected(manualBarcode.trim());\n      setManualBarcode(\"\");\n    }\n  };\n\n  const playSuccessSound = () => {\n    // Create success beep\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    \n    oscillator.frequency.value = 800;\n    oscillator.type = 'square';\n    gainNode.gain.value = 0.1;\n    \n    oscillator.start();\n    oscillator.stop(audioContext.currentTime + 0.1);\n  };\n\n  const playErrorSound = () => {\n    // Create error beep\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    \n    oscillator.frequency.value = 300;\n    oscillator.type = 'square';\n    gainNode.gain.value = 0.1;\n    \n    oscillator.start();\n    oscillator.stop(audioContext.currentTime + 0.2);\n  };\n\n  const getBarcodeFormatBadge = (barcode: string) => {\n    if (barcode.length === 13) return <Badge variant=\"outline\">EAN-13</Badge>;\n    if (barcode.length === 8) return <Badge variant=\"outline\">EAN-8</Badge>;\n    if (barcode.length === 12) return <Badge variant=\"outline\">UPC</Badge>;\n    return <Badge variant=\"outline\">Другой</Badge>;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Scan className=\"w-5 h-5\" />\n            Сканирование штрихкодов\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Scanner View */}\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Camera className=\"w-4 h-4\" />\n                  Камера\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {config.enabled ? (\n                  <div className=\"relative bg-black rounded-lg overflow-hidden\">\n                    <video\n                      ref={videoRef}\n                      className=\"w-full h-64 object-cover\"\n                      playsInline\n                      muted\n                    />\n                    <canvas\n                      ref={canvasRef}\n                      className=\"hidden\"\n                      width={640}\n                      height={480}\n                    />\n                    \n                    {/* Scanning overlay */}\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"border-2 border-red-500 w-48 h-32 bg-transparent relative\">\n                        <div className=\"absolute top-0 left-0 w-6 h-6 border-t-4 border-l-4 border-red-500\"></div>\n                        <div className=\"absolute top-0 right-0 w-6 h-6 border-t-4 border-r-4 border-red-500\"></div>\n                        <div className=\"absolute bottom-0 left-0 w-6 h-6 border-b-4 border-l-4 border-red-500\"></div>\n                        <div className=\"absolute bottom-0 right-0 w-6 h-6 border-b-4 border-r-4 border-red-500\"></div>\n                      </div>\n                    </div>\n                    \n                    {isScanning && (\n                      <div className=\"absolute top-2 right-2 bg-green-500 text-white px-2 py-1 rounded text-sm\">\n                        Сканирование...\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"w-full h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center text-gray-500\">\n                      <Camera className=\"w-12 h-12 mx-auto mb-2\" />\n                      <p>Сканер отключен</p>\n                      <Button \n                        variant=\"outline\" \n                        className=\"mt-2\"\n                        onClick={() => setConfig(prev => ({ ...prev, enabled: true }))}\n                      >\n                        Включить сканер\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Manual Input */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Search className=\"w-4 h-4\" />\n                  Ручной ввод\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={manualBarcode}\n                    onChange={(e) => setManualBarcode(e.target.value)}\n                    placeholder=\"Введите штрихкод\"\n                    onKeyDown={(e) => e.key === 'Enter' && handleManualSearch()}\n                  />\n                  <Button onClick={handleManualSearch}>\n                    <Search className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results and Settings */}\n          <div className=\"space-y-4\">\n            {/* Scan Results */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Результаты сканирования</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {scanResults.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">Пока нет результатов</p>\n                  ) : (\n                    scanResults.map((result, index) => (\n                      <div key={index} className=\"p-3 border rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <code className=\"text-sm bg-gray-100 px-2 py-1 rounded\">\n                            {result.barcode}\n                          </code>\n                          <div className=\"flex items-center gap-2\">\n                            {getBarcodeFormatBadge(result.barcode)}\n                            {result.success ? (\n                              <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            ) : (\n                              <XCircle className=\"w-4 h-4 text-red-500\" />\n                            )}\n                          </div>\n                        </div>\n                        \n                        {result.product ? (\n                          <div className=\"text-sm\">\n                            <p className=\"font-medium\">{result.product.name}</p>\n                            <p className=\"text-gray-600\">{formatCurrency(Number(result.product.price))}</p>\n                          </div>\n                        ) : (\n                          <p className=\"text-sm text-red-600\">{result.error}</p>\n                        )}\n                        \n                        <p className=\"text-xs text-gray-400 mt-1\">\n                          {result.timestamp.toLocaleTimeString('ru-RU')}\n                        </p>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Scanner Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Settings className=\"w-4 h-4\" />\n                  Настройки сканера\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Автофокус</label>\n                  <input\n                    type=\"checkbox\"\n                    checked={config.autoFocus}\n                    onChange={(e) => setConfig(prev => ({ ...prev, autoFocus: e.target.checked }))}\n                    className=\"rounded\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Звуковые сигналы</label>\n                  <input\n                    type=\"checkbox\"\n                    checked={config.soundEnabled}\n                    onChange={(e) => setConfig(prev => ({ ...prev, soundEnabled: e.target.checked }))}\n                    className=\"rounded\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-sm font-medium\">Вибрация</label>\n                  <input\n                    type=\"checkbox\"\n                    checked={config.vibrationEnabled}\n                    onChange={(e) => setConfig(prev => ({ ...prev, vibrationEnabled: e.target.checked }))}\n                    className=\"rounded\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Формат штрихкода</label>\n                  <select \n                    value={config.format} \n                    onChange={(e) => setConfig(prev => ({ ...prev, format: e.target.value as any }))}\n                    className=\"w-full mt-1 p-2 border rounded\"\n                  >\n                    <option value=\"all\">Все форматы</option>\n                    <option value=\"ean13\">EAN-13</option>\n                    <option value=\"ean8\">EAN-8</option>\n                    <option value=\"code128\">Code 128</option>\n                    <option value=\"qr\">QR коды</option>\n                  </select>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-between pt-4\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Закрыть\n          </Button>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setScanResults([])}\n              disabled={scanResults.length === 0}\n            >\n              Очистить результаты\n            </Button>\n            {isScanning ? (\n              <Button variant=\"destructive\" onClick={stopScanner}>\n                Остановить сканирование\n              </Button>\n            ) : (\n              <Button onClick={initializeScanner} disabled={!config.enabled}>\n                Начать сканирование\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17080},"client/src/components/pos/enhanced-receipt-modal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Mail, Printer, Shield, CheckCircle } from \"lucide-react\";\nimport { usePOSStore } from \"@/hooks/use-pos-store\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\n\nexport default function EnhancedReceiptModal() {\n  const { receiptModal, closeReceiptModal } = usePOSStore();\n  const { t } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n  const transaction = receiptModal.transaction;\n\n  if (!receiptModal.isOpen || !transaction) return null;\n\n  const fiscalInfo = {\n    fiscalSign: \"FP-2024-001\",\n    qrCode: \"https://check.kz/\" + transaction.id,\n    ofdOperator: \"ТОО \\\"Казахстан ОФД\\\"\",\n    fiscalNumber: \"KZ123456789012\",\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" data-testid=\"receipt-modal\">\n      <div className=\"bg-card border border-border rounded-lg w-96 p-6 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-bold text-card-foreground\">{t.fiscal.fiscalReceipt}</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={closeReceiptModal}\n            data-testid=\"close-receipt-modal\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {/* Fiscal Status Badge */}\n        <div className=\"mb-4 flex justify-center\">\n          <Badge className=\"bg-green-100 text-green-800\">\n            <Shield className=\"w-3 h-3 mr-1\" />\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            {t.fiscal.fiscalReceipt}\n          </Badge>\n        </div>\n\n        {/* Store Info */}\n        <div className=\"text-center mb-4\">\n          <h3 className=\"font-bold text-lg text-card-foreground\">{t.receipt.storeName}</h3>\n          <p className=\"text-sm text-muted-foreground\">{t.receipt.address}</p>\n          <p className=\"text-sm text-muted-foreground\">{t.receipt.phone}</p>\n          <p className=\"text-xs text-muted-foreground mt-1\">ИИН/БИН: {fiscalInfo.fiscalNumber}</p>\n        </div>\n        \n        <div className=\"space-y-2 mb-4 text-sm\">\n          <div className=\"flex justify-between\">\n            <span>{t.receipt.date}</span>\n            <span data-testid=\"receipt-date\">\n              {formatDate(transaction.createdAt)}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>{t.receipt.cashier}</span>\n            <span>Анна Петрова</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>{t.receipt.register}</span>\n            <span>#001</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Смена:</span>\n            <span>#004</span>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-b border-border py-4 mb-4\">\n          {transaction.items.map((item) => (\n            <div key={item.id} className=\"flex justify-between text-sm mb-2\">\n              <div>\n                <p className=\"text-card-foreground\">{item.product.name}</p>\n                <p className=\"text-muted-foreground\">\n                  {formatCurrency(Number(item.unitPrice))} × {item.quantity}\n                </p>\n              </div>\n              <span className=\"text-card-foreground\">{formatCurrency(Number(item.totalPrice))}</span>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"space-y-1 text-sm mb-4\">\n          <div className=\"flex justify-between\">\n            <span>{t.receipt.subtotal}</span>\n            <span data-testid=\"receipt-subtotal\">{formatCurrency(Number(transaction.subtotal))}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>{t.receipt.tax}</span>\n            <span data-testid=\"receipt-tax\">{formatCurrency(Number(transaction.tax))}</span>\n          </div>\n          <div className=\"flex justify-between font-bold text-base border-t border-border pt-2\">\n            <span>{t.receipt.total}</span>\n            <span data-testid=\"receipt-total\">{formatCurrency(Number(transaction.total))}</span>\n          </div>\n          {transaction.paymentMethod === \"cash\" && (\n            <>\n              <div className=\"flex justify-between\">\n                <span>{t.receipt.received}</span>\n                <span data-testid=\"receipt-received\">{formatCurrency(Number(transaction.receivedAmount || 0))}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>{t.receipt.change}</span>\n                <span data-testid=\"receipt-change\">{formatCurrency(Number(transaction.changeAmount || 0))}</span>\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Fiscal Information */}\n        <div className=\"bg-muted p-3 rounded-lg mb-4 text-xs\">\n          <div className=\"font-semibold mb-2 text-center\">{t.fiscal.fiscalInfo}</div>\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between\">\n              <span>{t.fiscal.fiscalSign}</span>\n              <span className=\"font-mono\">{fiscalInfo.fiscalSign}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>{t.fiscal.ofdOperator}</span>\n              <span>{fiscalInfo.ofdOperator}</span>\n            </div>\n            <div className=\"text-center mt-2\">\n              <div className=\"w-16 h-16 bg-white border mx-auto flex items-center justify-center\">\n                {/* QR Code placeholder */}\n                <span className=\"text-xs\">QR</span>\n              </div>\n              <p className=\"mt-1\">{t.fiscal.checkReceipt}</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"text-center text-xs text-muted-foreground mb-4\">\n          <p>{t.receipt.thankYou}</p>\n          <p>{t.receipt.returnPolicy}</p>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" className=\"flex-1\">\n            <Mail className=\"w-4 h-4 mr-2\" />\n            {t.receipt.email}\n          </Button>\n          <Button className=\"flex-1\">\n            <Printer className=\"w-4 h-4 mr-2\" />\n            {t.receipt.print}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6420},"client/src/components/pos/fiscal-status.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, XCircle, AlertTriangle, Printer, Shield, FileText } from \"lucide-react\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useState, useEffect } from \"react\";\n\ninterface FiscalStatus {\n  ofdConnected: boolean;\n  fiscalMode: boolean;\n  lastSync: Date | null;\n  queuedReceipts: number;\n  taxNumber: string;\n  fiscalSign: string;\n}\n\nexport default function FiscalStatus() {\n  const { t } = useLanguage();\n  const [status, setStatus] = useState<FiscalStatus>({\n    ofdConnected: true, // Simulated - would be real OFD connection in production\n    fiscalMode: true,\n    lastSync: new Date(),\n    queuedReceipts: 0,\n    taxNumber: \"123456789012\",\n    fiscalSign: \"FP-2024-001\",\n  });\n\n  // Simulate periodic OFD status checks\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStatus(prev => ({\n        ...prev,\n        lastSync: new Date(),\n        // Simulate occasional connection issues\n        ofdConnected: Math.random() > 0.1, // 90% uptime simulation\n      }));\n    }, 30000); // Check every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2 text-sm\">\n          <Shield className=\"w-4 h-4\" />\n          {t.fiscal.fiscalMode}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {/* OFD Connection Status */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-2 h-2 rounded-full ${status.ofdConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n            <span className=\"text-sm text-foreground\">ОФД</span>\n          </div>\n          <Badge variant={status.ofdConnected ? \"default\" : \"destructive\"} className=\"text-xs\">\n            {status.ofdConnected ? (\n              <div className=\"flex items-center gap-1\">\n                <CheckCircle className=\"w-3 h-3\" />\n                {t.fiscal.ofdConnected}\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-1\">\n                <XCircle className=\"w-3 h-3\" />\n                {t.fiscal.ofdDisconnected}\n              </div>\n            )}\n          </Badge>\n        </div>\n\n        {/* Fiscal Printer Status */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Printer className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-sm text-foreground\">{t.fiscal.fiscalPrinter}</span>\n          </div>\n          <Badge variant=\"default\" className=\"text-xs\">\n            <div className=\"flex items-center gap-1\">\n              <CheckCircle className=\"w-3 h-3\" />\n              {t.fiscal.ready}\n            </div>\n          </Badge>\n        </div>\n\n        {/* Queued Receipts */}\n        {status.queuedReceipts > 0 && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-sm text-foreground\">{t.fiscal.queued}</span>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              <div className=\"flex items-center gap-1\">\n                <AlertTriangle className=\"w-3 h-3\" />\n                {status.queuedReceipts} {t.fiscal.receipts}\n              </div>\n            </Badge>\n          </div>\n        )}\n\n        {/* Tax Information */}\n        <div className=\"text-xs text-muted-foreground space-y-1 pt-2 border-t border-border\">\n          <div>{t.fiscal.taxNumber} {status.taxNumber}</div>\n          <div>{t.fiscal.fiscalSign} {status.fiscalSign}</div>\n          {status.lastSync && (\n            <div>\n              {t.fiscal.lastSync} {status.lastSync.toLocaleTimeString('ru-KZ')}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4118},"client/src/components/pos/goods-acceptance-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Package, CheckCircle, AlertTriangle, Truck } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertGoodsAcceptanceSchema } from \"@shared/schema\";\nimport type { ProductWithCategory, GoodsAcceptance } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst acceptanceFormSchema = insertGoodsAcceptanceSchema.extend({\n  productId: z.string().min(1, \"Выберите товар\"),\n  expectedQuantity: z.number().min(1, \"Ожидаемое количество должно быть положительным\"),\n  actualQuantity: z.number().min(0, \"Фактическое количество не может быть отрицательным\"),\n}).omit({ acceptedBy: true, discrepancy: true });\n\ntype AcceptanceRecord = GoodsAcceptance & {\n  product: ProductWithCategory;\n};\n\nexport default function GoodsAcceptanceTab() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { t } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const userId = useSessionStore((state) => state.userId);\n\n  const form = useForm<z.infer<typeof acceptanceFormSchema>>({\n    resolver: zodResolver(acceptanceFormSchema),\n    defaultValues: {\n      productId: \"\",\n      expectedQuantity: 1,\n      actualQuantity: 1,\n      status: \"pending\",\n      supplierInvoice: \"\",\n      notes: \"\",\n    },\n  });\n\n  const { data: acceptanceRecords = [], isLoading } = useQuery<AcceptanceRecord[]>({\n    queryKey: [\"/api/goods-acceptance\"],\n  });\n\n  const { data: products = [] } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const addAcceptanceMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof acceptanceFormSchema>) => {\n      const discrepancy = data.actualQuantity - data.expectedQuantity;\n      let status = \"accepted\";\n      if (discrepancy < 0) {\n        status = \"partial\";\n      }\n      \n      const acceptanceData = {\n        ...data,\n        acceptedBy: userId,\n        discrepancy,\n        status,\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/goods-acceptance\", acceptanceData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goods-acceptance\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: t.common.success,\n        description: \"Приемка товара успешно добавлена\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось добавить приемку\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/goods-acceptance/${id}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goods-acceptance\"] });\n      toast({\n        title: t.common.success,\n        description: \"Статус приемки обновлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось обновить статус\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRecords = acceptanceRecords.filter((record) => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      record.product?.name?.toLowerCase().includes(searchLower) ||\n      record.product?.sku?.toLowerCase().includes(searchLower) ||\n      record.supplierInvoice?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const getStatusBadge = (status: string, discrepancy: number) => {\n    switch (status) {\n      case \"accepted\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\" data-testid={`badge-status-accepted`}>\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Принято\n          </Badge>\n        );\n      case \"partial\":\n        return (\n          <Badge variant=\"secondary\" data-testid={`badge-status-partial`}>\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Частично ({discrepancy > 0 ? \"+\" : \"\"}\n            {discrepancy})\n          </Badge>\n        );\n      case \"rejected\":\n        return (\n          <Badge variant=\"destructive\" data-testid={`badge-status-rejected`}>\n            Отклонено\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" data-testid={`badge-status-pending`}>\n            В ожидании\n          </Badge>\n        );\n    }\n  };\n\n  // Calculate summary stats\n  const todayAccepted = acceptanceRecords.filter(\n    (r) => new Date(r.createdAt).toDateString() === new Date().toDateString()\n  ).length;\n\n  const discrepancies = acceptanceRecords.filter(\n    (r) => r.discrepancy !== 0 && r.status !== \"rejected\"\n  ).length;\n\n  return (\n    <div className=\"flex-1 p-6\" data-testid=\"goods-acceptance-tab\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Приемка товаров</h1>\n          <div className=\"flex gap-3\">\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-acceptance\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Новая приемка\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Приемка товара</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form\n                    onSubmit={form.handleSubmit((data) => addAcceptanceMutation.mutate(data))}\n                    className=\"space-y-4\"\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"productId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Товар</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-product\">\n                                <SelectValue placeholder=\"Выберите товар\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {products.map((product) => (\n                                <SelectItem key={product.id} value={product.id}>\n                                  {product.name} ({product.sku})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"expectedQuantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Ожидаемое количество</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              {...field}\n                              onChange={(e) => field.onChange(Number(e.target.value))}\n                              data-testid=\"input-expected-quantity\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"actualQuantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Фактическое количество</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              {...field}\n                              onChange={(e) => field.onChange(Number(e.target.value))}\n                              data-testid=\"input-actual-quantity\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"supplierInvoice\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Номер накладной</FormLabel>\n                          <FormControl>\n                            <Input {...field} value={field.value || \"\"} data-testid=\"input-invoice-number\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Примечания</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} value={field.value || \"\"} data-testid=\"textarea-notes\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsAddDialogOpen(false)}\n                        className=\"flex-1\"\n                        data-testid=\"button-cancel\"\n                      >\n                        {t.common.cancel}\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={addAcceptanceMutation.isPending}\n                        className=\"flex-1\"\n                        data-testid=\"button-submit\"\n                      >\n                        {addAcceptanceMutation.isPending ? \"Добавление...\" : \"Добавить\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Сегодня принято</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-today-accepted\">\n                {todayAccepted}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">приемок</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Всего записей</CardTitle>\n              <Truck className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-records\">\n                {acceptanceRecords.length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">За все время</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Расхождения</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-discrepancies\">\n                {discrepancies}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Требуют внимания</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Товаров</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-products-count\">\n                {products.length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">В каталоге</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <Input\n            placeholder=\"Поиск по товарам, SKU или номеру накладной...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-md\"\n            data-testid=\"input-search\"\n          />\n        </div>\n\n        {/* Acceptance Records Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>История приемки</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Загрузка...</div>\n            ) : filteredRecords.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {searchTerm ? \"Записи не найдены\" : \"Пока нет записей приемки\"}\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Товар</TableHead>\n                    <TableHead>Ожидалось</TableHead>\n                    <TableHead>Получено</TableHead>\n                    <TableHead>Расхождение</TableHead>\n                    <TableHead>Статус</TableHead>\n                    <TableHead>Накладная</TableHead>\n                    <TableHead>Дата</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredRecords.map((record) => (\n                    <TableRow key={record.id} data-testid={`row-acceptance-${record.id}`}>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium text-card-foreground\">\n                            {record.product?.name || \"Неизвестный товар\"}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {record.product?.sku || \"N/A\"}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell data-testid={`text-expected-${record.id}`}>\n                        {record.expectedQuantity}\n                      </TableCell>\n                      <TableCell data-testid={`text-actual-${record.id}`}>\n                        {record.actualQuantity}\n                      </TableCell>\n                      <TableCell>\n                        <span\n                          className={`font-medium ${\n                            record.discrepancy === 0\n                              ? \"text-green-600 dark:text-green-400\"\n                              : record.discrepancy > 0\n                                ? \"text-blue-600 dark:text-blue-400\"\n                                : \"text-red-600 dark:text-red-400\"\n                          }`}\n                          data-testid={`text-discrepancy-${record.id}`}\n                        >\n                          {record.discrepancy > 0 ? \"+\" : \"\"}\n                          {record.discrepancy}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(record.status, record.discrepancy)}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {record.supplierInvoice || \"—\"}\n                      </TableCell>\n                      <TableCell data-testid={`text-date-${record.id}`}>\n                        {formatDate(new Date(record.createdAt))}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18731},"client/src/components/pos/hardware-config.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Settings, \n  Printer, \n  Scan, \n  CreditCard, \n  Wifi, \n  CheckCircle, \n  XCircle, \n  AlertTriangle,\n  RefreshCw,\n  Cable,\n  Usb\n} from \"lucide-react\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface HardwareDevice {\n  id: string;\n  name: string;\n  type: 'fiscal_printer' | 'barcode_scanner' | 'payment_terminal' | 'cash_drawer' | 'display' | 'scale';\n  brand: string;\n  model: string;\n  status: 'connected' | 'disconnected' | 'error' | 'configuring';\n  connection: 'usb' | 'com' | 'tcp' | 'bluetooth' | 'wifi';\n  port?: string;\n  ip?: string;\n  settings: Record<string, any>;\n  lastSeen: Date;\n  firmware?: string;\n  serial?: string;\n}\n\ninterface DeviceDriver {\n  id: string;\n  name: string;\n  version: string;\n  deviceTypes: string[];\n  supportedModels: string[];\n  status: 'installed' | 'not_installed' | 'update_available';\n}\n\nexport default function HardwareConfig() {\n  const [selectedDevice, setSelectedDevice] = useState<HardwareDevice | null>(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data - would be from API in production\n  const devices: HardwareDevice[] = [\n    {\n      id: '1',\n      name: 'Фискальный принтер Штрих-М',\n      type: 'fiscal_printer',\n      brand: 'Штрих-М',\n      model: 'Штрих-Лайт-01Ф',\n      status: 'connected',\n      connection: 'usb',\n      port: 'COM3',\n      settings: {\n        baudRate: 115200,\n        encoding: 'cp1251',\n        paperWidth: 80,\n        autocut: true,\n        fiscalMode: true,\n        ofdEnabled: true\n      },\n      lastSeen: new Date(),\n      firmware: '2.1.45',\n      serial: 'SLF123456789'\n    },\n    {\n      id: '2',\n      name: 'Сканер штрих-кодов Honeywell',\n      type: 'barcode_scanner',\n      brand: 'Honeywell',\n      model: 'Voyager 1200g',\n      status: 'connected',\n      connection: 'usb',\n      settings: {\n        autoTrigger: true,\n        beepEnabled: true,\n        ledEnabled: true,\n        scanFormats: ['ean13', 'ean8', 'code128', 'qr']\n      },\n      lastSeen: new Date(),\n      firmware: '1.5.12',\n      serial: 'HW987654321'\n    },\n    {\n      id: '3',\n      name: 'Эквайринговый терминал Казкоммерцбанк',\n      type: 'payment_terminal',\n      brand: 'VeriFone',\n      model: 'VX520',\n      status: 'connected',\n      connection: 'tcp',\n      ip: '192.168.1.100',\n      settings: {\n        acquirerBank: 'kazkommertsbank',\n        terminalId: 'KKB12345',\n        merchantId: 'M123456789',\n        timeout: 60,\n        receiptsEnabled: true\n      },\n      lastSeen: new Date(),\n      firmware: '3.2.1',\n      serial: 'VF520123456'\n    },\n    {\n      id: '4',\n      name: 'Денежный ящик',\n      type: 'cash_drawer',\n      brand: 'Generic',\n      model: 'CD-410',\n      status: 'error',\n      connection: 'com',\n      port: 'COM4',\n      settings: {\n        openSignal: 'rts',\n        openDuration: 200\n      },\n      lastSeen: new Date(Date.now() - 5 * 60 * 1000),\n      serial: 'CD410789123'\n    }\n  ];\n\n  const drivers: DeviceDriver[] = [\n    {\n      id: '1',\n      name: 'Штрих-М Driver Pack',\n      version: '5.2.1',\n      deviceTypes: ['fiscal_printer'],\n      supportedModels: ['Штрих-Лайт-01Ф', 'Штрих-ФР-К', 'Элвес-ФР-К'],\n      status: 'installed'\n    },\n    {\n      id: '2',\n      name: 'Honeywell Scanner Driver',\n      version: '1.8.3',\n      deviceTypes: ['barcode_scanner'],\n      supportedModels: ['Voyager 1200g', 'Voyager 1400g', 'Genesis 7580g'],\n      status: 'update_available'\n    },\n    {\n      id: '3',\n      name: 'VeriFone Payment Driver',\n      version: '2.4.7',\n      deviceTypes: ['payment_terminal'],\n      supportedModels: ['VX520', 'VX675', 'VX680'],\n      status: 'installed'\n    }\n  ];\n\n  const testDevice = async (deviceId: string) => {\n    const device = devices.find(d => d.id === deviceId);\n    if (!device) return;\n\n    toast({\n      title: \"Тестирование устройства\",\n      description: `Проверка связи с ${device.name}...`,\n    });\n\n    // Mock test\n    setTimeout(() => {\n      const success = Math.random() > 0.3;\n      toast({\n        title: success ? \"Тест пройден\" : \"Ошибка теста\",\n        description: success \n          ? `${device.name} работает корректно`\n          : `Ошибка связи с ${device.name}`,\n        variant: success ? \"default\" : \"destructive\",\n      });\n    }, 2000);\n  };\n\n  const scanForDevices = () => {\n    setIsScanning(true);\n    toast({\n      title: \"Поиск устройств\",\n      description: \"Сканирование подключенных устройств...\",\n    });\n\n    setTimeout(() => {\n      setIsScanning(false);\n      toast({\n        title: \"Поиск завершен\",\n        description: \"Найдено 4 устройства\",\n      });\n    }, 3000);\n  };\n\n  const getStatusIcon = (status: HardwareDevice['status']) => {\n    switch (status) {\n      case 'connected':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'disconnected':\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case 'error':\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      case 'configuring':\n        return <RefreshCw className=\"h-4 w-4 text-blue-600 animate-spin\" />;\n      default:\n        return <XCircle className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusBadge = (status: HardwareDevice['status']) => {\n    switch (status) {\n      case 'connected':\n        return <Badge className=\"bg-green-100 text-green-800\">Подключено</Badge>;\n      case 'disconnected':\n        return <Badge variant=\"secondary\">Отключено</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\">Ошибка</Badge>;\n      case 'configuring':\n        return <Badge className=\"bg-blue-100 text-blue-800\">Настройка</Badge>;\n      default:\n        return <Badge variant=\"outline\">Неизвестно</Badge>;\n    }\n  };\n\n  const getDeviceIcon = (type: HardwareDevice['type']) => {\n    switch (type) {\n      case 'fiscal_printer':\n        return <Printer className=\"h-4 w-4\" />;\n      case 'barcode_scanner':\n        return <Scan className=\"h-4 w-4\" />;\n      case 'payment_terminal':\n        return <CreditCard className=\"h-4 w-4\" />;\n      case 'cash_drawer':\n        return <Cable className=\"h-4 w-4\" />;\n      default:\n        return <Settings className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getConnectionIcon = (connection: HardwareDevice['connection']) => {\n    switch (connection) {\n      case 'usb':\n        return <Usb className=\"h-4 w-4\" />;\n      case 'tcp':\n      case 'wifi':\n        return <Wifi className=\"h-4 w-4\" />;\n      case 'com':\n      case 'bluetooth':\n        return <Cable className=\"h-4 w-4\" />;\n      default:\n        return <Cable className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getDeviceTypeLabel = (type: HardwareDevice['type']) => {\n    const labels = {\n      'fiscal_printer': 'Фискальный принтер',\n      'barcode_scanner': 'Сканер штрих-кодов',\n      'payment_terminal': 'Платежный терминал',\n      'cash_drawer': 'Денежный ящик',\n      'display': 'Дисплей покупателя',\n      'scale': 'Весы'\n    };\n    return labels[type] || type;\n  };\n\n  const kazakhstanDevices = devices.filter(device => \n    device.brand === 'Штрих-М' || \n    device.settings.acquirerBank === 'kazkommertsbank' ||\n    device.settings.fiscalMode\n  );\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Настройка оборудования</h1>\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={scanForDevices} disabled={isScanning}>\n              <RefreshCw className={`w-4 h-4 mr-2 ${isScanning ? 'animate-spin' : ''}`} />\n              {isScanning ? 'Поиск...' : 'Найти устройства'}\n            </Button>\n          </div>\n        </div>\n\n        {/* Kazakhstan Compliance Alert */}\n        {kazakhstanDevices.length > 0 && (\n          <Alert className=\"mb-6 border-blue-200 bg-blue-50\">\n            <CheckCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Обнаружено {kazakhstanDevices.length} устройств с поддержкой требований РК: \n              фискальное оборудование Штрих-М и эквайринг Казкоммерцбанк.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Device Status Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Всего устройств</CardTitle>\n              <Settings className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{devices.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Подключено</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Активные</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {devices.filter(d => d.status === 'connected').length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Работают</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">С ошибками</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">\n                {devices.filter(d => d.status === 'error' || d.status === 'disconnected').length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Требуют внимания</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Соответствие РК</CardTitle>\n              <Printer className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{kazakhstanDevices.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Сертифицированных</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Devices Table */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Подключенные устройства</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Устройство</TableHead>\n                  <TableHead>Тип</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Подключение</TableHead>\n                  <TableHead>Производитель</TableHead>\n                  <TableHead>Последняя связь</TableHead>\n                  <TableHead>Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {devices.map((device) => (\n                  <TableRow key={device.id}>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        {getDeviceIcon(device.type)}\n                        <div>\n                          <p className=\"font-medium text-card-foreground\">{device.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">{device.model}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{getDeviceTypeLabel(device.type)}</Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusIcon(device.status)}\n                        {getStatusBadge(device.status)}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        {getConnectionIcon(device.connection)}\n                        <span className=\"text-sm\">\n                          {device.connection.toUpperCase()}\n                          {device.port && ` (${device.port})`}\n                          {device.ip && ` (${device.ip})`}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>{device.brand}</TableCell>\n                    <TableCell className=\"text-muted-foreground\">\n                      {device.lastSeen.toLocaleTimeString('ru-RU')}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => testDevice(device.id)}>\n                          Тест\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => setSelectedDevice(device)}>\n                          Настроить\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        {/* Drivers */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Драйверы устройств</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Драйвер</TableHead>\n                  <TableHead>Версия</TableHead>\n                  <TableHead>Поддерживаемые устройства</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {drivers.map((driver) => (\n                  <TableRow key={driver.id}>\n                    <TableCell className=\"font-medium\">{driver.name}</TableCell>\n                    <TableCell>{driver.version}</TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {driver.supportedModels.slice(0, 2).map(model => (\n                          <Badge key={model} variant=\"outline\" className=\"text-xs\">\n                            {model}\n                          </Badge>\n                        ))}\n                        {driver.supportedModels.length > 2 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{driver.supportedModels.length - 2}\n                          </Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {driver.status === 'installed' && (\n                        <Badge className=\"bg-green-100 text-green-800\">Установлен</Badge>\n                      )}\n                      {driver.status === 'update_available' && (\n                        <Badge className=\"bg-yellow-100 text-yellow-800\">Обновление</Badge>\n                      )}\n                      {driver.status === 'not_installed' && (\n                        <Badge variant=\"secondary\">Не установлен</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      {driver.status === 'update_available' && (\n                        <Button variant=\"outline\" size=\"sm\">\n                          Обновить\n                        </Button>\n                      )}\n                      {driver.status === 'not_installed' && (\n                        <Button variant=\"outline\" size=\"sm\">\n                          Установить\n                        </Button>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18022},"client/src/components/pos/inventory-audit-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Plus, Search, FileText, AlertTriangle, CheckCircle, Calculator, Package } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertInventoryAuditSchema, insertInventoryAuditItemSchema } from \"@shared/schema\";\nimport type { ProductWithCategory, InventoryAuditWithItems } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst auditFormSchema = insertInventoryAuditSchema.extend({\n  name: z.string().min(1, \"Название инвентаризации обязательно\"),\n}).omit({ createdBy: true });\n\nconst auditItemFormSchema = insertInventoryAuditItemSchema.extend({\n  productId: z.string().min(1, \"Выберите товар\"),\n  expectedQuantity: z.number().min(0, \"Ожидаемое количество не может быть отрицательным\"),\n  actualQuantity: z.number().min(0, \"Фактическое количество не может быть отрицательным\"),\n}).omit({ auditId: true, variance: true });\n\nexport default function InventoryAuditTab() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [selectedAudit, setSelectedAudit] = useState<string | null>(null);\n  const [isItemDialogOpen, setIsItemDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { t } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n  const { toast } = useToast();\n  const userId = useSessionStore((state) => state.userId);\n\n  const auditForm = useForm<z.infer<typeof auditFormSchema>>({\n    resolver: zodResolver(auditFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      status: \"draft\",\n    },\n  });\n\n  const itemForm = useForm<z.infer<typeof auditItemFormSchema>>({\n    resolver: zodResolver(auditItemFormSchema),\n    defaultValues: {\n      productId: \"\",\n      expectedQuantity: 0,\n      actualQuantity: 0,\n      status: \"pending\",\n      notes: \"\",\n    },\n  });\n\n  const { data: audits = [], isLoading: isLoadingAudits } = useQuery<InventoryAuditWithItems[]>({\n    queryKey: [\"/api/inventory-audits\"],\n  });\n\n  const { data: selectedAuditData } = useQuery<InventoryAuditWithItems>({\n    queryKey: [\"/api/inventory-audits\", selectedAudit],\n    enabled: !!selectedAudit,\n  });\n\n  const { data: products = [] } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const createAuditMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof auditFormSchema>) => {\n      const auditData = {\n        ...data,\n        createdBy: userId,\n      };\n      const response = await apiRequest(\"POST\", \"/api/inventory-audits\", auditData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory-audits\"] });\n      setIsAddDialogOpen(false);\n      auditForm.reset();\n      toast({\n        title: t.common.success,\n        description: \"Инвентаризация успешно создана\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось создать инвентаризацию\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addAuditItemMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof auditItemFormSchema>) => {\n      if (!selectedAudit) throw new Error(\"Audit not selected\");\n      \n      const variance = data.actualQuantity - data.expectedQuantity;\n      const itemData = {\n        ...data,\n        variance,\n      };\n      \n      const response = await apiRequest(\"POST\", `/api/inventory-audits/${selectedAudit}/items`, itemData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory-audits\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory-audits\", selectedAudit] });\n      setIsItemDialogOpen(false);\n      itemForm.reset();\n      toast({\n        title: t.common.success,\n        description: \"Товар добавлен в инвентаризацию\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось добавить товар\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAuditStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const completedAt = status === \"completed\" ? new Date().toISOString() : undefined;\n      const response = await apiRequest(\"PUT\", `/api/inventory-audits/${id}/status`, { \n        status, \n        completedAt \n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory-audits\"] });\n      toast({\n        title: t.common.success,\n        description: \"Статус инвентаризации обновлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось обновить статус\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredAudits = audits.filter((audit) => {\n    const searchLower = searchTerm.toLowerCase();\n    return audit.name.toLowerCase().includes(searchLower);\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\" data-testid={`badge-status-completed`}>\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Завершена\n          </Badge>\n        );\n      case \"in_progress\":\n        return (\n          <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100\" data-testid={`badge-status-in-progress`}>\n            <Calculator className=\"w-3 h-3 mr-1\" />\n            В процессе\n          </Badge>\n        );\n      case \"draft\":\n        return (\n          <Badge variant=\"outline\" data-testid={`badge-status-draft`}>\n            Черновик\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"destructive\" data-testid={`badge-status-cancelled`}>\n            Отменена\n          </Badge>\n        );\n    }\n  };\n\n  const activeAudits = audits.filter(a => a.status === \"in_progress\").length;\n  const totalItemsToCheck = audits\n    .filter(a => a.status === \"in_progress\")\n    .reduce((sum, a) => sum + (a.totalItems - a.countedItems), 0);\n  const totalVariance = audits\n    .filter(a => a.status === \"completed\")\n    .reduce((sum, a) => sum + a.totalVariance, 0);\n  const completedAudits = audits.filter(a => a.status === \"completed\");\n  const accuracy = completedAudits.length > 0\n    ? (completedAudits.reduce((sum, a) => {\n        const itemsWithoutVariance = a.items?.filter(i => i.variance === 0).length || 0;\n        return sum + (a.totalItems > 0 ? (itemsWithoutVariance / a.totalItems) : 0);\n      }, 0) / completedAudits.length) * 100\n    : 0;\n\n  return (\n    <div className=\"flex-1 p-6\" data-testid=\"inventory-audit-tab\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Инвентаризация</h1>\n          <div className=\"flex gap-3\">\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-audit\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Новая инвентаризация\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Создать инвентаризацию</DialogTitle>\n                </DialogHeader>\n                <Form {...auditForm}>\n                  <form\n                    onSubmit={auditForm.handleSubmit((data) => createAuditMutation.mutate(data))}\n                    className=\"space-y-4\"\n                  >\n                    <FormField\n                      control={auditForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Название инвентаризации</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Например: Ежемесячная проверка\" data-testid=\"input-audit-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={auditForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Описание (опционально)</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} value={field.value || \"\"} placeholder=\"Описание инвентаризации\" data-testid=\"input-audit-description\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} className=\"flex-1\" data-testid=\"button-cancel-audit\">\n                        {t.common.cancel}\n                      </Button>\n                      <Button type=\"submit\" disabled={createAuditMutation.isPending} className=\"flex-1\" data-testid=\"button-submit-audit\">\n                        {createAuditMutation.isPending ? \"Создание...\" : \"Создать\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Активные инвентаризации</CardTitle>\n              <Calculator className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingAudits ? (\n                <Skeleton className=\"h-8 w-12\" />\n              ) : (\n                <>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-active-audits\">{activeAudits}</div>\n                  <p className=\"text-xs text-muted-foreground\">В процессе</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Товаров к проверке</CardTitle>\n              <Search className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingAudits ? (\n                <Skeleton className=\"h-8 w-12\" />\n              ) : (\n                <>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-items-to-check\">{totalItemsToCheck}</div>\n                  <p className=\"text-xs text-muted-foreground\">Осталось проверить</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Общие расхождения</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingAudits ? (\n                <Skeleton className=\"h-8 w-20\" />\n              ) : (\n                <>\n                  <div className={`text-2xl font-bold ${totalVariance < 0 ? 'text-red-600 dark:text-red-400' : 'text-green-600 dark:text-green-400'}`} data-testid=\"text-total-variance\">\n                    {totalVariance > 0 ? '+' : ''}{formatCurrency(Math.abs(totalVariance))}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">За все завершенные</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Точность инвентаризации</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingAudits ? (\n                <Skeleton className=\"h-8 w-16\" />\n              ) : (\n                <>\n                  <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-accuracy\">\n                    {accuracy.toFixed(1)}%\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Средняя точность</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <Input\n            placeholder=\"Поиск инвентаризаций...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-md\"\n            data-testid=\"input-search-audits\"\n          />\n        </div>\n\n        {/* Audits Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Список инвентаризаций</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoadingAudits ? (\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-10 w-full\" />\n                <Skeleton className=\"h-10 w-full\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </div>\n            ) : filteredAudits.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-audits\">\n                <Package className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Инвентаризации не найдены</p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Название</TableHead>\n                    <TableHead>Статус</TableHead>\n                    <TableHead>Прогресс</TableHead>\n                    <TableHead>Расхождения</TableHead>\n                    <TableHead>Создана</TableHead>\n                    <TableHead>Действия</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAudits.map((audit) => (\n                    <TableRow key={audit.id} data-testid={`row-audit-${audit.id}`}>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium text-card-foreground\" data-testid={`text-audit-name-${audit.id}`}>\n                            {audit.name}\n                          </p>\n                          {audit.description && (\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`text-audit-description-${audit.id}`}>\n                              {audit.description}\n                            </p>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(audit.status)}</TableCell>\n                      <TableCell>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                          <div\n                            className=\"bg-blue-600 dark:bg-blue-500 h-2 rounded-full\"\n                            style={{ width: `${audit.totalItems > 0 ? (audit.countedItems / audit.totalItems) * 100 : 0}%` }}\n                          ></div>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`text-audit-progress-${audit.id}`}>\n                          {audit.countedItems} / {audit.totalItems}\n                        </p>\n                      </TableCell>\n                      <TableCell>\n                        <span\n                          className={`font-medium ${\n                            audit.totalVariance === 0\n                              ? \"text-green-600 dark:text-green-400\"\n                              : audit.totalVariance > 0\n                              ? \"text-blue-600 dark:text-blue-400\"\n                              : \"text-red-600 dark:text-red-400\"\n                          }`}\n                          data-testid={`text-audit-variance-${audit.id}`}\n                        >\n                          {audit.totalVariance > 0 ? \"+\" : \"\"}\n                          {formatCurrency(Math.abs(audit.totalVariance))}\n                        </span>\n                      </TableCell>\n                      <TableCell data-testid={`text-audit-created-${audit.id}`}>\n                        {formatDate(new Date(audit.createdAt))}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => setSelectedAudit(audit.id)}\n                            data-testid={`button-view-audit-${audit.id}`}\n                          >\n                            <FileText className=\"w-4 h-4\" />\n                          </Button>\n                          {audit.status === \"draft\" && (\n                            <Button\n                              size=\"sm\"\n                              onClick={() =>\n                                updateAuditStatusMutation.mutate({ id: audit.id, status: \"in_progress\" })\n                              }\n                              disabled={updateAuditStatusMutation.isPending}\n                              data-testid={`button-start-audit-${audit.id}`}\n                            >\n                              Начать\n                            </Button>\n                          )}\n                          {audit.status === \"in_progress\" && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedAudit(audit.id);\n                                  setIsItemDialogOpen(true);\n                                }}\n                                data-testid={`button-add-item-${audit.id}`}\n                              >\n                                <Plus className=\"w-4 h-4 mr-1\" />\n                                Товар\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                onClick={() =>\n                                  updateAuditStatusMutation.mutate({ id: audit.id, status: \"completed\" })\n                                }\n                                disabled={updateAuditStatusMutation.isPending}\n                                data-testid={`button-complete-audit-${audit.id}`}\n                              >\n                                Завершить\n                              </Button>\n                            </>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add Item Dialog */}\n        <Dialog open={isItemDialogOpen} onOpenChange={setIsItemDialogOpen}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Добавить товар в инвентаризацию</DialogTitle>\n            </DialogHeader>\n            <Form {...itemForm}>\n              <form\n                onSubmit={itemForm.handleSubmit((data) => addAuditItemMutation.mutate(data))}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={itemForm.control}\n                  name=\"productId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Товар</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-item-product\">\n                            <SelectValue placeholder=\"Выберите товар\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {products.map((product) => (\n                            <SelectItem key={product.id} value={product.id}>\n                              {product.name} ({product.sku}) - Запас: {product.stock}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={itemForm.control}\n                  name=\"expectedQuantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Ожидаемое количество</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-item-expected-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={itemForm.control}\n                  name=\"actualQuantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Фактическое количество</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-item-actual-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={itemForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Примечания (опционально)</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} value={field.value || \"\"} placeholder=\"Дополнительные заметки\" data-testid=\"input-item-notes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsItemDialogOpen(false);\n                      itemForm.reset();\n                    }}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-item\"\n                  >\n                    {t.common.cancel}\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={addAuditItemMutation.isPending}\n                    className=\"flex-1\"\n                    data-testid=\"button-submit-item\"\n                  >\n                    {addAuditItemMutation.isPending ? \"Добавление...\" : \"Добавить\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Audit Details Dialog */}\n        {selectedAuditData && (\n          <Dialog open={!!selectedAudit && !isItemDialogOpen} onOpenChange={(open) => !open && setSelectedAudit(null)}>\n            <DialogContent className=\"max-w-4xl\">\n              <DialogHeader>\n                <DialogTitle>{selectedAuditData.name}</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                {selectedAuditData.description && (\n                  <p className=\"text-sm text-muted-foreground\">{selectedAuditData.description}</p>\n                )}\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <p className=\"text-sm font-medium\">Статус</p>\n                    <div className=\"mt-1\">{getStatusBadge(selectedAuditData.status)}</div>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">Прогресс</p>\n                    <p className=\"mt-1\" data-testid=\"text-detail-progress\">\n                      {selectedAuditData.countedItems} / {selectedAuditData.totalItems}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">Расхождения</p>\n                    <p className=\"mt-1 font-medium\" data-testid=\"text-detail-variance\">\n                      {selectedAuditData.totalVariance > 0 ? '+' : ''}\n                      {formatCurrency(Math.abs(selectedAuditData.totalVariance))}\n                    </p>\n                  </div>\n                </div>\n                {selectedAuditData.items && selectedAuditData.items.length > 0 && (\n                  <div>\n                    <h3 className=\"font-medium mb-2\">Товары</h3>\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Товар</TableHead>\n                          <TableHead>Ожидается</TableHead>\n                          <TableHead>Фактически</TableHead>\n                          <TableHead>Расхождение</TableHead>\n                          <TableHead>Статус</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {selectedAuditData.items.map((item) => (\n                          <TableRow key={item.id} data-testid={`row-item-${item.id}`}>\n                            <TableCell data-testid={`text-item-name-${item.id}`}>\n                              {item.product?.name || \"Unknown\"}\n                            </TableCell>\n                            <TableCell data-testid={`text-item-expected-${item.id}`}>\n                              {item.expectedQuantity}\n                            </TableCell>\n                            <TableCell data-testid={`text-item-actual-${item.id}`}>\n                              {item.actualQuantity}\n                            </TableCell>\n                            <TableCell>\n                              <span\n                                className={`font-medium ${\n                                  item.variance === 0\n                                    ? \"text-green-600 dark:text-green-400\"\n                                    : item.variance > 0\n                                    ? \"text-blue-600 dark:text-blue-400\"\n                                    : \"text-red-600 dark:text-red-400\"\n                                }`}\n                                data-testid={`text-item-variance-${item.id}`}\n                              >\n                                {item.variance > 0 ? \"+\" : \"\"}\n                                {item.variance}\n                              </span>\n                            </TableCell>\n                            <TableCell data-testid={`badge-item-status-${item.id}`}>\n                              {item.status === \"verified\" ? (\n                                <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\">\n                                  Проверено\n                                </Badge>\n                              ) : item.status === \"counted\" ? (\n                                <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100\">\n                                  Подсчитано\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\">Ожидает</Badge>\n                              )}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":31112},"client/src/components/pos/loyalty-program.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Gift, \n  Star, \n  User, \n  CreditCard, \n  Award, \n  TrendingUp, \n  Calendar,\n  Plus,\n  Search,\n  Phone\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst loyaltyCardSchema = z.object({\n  customerPhone: z.string().min(10, \"Введите корректный номер телефона\"),\n  customerName: z.string().min(2, \"Введите имя клиента\"),\n  cardNumber: z.string().optional(),\n});\n\ninterface LoyaltyCustomer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n  cardNumber: string;\n  tier: 'bronze' | 'silver' | 'gold' | 'platinum';\n  totalPoints: number;\n  availablePoints: number;\n  totalSpent: number;\n  registrationDate: Date;\n  lastVisit: Date;\n  transactionCount: number;\n  isActive: boolean;\n}\n\ninterface LoyaltyTransaction {\n  id: string;\n  customerId: string;\n  type: 'earn' | 'redeem' | 'expire' | 'bonus';\n  points: number;\n  description: string;\n  orderId?: string;\n  amount?: number;\n  timestamp: Date;\n}\n\ninterface LoyaltyTier {\n  name: 'bronze' | 'silver' | 'gold' | 'platinum';\n  displayName: string;\n  minSpent: number;\n  pointsMultiplier: number;\n  discountPercent: number;\n  benefits: string[];\n  color: string;\n}\n\nexport default function LoyaltyProgram() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCustomer, setSelectedCustomer] = useState<LoyaltyCustomer | null>(null);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const { t } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof loyaltyCardSchema>>({\n    resolver: zodResolver(loyaltyCardSchema),\n  });\n\n  // Loyalty tiers\n  const loyaltyTiers: LoyaltyTier[] = [\n    {\n      name: 'bronze',\n      displayName: 'Бронзовая',\n      minSpent: 0,\n      pointsMultiplier: 1,\n      discountPercent: 0,\n      benefits: ['Начисление 1 балл за каждые 100₸'],\n      color: 'bg-amber-600'\n    },\n    {\n      name: 'silver',\n      displayName: 'Серебряная',\n      minSpent: 50000,\n      pointsMultiplier: 1.5,\n      discountPercent: 3,\n      benefits: ['Начисление 1.5 балла за каждые 100₸', 'Скидка 3%', 'Приоритетное обслуживание'],\n      color: 'bg-gray-400'\n    },\n    {\n      name: 'gold',\n      displayName: 'Золотая',\n      minSpent: 150000,\n      pointsMultiplier: 2,\n      discountPercent: 5,\n      benefits: ['Начисление 2 балла за каждые 100₸', 'Скидка 5%', 'Персональные предложения', 'Бонусы в день рождения'],\n      color: 'bg-yellow-500'\n    },\n    {\n      name: 'platinum',\n      displayName: 'Платиновая',\n      minSpent: 500000,\n      pointsMultiplier: 3,\n      discountPercent: 10,\n      benefits: ['Начисление 3 балла за каждые 100₸', 'Скидка 10%', 'VIP статус', 'Эксклюзивные мероприятия', 'Персональный менеджер'],\n      color: 'bg-purple-600'\n    }\n  ];\n\n  // Mock data - would be from API in production\n  const loyaltyCustomers: LoyaltyCustomer[] = [\n    {\n      id: '1',\n      name: 'Айгерим Нурланова',\n      phone: '+77771234567',\n      email: 'aigerim@example.com',\n      cardNumber: '4001234567890123',\n      tier: 'gold',\n      totalPoints: 2450,\n      availablePoints: 1850,\n      totalSpent: 185000,\n      registrationDate: new Date('2023-06-15'),\n      lastVisit: new Date('2024-01-25'),\n      transactionCount: 47,\n      isActive: true\n    },\n    {\n      id: '2',\n      name: 'Данияр Касымов',\n      phone: '+77759876543',\n      cardNumber: '4001234567890124',\n      tier: 'silver',\n      totalPoints: 890,\n      availablePoints: 890,\n      totalSpent: 67500,\n      registrationDate: new Date('2023-11-20'),\n      lastVisit: new Date('2024-01-20'),\n      transactionCount: 28,\n      isActive: true\n    },\n    {\n      id: '3',\n      name: 'Сауле Жакупова',\n      phone: '+77751112233',\n      email: 'saule@example.com',\n      cardNumber: '4001234567890125',\n      tier: 'bronze',\n      totalPoints: 345,\n      availablePoints: 245,\n      totalSpent: 23400,\n      registrationDate: new Date('2024-01-05'),\n      lastVisit: new Date('2024-01-24'),\n      transactionCount: 12,\n      isActive: true\n    }\n  ];\n\n  const loyaltyTransactions: LoyaltyTransaction[] = [\n    {\n      id: '1',\n      customerId: '1',\n      type: 'earn',\n      points: 185,\n      description: 'Покупка на сумму ₸18,500',\n      orderId: 'ORD-001',\n      amount: 18500,\n      timestamp: new Date('2024-01-25')\n    },\n    {\n      id: '2',\n      customerId: '1',\n      type: 'redeem',\n      points: -600,\n      description: 'Использование баллов на скидку',\n      orderId: 'ORD-001',\n      timestamp: new Date('2024-01-25')\n    },\n    {\n      id: '3',\n      customerId: '2',\n      type: 'earn',\n      points: 125,\n      description: 'Покупка на сумму ₸12,500',\n      orderId: 'ORD-002',\n      amount: 12500,\n      timestamp: new Date('2024-01-20')\n    }\n  ];\n\n  const addLoyaltyCardMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof loyaltyCardSchema>) => {\n      // Mock API call - would be real in production\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/loyalty/customers\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Карта лояльности создана\",\n        description: \"Новый клиент добавлен в программу лояльности\",\n      });\n    },\n  });\n\n  const findCustomer = (searchTerm: string) => {\n    if (!searchTerm) return null;\n    \n    return loyaltyCustomers.find(\n      customer => \n        customer.phone.includes(searchTerm) ||\n        customer.cardNumber.includes(searchTerm) ||\n        customer.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  };\n\n  const getTierBadge = (tier: LoyaltyCustomer['tier']) => {\n    const tierConfig = loyaltyTiers.find(t => t.name === tier);\n    if (!tierConfig) return null;\n\n    return (\n      <Badge className={`${tierConfig.color} text-white`}>\n        <Star className=\"w-3 h-3 mr-1\" />\n        {tierConfig.displayName}\n      </Badge>\n    );\n  };\n\n  const getNextTier = (customer: LoyaltyCustomer) => {\n    const currentTierIndex = loyaltyTiers.findIndex(t => t.name === customer.tier);\n    if (currentTierIndex === loyaltyTiers.length - 1) return null;\n    \n    const nextTier = loyaltyTiers[currentTierIndex + 1];\n    const remainingAmount = nextTier.minSpent - customer.totalSpent;\n    const progress = (customer.totalSpent / nextTier.minSpent) * 100;\n    \n    return { tier: nextTier, remaining: remainingAmount, progress: Math.min(progress, 100) };\n  };\n\n  const calculatePointsForAmount = (amount: number, tier: LoyaltyCustomer['tier']) => {\n    const tierConfig = loyaltyTiers.find(t => t.name === tier);\n    if (!tierConfig) return 0;\n    \n    return Math.floor((amount / 100) * tierConfig.pointsMultiplier);\n  };\n\n  const filteredCustomers = loyaltyCustomers.filter(customer =>\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.phone.includes(searchTerm) ||\n    customer.cardNumber.includes(searchTerm)\n  );\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Программа лояльности</h1>\n          <div className=\"flex gap-3\">\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Добавить клиента\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Новая карта лояльности</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit((data) => addLoyaltyCardMutation.mutate(data))} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"customerName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Имя клиента</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Введите имя\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"customerPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Телефон</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"+7 777 123 45 67\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"cardNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Номер карты (опционально)</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Будет сгенерирован автоматически\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} className=\"flex-1\">\n                        Отмена\n                      </Button>\n                      <Button type=\"submit\" disabled={addLoyaltyCardMutation.isPending} className=\"flex-1\">\n                        {addLoyaltyCardMutation.isPending ? \"Создание...\" : \"Создать\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Loyalty Program Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Всего участников</CardTitle>\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{loyaltyCustomers.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Активных клиентов</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Всего баллов</CardTitle>\n              <Gift className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {loyaltyCustomers.reduce((sum, c) => sum + c.totalPoints, 0).toLocaleString('ru-RU')}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Начислено клиентам</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Золотые клиенты</CardTitle>\n              <Award className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {loyaltyCustomers.filter(c => c.tier === 'gold' || c.tier === 'platinum').length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">VIP статус</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Средние траты</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {formatCurrency(loyaltyCustomers.reduce((sum, c) => sum + c.totalSpent, 0) / loyaltyCustomers.length)}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">На клиента</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Loyalty Tiers */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Уровни лояльности</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {loyaltyTiers.map((tier) => (\n                <div key={tier.name} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Badge className={`${tier.color} text-white`}>\n                      <Star className=\"w-3 h-3 mr-1\" />\n                      {tier.displayName}\n                    </Badge>\n                    <span className=\"text-sm font-medium\">\n                      {tier.discountPercent > 0 && `-${tier.discountPercent}%`}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    От {formatCurrency(tier.minSpent)}\n                  </p>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    {tier.benefits.map((benefit, index) => (\n                      <li key={index}>• {benefit}</li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Customer Search */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Поиск клиента</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Поиск по телефону, номеру карты или имени...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <Button onClick={() => {\n                const customer = findCustomer(searchTerm);\n                if (customer) {\n                  setSelectedCustomer(customer);\n                } else {\n                  toast({\n                    title: \"Клиент не найден\",\n                    description: \"Попробуйте другой номер телефона или карты\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}>\n                <Search className=\"w-4 h-4 mr-2\" />\n                Найти\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Selected Customer Info */}\n        {selectedCustomer && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Информация о клиенте</span>\n                {getTierBadge(selectedCustomer.tier)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <h3 className=\"font-medium mb-2\">Основная информация</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><span className=\"font-medium\">Имя:</span> {selectedCustomer.name}</div>\n                    <div><span className=\"font-medium\">Телефон:</span> {selectedCustomer.phone}</div>\n                    <div><span className=\"font-medium\">Карта:</span> {selectedCustomer.cardNumber}</div>\n                    <div><span className=\"font-medium\">Регистрация:</span> {formatDate(selectedCustomer.registrationDate)}</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">Статистика</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><span className=\"font-medium\">Всего потрачено:</span> {formatCurrency(selectedCustomer.totalSpent)}</div>\n                    <div><span className=\"font-medium\">Доступно баллов:</span> {selectedCustomer.availablePoints.toLocaleString('ru-RU')}</div>\n                    <div><span className=\"font-medium\">Покупок:</span> {selectedCustomer.transactionCount}</div>\n                    <div><span className=\"font-medium\">Последний визит:</span> {formatDate(selectedCustomer.lastVisit)}</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-medium mb-2\">Прогресс до следующего уровня</h3>\n                  {(() => {\n                    const nextTier = getNextTier(selectedCustomer);\n                    if (!nextTier) {\n                      return <p className=\"text-sm text-muted-foreground\">Максимальный уровень достигнут</p>;\n                    }\n                    return (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>{nextTier.tier.displayName}</span>\n                          <span>{nextTier.progress.toFixed(1)}%</span>\n                        </div>\n                        <Progress value={nextTier.progress} />\n                        <p className=\"text-xs text-muted-foreground\">\n                          Осталось потратить: {formatCurrency(nextTier.remaining)}\n                        </p>\n                      </div>\n                    );\n                  })()}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Customers Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Клиенты программы лояльности</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Клиент</TableHead>\n                  <TableHead>Уровень</TableHead>\n                  <TableHead>Баллы</TableHead>\n                  <TableHead>Всего потрачено</TableHead>\n                  <TableHead>Покупок</TableHead>\n                  <TableHead>Последний визит</TableHead>\n                  <TableHead>Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredCustomers.map((customer) => (\n                  <TableRow key={customer.id}>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium text-card-foreground\">{customer.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{customer.phone}</p>\n                        <p className=\"text-xs text-muted-foreground\">{customer.cardNumber}</p>\n                      </div>\n                    </TableCell>\n                    <TableCell>{getTierBadge(customer.tier)}</TableCell>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium\">{customer.availablePoints.toLocaleString('ru-RU')}</p>\n                        <p className=\"text-xs text-muted-foreground\">из {customer.totalPoints.toLocaleString('ru-RU')}</p>\n                      </div>\n                    </TableCell>\n                    <TableCell>{formatCurrency(customer.totalSpent)}</TableCell>\n                    <TableCell>{customer.transactionCount}</TableCell>\n                    <TableCell className=\"text-muted-foreground\">{formatDate(customer.lastVisit)}</TableCell>\n                    <TableCell>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => setSelectedCustomer(customer)}\n                      >\n                        Подробнее\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":22684},"client/src/components/pos/monitoring-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Activity, \n  Wifi, \n  WifiOff, \n  Server, \n  Database, \n  AlertTriangle, \n  CheckCircle, \n  Clock,\n  Users,\n  CreditCard,\n  Printer,\n  RefreshCw\n} from \"lucide-react\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\n\ninterface SystemStatus {\n  server: 'online' | 'offline' | 'maintenance';\n  database: 'connected' | 'disconnected' | 'slow';\n  fiscalPrinter: 'ready' | 'error' | 'offline';\n  ofdConnection: 'connected' | 'disconnected' | 'synchronizing';\n  internetConnection: 'stable' | 'unstable' | 'offline';\n  lastSync: Date;\n  uptime: number; // in hours\n}\n\ninterface LiveMetrics {\n  activeUsers: number;\n  currentShiftSales: number;\n  transactionsToday: number;\n  averageResponseTime: number;\n  errorRate: number;\n  diskUsage: number;\n  memoryUsage: number;\n  cpuUsage: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: 'sale' | 'return' | 'sync' | 'error' | 'login';\n  message: string;\n  timestamp: Date;\n  severity: 'info' | 'warning' | 'error' | 'success';\n}\n\nexport default function MonitoringDashboard() {\n  const [refreshCount, setRefreshCount] = useState(0);\n  const { t } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n\n  // Mock real-time data - would be from WebSocket/SSE in production\n  const systemStatus: SystemStatus = {\n    server: 'online',\n    database: 'connected',\n    fiscalPrinter: 'ready',\n    ofdConnection: 'connected',\n    internetConnection: 'stable',\n    lastSync: new Date(),\n    uptime: 72.5\n  };\n\n  const liveMetrics: LiveMetrics = {\n    activeUsers: 3,\n    currentShiftSales: 45600 + Math.random() * 1000,\n    transactionsToday: 124,\n    averageResponseTime: 95 + Math.random() * 20,\n    errorRate: 0.02,\n    diskUsage: 67,\n    memoryUsage: 45,\n    cpuUsage: 12 + Math.random() * 15\n  };\n\n  const recentActivity: RecentActivity[] = [\n    {\n      id: '1',\n      type: 'sale',\n      message: 'Продажа на сумму ₸2,450 (Чек #1247)',\n      timestamp: new Date(Date.now() - 2 * 60000),\n      severity: 'success'\n    },\n    {\n      id: '2',\n      type: 'sync',\n      message: 'Синхронизация с ОФД выполнена успешно',\n      timestamp: new Date(Date.now() - 5 * 60000),\n      severity: 'info'\n    },\n    {\n      id: '3',\n      type: 'sale',\n      message: 'Продажа на сумму ₸1,890 (Чек #1246)',\n      timestamp: new Date(Date.now() - 8 * 60000),\n      severity: 'success'\n    },\n    {\n      id: '4',\n      type: 'login',\n      message: 'Пользователь \"Анна Петрова\" вошла в систему',\n      timestamp: new Date(Date.now() - 12 * 60000),\n      severity: 'info'\n    },\n    {\n      id: '5',\n      type: 'error',\n      message: 'Временная проблема с подключением к принтеру (восстановлено)',\n      timestamp: new Date(Date.now() - 18 * 60000),\n      severity: 'warning'\n    }\n  ];\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRefreshCount(prev => prev + 1);\n    }, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'online':\n      case 'connected':\n      case 'ready':\n      case 'stable':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'offline':\n      case 'disconnected':\n      case 'error':\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      case 'maintenance':\n      case 'synchronizing':\n      case 'slow':\n      case 'unstable':\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n      default:\n        return <Activity className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'online':\n      case 'connected':\n      case 'ready':\n      case 'stable':\n        return <Badge className=\"bg-green-100 text-green-800\">Работает</Badge>;\n      case 'offline':\n      case 'disconnected':\n      case 'error':\n        return <Badge variant=\"destructive\">Не работает</Badge>;\n      case 'maintenance':\n      case 'synchronizing':\n      case 'slow':\n      case 'unstable':\n        return <Badge variant=\"secondary\">Проблемы</Badge>;\n      default:\n        return <Badge variant=\"outline\">Неизвестно</Badge>;\n    }\n  };\n\n  const getActivityIcon = (type: RecentActivity['type']) => {\n    switch (type) {\n      case 'sale':\n        return <CreditCard className=\"h-4 w-4 text-green-600\" />;\n      case 'return':\n        return <RefreshCw className=\"h-4 w-4 text-blue-600\" />;\n      case 'sync':\n        return <Database className=\"h-4 w-4 text-blue-600\" />;\n      case 'login':\n        return <Users className=\"h-4 w-4 text-gray-600\" />;\n      case 'error':\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Activity className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const minutes = Math.floor((Date.now() - date.getTime()) / 60000);\n    if (minutes < 1) return 'только что';\n    if (minutes < 60) return `${minutes} мин назад`;\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `${hours} ч назад`;\n    return formatDate(date);\n  };\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Мониторинг системы</h1>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Activity className=\"h-4 w-4\" />\n            Обновлено: {formatDate(new Date())}\n          </div>\n        </div>\n\n        {/* System Status Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Сервер</CardTitle>\n              <Server className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                {getStatusIcon(systemStatus.server)}\n                {getStatusBadge(systemStatus.server)}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Время работы: {systemStatus.uptime.toFixed(1)}ч\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">База данных</CardTitle>\n              <Database className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                {getStatusIcon(systemStatus.database)}\n                {getStatusBadge(systemStatus.database)}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Отклик: {liveMetrics.averageResponseTime.toFixed(0)}мс\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Фискальный принтер</CardTitle>\n              <Printer className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                {getStatusIcon(systemStatus.fiscalPrinter)}\n                {getStatusBadge(systemStatus.fiscalPrinter)}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Очередь: 0 документов\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">ОФД соединение</CardTitle>\n              <Wifi className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                {getStatusIcon(systemStatus.ofdConnection)}\n                {getStatusBadge(systemStatus.ofdConnection)}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Синхр: {formatTimeAgo(systemStatus.lastSync)}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Интернет</CardTitle>\n              {systemStatus.internetConnection === 'offline' ? \n                <WifiOff className=\"h-4 w-4 text-muted-foreground\" /> : \n                <Wifi className=\"h-4 w-4 text-muted-foreground\" />\n              }\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                {getStatusIcon(systemStatus.internetConnection)}\n                {getStatusBadge(systemStatus.internetConnection)}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Пинг: 23мс\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Live Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Активные пользователи</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{liveMetrics.activeUsers}</div>\n              <p className=\"text-xs text-muted-foreground\">В системе сейчас</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Продажи за смену</CardTitle>\n              <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(liveMetrics.currentShiftSales)}</div>\n              <p className=\"text-xs text-muted-foreground\">{liveMetrics.transactionsToday} чеков</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Использование CPU</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{liveMetrics.cpuUsage.toFixed(0)}%</div>\n              <Progress value={liveMetrics.cpuUsage} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Использование памяти</CardTitle>\n              <Server className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{liveMetrics.memoryUsage}%</div>\n              <Progress value={liveMetrics.memoryUsage} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* System Alerts */}\n        {liveMetrics.diskUsage > 80 && (\n          <Alert className=\"mb-6 border-orange-200 bg-orange-50\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Внимание: Дисковое пространство заполнено на {liveMetrics.diskUsage}%. \n              Рекомендуется очистить старые файлы или архивировать данные.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {liveMetrics.errorRate > 0.05 && (\n          <Alert className=\"mb-6 border-red-200 bg-red-50\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Высокий уровень ошибок: {(liveMetrics.errorRate * 100).toFixed(2)}%. \n              Проверьте журналы системы и работу компонентов.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Recent Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Последняя активность</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentActivity.map((activity) => (\n                <div key={activity.id} className=\"flex items-start space-x-3\">\n                  {getActivityIcon(activity.type)}\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-card-foreground\">\n                      {activity.message}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatTimeAgo(activity.timestamp)}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14365},"client/src/components/pos/promotions-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { \n  Plus, \n  Percent, \n  Tag, \n  Calendar as CalendarIcon, \n  Gift, \n  Star,\n  TrendingUp,\n  Users,\n  ShoppingCart,\n  Edit,\n  Trash2\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\nimport { z } from \"zod\";\n\nconst promotionSchema = z.object({\n  name: z.string().min(1, \"Название обязательно\"),\n  description: z.string().optional(),\n  type: z.enum(['percentage', 'fixed_amount', 'buy_x_get_y', '2_for_1', 'loyalty_bonus']),\n  value: z.number().min(0, \"Значение должно быть положительным\"),\n  minAmount: z.number().min(0).optional(),\n  startDate: z.date(),\n  endDate: z.date(),\n  isActive: z.boolean(),\n  applicableCategories: z.array(z.string()).optional(),\n  maxUsage: z.number().min(1).optional(),\n});\n\ninterface Promotion {\n  id: string;\n  name: string;\n  description?: string;\n  type: 'percentage' | 'fixed_amount' | 'buy_x_get_y' | '2_for_1' | 'loyalty_bonus';\n  value: number;\n  minAmount?: number;\n  startDate: Date;\n  endDate: Date;\n  isActive: boolean;\n  applicableCategories?: string[];\n  maxUsage?: number;\n  currentUsage: number;\n  createdAt: Date;\n  createdBy: string;\n}\n\ninterface Coupon {\n  id: string;\n  code: string;\n  promotionId: string;\n  promotion: Promotion;\n  customerId?: string;\n  customerPhone?: string;\n  isUsed: boolean;\n  usedAt?: Date;\n  expiresAt: Date;\n  generatedAt: Date;\n}\n\nexport default function PromotionsTab() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [selectedPromotion, setSelectedPromotion] = useState<Promotion | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { t, language } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof promotionSchema>>({\n    resolver: zodResolver(promotionSchema),\n    defaultValues: {\n      isActive: true,\n      startDate: new Date(),\n      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n    },\n  });\n\n  // Mock data - would be from API in production\n  const promotions: Promotion[] = [\n    {\n      id: '1',\n      name: 'Новогодние скидки 2024',\n      description: 'Скидка 15% на все товары в честь Нового года',\n      type: 'percentage',\n      value: 15,\n      minAmount: 5000,\n      startDate: new Date('2024-01-01'),\n      endDate: new Date('2024-01-15'),\n      isActive: true,\n      maxUsage: 1000,\n      currentUsage: 234,\n      createdAt: new Date('2023-12-20'),\n      createdBy: 'Анна Петрова'\n    },\n    {\n      id: '2',\n      name: 'Скидка на второй товар',\n      description: 'Купите 2 товара - получите скидку 50% на второй',\n      type: 'buy_x_get_y',\n      value: 50,\n      startDate: new Date('2024-01-10'),\n      endDate: new Date('2024-01-31'),\n      isActive: true,\n      applicableCategories: ['cat-1', 'cat-2'],\n      currentUsage: 78,\n      createdAt: new Date('2024-01-05'),\n      createdBy: 'Менеджер'\n    },\n    {\n      id: '3',\n      name: 'Фиксированная скидка ₸1000',\n      description: 'Скидка ₸1,000 при покупке от ₸10,000',\n      type: 'fixed_amount',\n      value: 1000,\n      minAmount: 10000,\n      startDate: new Date('2024-01-15'),\n      endDate: new Date('2024-02-15'),\n      isActive: false,\n      maxUsage: 500,\n      currentUsage: 0,\n      createdAt: new Date('2024-01-10'),\n      createdBy: 'Анна Петрова'\n    },\n    {\n      id: '4',\n      name: 'Двойные баллы лояльности',\n      description: 'Начисление двойных баллов программы лояльности',\n      type: 'loyalty_bonus',\n      value: 2,\n      startDate: new Date('2024-01-20'),\n      endDate: new Date('2024-01-27'),\n      isActive: true,\n      currentUsage: 156,\n      createdAt: new Date('2024-01-18'),\n      createdBy: 'Менеджер'\n    }\n  ];\n\n  const coupons: Coupon[] = [\n    {\n      id: '1',\n      code: 'NY2024-ABC123',\n      promotionId: '1',\n      promotion: promotions[0],\n      customerId: '1',\n      customerPhone: '+77771234567',\n      isUsed: true,\n      usedAt: new Date('2024-01-03'),\n      expiresAt: new Date('2024-01-15'),\n      generatedAt: new Date('2024-01-01')\n    },\n    {\n      id: '2',\n      code: 'NY2024-DEF456',\n      promotionId: '1',\n      promotion: promotions[0],\n      isUsed: false,\n      expiresAt: new Date('2024-01-15'),\n      generatedAt: new Date('2024-01-01')\n    }\n  ];\n\n  const createPromotionMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof promotionSchema>) => {\n      // Mock API call - would be real in production\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/promotions\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Акция создана\",\n        description: \"Новая промо-акция успешно добавлена\",\n      });\n    },\n  });\n\n  const generateCoupons = (promotionId: string, count: number) => {\n    toast({\n      title: \"Создание купонов\",\n      description: `Генерируем ${count} купонов для акции...`,\n    });\n    \n    // Mock coupon generation\n    setTimeout(() => {\n      toast({\n        title: \"Купоны созданы\",\n        description: `Успешно создано ${count} купонов`,\n      });\n    }, 2000);\n  };\n\n  const getPromotionTypeBadge = (type: Promotion['type']) => {\n    const types = {\n      'percentage': { label: 'Процент', color: 'bg-blue-100 text-blue-800' },\n      'fixed_amount': { label: 'Фикс. сумма', color: 'bg-green-100 text-green-800' },\n      'buy_x_get_y': { label: '2-й со скидкой', color: 'bg-purple-100 text-purple-800' },\n      '2_for_1': { label: '2 за 1', color: 'bg-orange-100 text-orange-800' },\n      'loyalty_bonus': { label: 'Бонус лояльности', color: 'bg-yellow-100 text-yellow-800' }\n    };\n    \n    const config = types[type];\n    return <Badge className={config.color}>{config.label}</Badge>;\n  };\n\n  const getStatusBadge = (promotion: Promotion) => {\n    const now = new Date();\n    const isExpired = now > promotion.endDate;\n    const isStarted = now >= promotion.startDate;\n    \n    if (!promotion.isActive) {\n      return <Badge variant=\"secondary\">Отключена</Badge>;\n    }\n    \n    if (isExpired) {\n      return <Badge variant=\"destructive\">Истекла</Badge>;\n    }\n    \n    if (!isStarted) {\n      return <Badge className=\"bg-blue-100 text-blue-800\">Запланирована</Badge>;\n    }\n    \n    return <Badge className=\"bg-green-100 text-green-800\">Активна</Badge>;\n  };\n\n  const getPromotionDescription = (promotion: Promotion) => {\n    switch (promotion.type) {\n      case 'percentage':\n        return `Скидка ${promotion.value}%${promotion.minAmount ? ` при покупке от ${formatCurrency(promotion.minAmount)}` : ''}`;\n      case 'fixed_amount':\n        return `Скидка ${formatCurrency(promotion.value)}${promotion.minAmount ? ` при покупке от ${formatCurrency(promotion.minAmount)}` : ''}`;\n      case 'buy_x_get_y':\n        return `Скидка ${promotion.value}% на второй товар`;\n      case '2_for_1':\n        return 'Два товара по цене одного';\n      case 'loyalty_bonus':\n        return `Баллы лояльности x${promotion.value}`;\n      default:\n        return promotion.description || '';\n    }\n  };\n\n  const filteredPromotions = promotions.filter(promotion =>\n    promotion.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    promotion.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Промо-акции и купоны</h1>\n          <div className=\"flex gap-3\">\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Создать акцию\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Новая промо-акция</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit((data) => createPromotionMutation.mutate(data))} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Название акции</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Например: Скидка 20%\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"type\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Тип акции</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Выберите тип\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"percentage\">Процентная скидка</SelectItem>\n                                <SelectItem value=\"fixed_amount\">Фиксированная скидка</SelectItem>\n                                <SelectItem value=\"buy_x_get_y\">2-й товар со скидкой</SelectItem>\n                                <SelectItem value=\"2_for_1\">2 товара за цену 1</SelectItem>\n                                <SelectItem value=\"loyalty_bonus\">Бонус лояльности</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Описание</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} placeholder=\"Подробное описание акции\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"value\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Значение (% или ₸)</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" {...field} onChange={e => field.onChange(Number(e.target.value))} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"minAmount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Мин. сумма покупки (₸)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                {...field} \n                                onChange={e => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                                value={field.value || ''}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"startDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Дата начала</FormLabel>\n                            <Popover>\n                              <PopoverTrigger asChild>\n                                <FormControl>\n                                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                    {field.value ? format(field.value, \"dd.MM.yyyy\", { locale: ru }) : \"Выберите дату\"}\n                                  </Button>\n                                </FormControl>\n                              </PopoverTrigger>\n                              <PopoverContent className=\"w-auto p-0\">\n                                <Calendar mode=\"single\" selected={field.value} onSelect={field.onChange} />\n                              </PopoverContent>\n                            </Popover>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"endDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Дата окончания</FormLabel>\n                            <Popover>\n                              <PopoverTrigger asChild>\n                                <FormControl>\n                                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                    {field.value ? format(field.value, \"dd.MM.yyyy\", { locale: ru }) : \"Выберите дату\"}\n                                  </Button>\n                                </FormControl>\n                              </PopoverTrigger>\n                              <PopoverContent className=\"w-auto p-0\">\n                                <Calendar mode=\"single\" selected={field.value} onSelect={field.onChange} />\n                              </PopoverContent>\n                            </Popover>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"maxUsage\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Лимит использований</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                {...field} \n                                onChange={e => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                                value={field.value || ''}\n                                placeholder=\"Без лимита\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"isActive\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center space-y-0 gap-2\">\n                            <FormLabel>Активная акция</FormLabel>\n                            <FormControl>\n                              <Switch checked={field.value} onCheckedChange={field.onChange} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} className=\"flex-1\">\n                        Отмена\n                      </Button>\n                      <Button type=\"submit\" disabled={createPromotionMutation.isPending} className=\"flex-1\">\n                        {createPromotionMutation.isPending ? \"Создание...\" : \"Создать акцию\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Promotions Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Активные акции</CardTitle>\n              <Tag className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {promotions.filter(p => p.isActive && new Date() >= p.startDate && new Date() <= p.endDate).length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Действующих сейчас</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Всего использований</CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {promotions.reduce((sum, p) => sum + p.currentUsage, 0)}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Раз применены</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Купоны</CardTitle>\n              <Gift className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{coupons.length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {coupons.filter(c => c.isUsed).length} использовано\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Средняя скидка</CardTitle>\n              <Percent className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">12.5%</div>\n              <p className=\"text-xs text-muted-foreground\">За последний месяц</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <Input\n            placeholder=\"Поиск акций...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-md\"\n          />\n        </div>\n\n        {/* Promotions Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Список промо-акций</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Акция</TableHead>\n                  <TableHead>Тип</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Период</TableHead>\n                  <TableHead>Использования</TableHead>\n                  <TableHead>Создана</TableHead>\n                  <TableHead>Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredPromotions.map((promotion) => (\n                  <TableRow key={promotion.id}>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium text-card-foreground\">{promotion.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {getPromotionDescription(promotion)}\n                        </p>\n                      </div>\n                    </TableCell>\n                    <TableCell>{getPromotionTypeBadge(promotion.type)}</TableCell>\n                    <TableCell>{getStatusBadge(promotion)}</TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        <div>{formatDate(promotion.startDate)}</div>\n                        <div className=\"text-muted-foreground\">{formatDate(promotion.endDate)}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        <div className=\"font-medium\">{promotion.currentUsage}</div>\n                        {promotion.maxUsage && (\n                          <div className=\"text-muted-foreground\">из {promotion.maxUsage}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-muted-foreground\">\n                      {formatDate(promotion.createdAt)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => generateCoupons(promotion.id, 50)}\n                        >\n                          <Gift className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":25371},"client/src/components/pos/reports-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { FileText, Download, Calendar as CalendarIcon, TrendingUp, DollarSign, Users, Package2 } from \"lucide-react\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport { format } from \"date-fns\";\nimport { ru, kk } from \"date-fns/locale\";\n\ninterface ReportData {\n  id: string;\n  type: 'sales' | 'inventory' | 'fiscal' | 'customers' | 'shift';\n  name: string;\n  period: string;\n  generatedAt: Date;\n  status: 'generating' | 'ready' | 'failed';\n  format: 'pdf' | 'xlsx' | 'csv';\n  size?: string;\n}\n\ninterface SalesMetrics {\n  period: string;\n  totalSales: number;\n  transactionCount: number;\n  averageTicket: number;\n  topProducts: { name: string; revenue: number; quantity: number }[];\n  hourlyBreakdown: { hour: number; sales: number }[];\n}\n\nexport default function ReportsTab() {\n  const [dateFrom, setDateFrom] = useState<Date>();\n  const [dateTo, setDateTo] = useState<Date>();\n  const [reportType, setReportType] = useState<string>(\"sales\");\n  const { t, language } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n\n  // Mock data - would be from API in production\n  const reports: ReportData[] = [\n    {\n      id: '1',\n      type: 'sales',\n      name: 'Отчет по продажам за январь 2024',\n      period: '01.01.2024 - 31.01.2024',\n      generatedAt: new Date('2024-02-01'),\n      status: 'ready',\n      format: 'pdf',\n      size: '1.2 MB'\n    },\n    {\n      id: '2',\n      type: 'fiscal',\n      name: 'Фискальный отчет Z-сводка',\n      period: '27.01.2024',\n      generatedAt: new Date('2024-01-27'),\n      status: 'ready',\n      format: 'pdf',\n      size: '245 KB'\n    },\n    {\n      id: '3',\n      type: 'inventory',\n      name: 'Отчет по остаткам товаров',\n      period: 'На 28.01.2024',\n      generatedAt: new Date('2024-01-28'),\n      status: 'generating',\n      format: 'xlsx'\n    }\n  ];\n\n  const salesMetrics: SalesMetrics = {\n    period: 'Январь 2024',\n    totalSales: 1250000,\n    transactionCount: 842,\n    averageTicket: 1485,\n    topProducts: [\n      { name: 'Казахстанский чай', revenue: 125000, quantity: 250 },\n      { name: 'Баурсаки', revenue: 98000, quantity: 327 },\n      { name: 'Кофе арабика', revenue: 87500, quantity: 175 },\n      { name: 'Национальные сладости', revenue: 65000, quantity: 130 },\n      { name: 'Минеральная вода', revenue: 45000, quantity: 450 }\n    ],\n    hourlyBreakdown: [\n      { hour: 9, sales: 45000 },\n      { hour: 10, sales: 67000 },\n      { hour: 11, sales: 89000 },\n      { hour: 12, sales: 125000 },\n      { hour: 13, sales: 156000 },\n      { hour: 14, sales: 134000 },\n      { hour: 15, sales: 112000 },\n      { hour: 16, sales: 98000 },\n      { hour: 17, sales: 145000 },\n      { hour: 18, sales: 167000 },\n      { hour: 19, sales: 143000 },\n      { hour: 20, sales: 89000 }\n    ]\n  };\n\n  const generateReport = (type: string) => {\n    // Mock report generation\n    console.log(`Generating ${type} report`);\n  };\n\n  const getStatusBadge = (status: ReportData['status']) => {\n    switch (status) {\n      case 'ready':\n        return <Badge className=\"bg-green-100 text-green-800\">Готов</Badge>;\n      case 'generating':\n        return <Badge className=\"bg-blue-100 text-blue-800\">Создается</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Ошибка</Badge>;\n    }\n  };\n\n  const getTypeLabel = (type: ReportData['type']) => {\n    switch (type) {\n      case 'sales': return 'Продажи';\n      case 'inventory': return 'Товары';\n      case 'fiscal': return 'Фискальный';\n      case 'customers': return 'Клиенты';\n      case 'shift': return 'Смена';\n    }\n  };\n\n  const maxSales = Math.max(...salesMetrics.hourlyBreakdown.map(h => h.sales));\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Отчеты и аналитика</h1>\n          <Button onClick={() => generateReport(reportType)}>\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Создать отчет\n          </Button>\n        </div>\n\n        {/* Metrics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Общие продажи</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(salesMetrics.totalSales)}</div>\n              <p className=\"text-xs text-muted-foreground\">{salesMetrics.period}</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Количество чеков</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{salesMetrics.transactionCount}</div>\n              <p className=\"text-xs text-muted-foreground\">+12% от прошлого месяца</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Средний чек</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(salesMetrics.averageTicket)}</div>\n              <p className=\"text-xs text-muted-foreground\">+8% от прошлого месяца</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Активные клиенты</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">324</div>\n              <p className=\"text-xs text-muted-foreground\">Уникальные покупатели</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Hourly Sales Chart */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Продажи по часам</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {salesMetrics.hourlyBreakdown.map((item) => (\n                <div key={item.hour} className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 text-sm font-medium\">{item.hour}:00</div>\n                  <div className=\"flex-1 bg-gray-200 rounded-full h-4 relative\">\n                    <div\n                      className=\"bg-blue-600 h-4 rounded-full\"\n                      style={{ width: `${(item.sales / maxSales) * 100}%` }}\n                    />\n                  </div>\n                  <div className=\"w-24 text-sm text-right font-medium\">\n                    {formatCurrency(item.sales)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Top Products */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Топ товары</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Товар</TableHead>\n                  <TableHead>Выручка</TableHead>\n                  <TableHead>Количество</TableHead>\n                  <TableHead>Доля</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {salesMetrics.topProducts.map((product, index) => (\n                  <TableRow key={index}>\n                    <TableCell className=\"font-medium\">{product.name}</TableCell>\n                    <TableCell>{formatCurrency(product.revenue)}</TableCell>\n                    <TableCell>{product.quantity}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-green-600 h-2 rounded-full\"\n                            style={{ width: `${(product.revenue / salesMetrics.totalSales) * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"text-sm\">\n                          {((product.revenue / salesMetrics.totalSales) * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        {/* Report Generation */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Создать новый отчет</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"sales\">Отчет по продажам</SelectItem>\n                  <SelectItem value=\"inventory\">Отчет по товарам</SelectItem>\n                  <SelectItem value=\"fiscal\">Фискальный отчет</SelectItem>\n                  <SelectItem value=\"customers\">Отчет по клиентам</SelectItem>\n                  <SelectItem value=\"shift\">Сменный отчет</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\">\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {dateFrom ? format(dateFrom, \"dd.MM.yyyy\", { locale: language === 'ru' ? ru : kk }) : \"Дата с\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar mode=\"single\" selected={dateFrom} onSelect={setDateFrom} />\n                </PopoverContent>\n              </Popover>\n\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\">\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {dateTo ? format(dateTo, \"dd.MM.yyyy\", { locale: language === 'ru' ? ru : kk }) : \"Дата по\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar mode=\"single\" selected={dateTo} onSelect={setDateTo} />\n                </PopoverContent>\n              </Popover>\n\n              <Button onClick={() => generateReport(reportType)}>\n                Создать отчет\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Generated Reports */}\n        <Card>\n          <CardHeader>\n            <CardTitle>История отчетов</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Отчет</TableHead>\n                  <TableHead>Тип</TableHead>\n                  <TableHead>Период</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Создан</TableHead>\n                  <TableHead>Размер</TableHead>\n                  <TableHead>Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {reports.map((report) => (\n                  <TableRow key={report.id}>\n                    <TableCell className=\"font-medium\">{report.name}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{getTypeLabel(report.type)}</Badge>\n                    </TableCell>\n                    <TableCell>{report.period}</TableCell>\n                    <TableCell>{getStatusBadge(report.status)}</TableCell>\n                    <TableCell>{formatDate(report.generatedAt)}</TableCell>\n                    <TableCell>{report.size || '-'}</TableCell>\n                    <TableCell>\n                      {report.status === 'ready' && (\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14142},"client/src/components/pos/write-offs-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Plus, Trash2, AlertCircle, Calendar, TrendingDown, Package, CheckCircle } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLanguage } from \"@/i18n/LanguageContext\";\nimport { useFormatters } from \"@/i18n/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertWriteOffSchema } from \"@shared/schema\";\nimport type { ProductWithCategory, WriteOffWithProduct } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst writeOffFormSchema = insertWriteOffSchema.extend({\n  productId: z.string().min(1, \"Выберите товар\"),\n  quantity: z.number().min(1, \"Количество должно быть положительным\"),\n}).omit({ createdBy: true, cost: true });\n\nexport default function WriteOffsTab() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterReason, setFilterReason] = useState<string>(\"all\");\n  const { t } = useLanguage();\n  const { formatCurrency, formatDate } = useFormatters();\n  const { toast } = useToast();\n  const userId = useSessionStore((state) => state.userId);\n\n  const { data: session } = useQuery<{ user?: { id: string; username: string; role: string } }>({\n    queryKey: [\"/api/auth/session\"],\n  });\n\n  const isAdmin = session?.user?.role === \"admin\";\n\n  const form = useForm<z.infer<typeof writeOffFormSchema>>({\n    resolver: zodResolver(writeOffFormSchema),\n    defaultValues: {\n      productId: \"\",\n      quantity: 1,\n      reason: \"expired\",\n      notes: \"\",\n      approved: false,\n    },\n  });\n\n  const { data: writeOffs = [], isLoading: isLoadingWriteOffs } = useQuery<WriteOffWithProduct[]>({\n    queryKey: [\"/api/write-offs\"],\n  });\n\n  const { data: products = [] } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const writeOffMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof writeOffFormSchema>) => {\n      const product = products.find((p) => p.id === data.productId);\n      if (!product) {\n        throw new Error(\"Товар не найден\");\n      }\n\n      const cost = parseFloat(product.price) * data.quantity;\n\n      const writeOffData = {\n        ...data,\n        createdBy: userId,\n        cost: cost.toString(),\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/write-offs\", writeOffData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/write-offs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: t.common.success,\n        description: \"Списание успешно создано\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось создать списание\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"PUT\", `/api/write-offs/${id}/approve`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/write-offs\"] });\n      toast({\n        title: t.common.success,\n        description: \"Списание одобрено\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось одобрить списание\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reasonLabels = {\n    expired: \"Просрочен\",\n    damaged: \"Поврежден\",\n    theft: \"Кража\",\n    loss: \"Потеря\",\n    defective: \"Брак\",\n    other: \"Другое\",\n  };\n\n  const filteredWriteOffs = writeOffs.filter((writeOff) => {\n    const matchesSearch =\n      writeOff.product?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      writeOff.product?.sku?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesReason = filterReason === \"all\" || writeOff.reason === filterReason;\n    return matchesSearch && matchesReason;\n  });\n\n  const getReasonBadge = (reason: string) => {\n    const colors: Record<string, string> = {\n      expired: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100\",\n      damaged: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-100\",\n      theft: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100\",\n      loss: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100\",\n      defective: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-100\",\n      other: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100\",\n    };\n\n    return (\n      <Badge className={colors[reason] || colors.other} data-testid={`badge-reason-${reason}`}>\n        {reasonLabels[reason as keyof typeof reasonLabels] || reason}\n      </Badge>\n    );\n  };\n\n  const totalWriteOffValue = writeOffs\n    .filter((wo) => filterReason === \"all\" || wo.reason === filterReason)\n    .reduce((sum, wo) => sum + parseFloat(wo.cost || \"0\"), 0);\n\n  const todayWriteOffs = writeOffs.filter(\n    (wo) => new Date(wo.createdAt).toDateString() === new Date().toDateString()\n  ).length;\n\n  const pendingApproval = writeOffs.filter((wo) => !wo.approved).length;\n\n  const reasonCounts = writeOffs.reduce((acc, wo) => {\n    acc[wo.reason] = (acc[wo.reason] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const topReason =\n    Object.entries(reasonCounts).sort((a, b) => b[1] - a[1])[0] || [];\n  const topReasonLabel = topReason[0]\n    ? reasonLabels[topReason[0] as keyof typeof reasonLabels]\n    : \"N/A\";\n  const topReasonPercent = topReason[1]\n    ? Math.round((topReason[1] / writeOffs.length) * 100)\n    : 0;\n\n  return (\n    <div className=\"flex-1 p-6\" data-testid=\"write-offs-tab\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Списания товаров</h1>\n          <div className=\"flex gap-3\">\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-writeoff\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Новое списание\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Списание товара</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form\n                    onSubmit={form.handleSubmit((data) => writeOffMutation.mutate(data))}\n                    className=\"space-y-4\"\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"productId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Товар</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-product\">\n                                <SelectValue placeholder=\"Выберите товар\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {products.map((product) => (\n                                <SelectItem key={product.id} value={product.id}>\n                                  {product.name} ({product.sku})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"quantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Количество</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              data-testid=\"input-quantity\"\n                              {...field}\n                              onChange={(e) => field.onChange(Number(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"reason\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Причина списания</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-reason\">\n                                <SelectValue placeholder=\"Выберите причину\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {Object.entries(reasonLabels).map(([value, label]) => (\n                                <SelectItem key={value} value={value}>\n                                  {label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Примечание</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              data-testid=\"input-notes\"\n                              {...field}\n                              value={field.value || \"\"}\n                              placeholder=\"Дополнительная информация...\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsAddDialogOpen(false)}\n                        className=\"flex-1\"\n                        data-testid=\"button-cancel\"\n                      >\n                        {t.common.cancel}\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={writeOffMutation.isPending}\n                        className=\"flex-1\"\n                        data-testid=\"button-submit\"\n                      >\n                        {writeOffMutation.isPending ? \"Списание...\" : \"Списать\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card data-testid=\"card-today-writeoffs\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Сегодня списано</CardTitle>\n              <Trash2 className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingWriteOffs ? (\n                <Skeleton className=\"h-8 w-16\" />\n              ) : (\n                <>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-today-count\">\n                    {todayWriteOffs}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">товарных позиций</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-total-value\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Стоимость списаний</CardTitle>\n              <TrendingDown className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingWriteOffs ? (\n                <Skeleton className=\"h-8 w-24\" />\n              ) : (\n                <>\n                  <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-value\">\n                    {formatCurrency(totalWriteOffValue)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">За текущий месяц</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-pending-approval\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">На утверждении</CardTitle>\n              <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingWriteOffs ? (\n                <Skeleton className=\"h-8 w-16\" />\n              ) : (\n                <>\n                  <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-pending-count\">\n                    {pendingApproval}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Ожидает подтверждения</p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n          <Card data-testid=\"card-top-reason\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Основная причина</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {isLoadingWriteOffs ? (\n                <Skeleton className=\"h-8 w-24\" />\n              ) : (\n                <>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-top-reason\">\n                    {topReasonLabel}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {topReasonPercent}% от всех списаний\n                  </p>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex gap-4 mb-6\">\n          <Input\n            placeholder=\"Поиск по товарам или SKU...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"max-w-md\"\n            data-testid=\"input-search\"\n          />\n          <Select value={filterReason} onValueChange={setFilterReason}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-filter-reason\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Все причины</SelectItem>\n              {Object.entries(reasonLabels).map(([value, label]) => (\n                <SelectItem key={value} value={value}>\n                  {label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Write-offs Table */}\n        <Card data-testid=\"card-writeoffs-table\">\n          <CardHeader>\n            <CardTitle>История списаний</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoadingWriteOffs ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-12 w-full\" />\n                ))}\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Товар</TableHead>\n                    <TableHead>Количество</TableHead>\n                    <TableHead>Причина</TableHead>\n                    <TableHead>Стоимость</TableHead>\n                    <TableHead>Статус</TableHead>\n                    <TableHead>Дата</TableHead>\n                    <TableHead>Списал</TableHead>\n                    {isAdmin && <TableHead>Действия</TableHead>}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredWriteOffs.length === 0 ? (\n                    <TableRow>\n                      <TableCell\n                        colSpan={isAdmin ? 8 : 7}\n                        className=\"text-center text-muted-foreground\"\n                        data-testid=\"text-no-writeoffs\"\n                      >\n                        Нет списаний\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredWriteOffs.map((writeOff) => (\n                      <TableRow key={writeOff.id} data-testid={`row-writeoff-${writeOff.id}`}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium text-card-foreground\" data-testid={`text-product-name-${writeOff.id}`}>\n                              {writeOff.product?.name || \"N/A\"}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`text-product-sku-${writeOff.id}`}>\n                              {writeOff.product?.sku || \"N/A\"}\n                            </p>\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-quantity-${writeOff.id}`}>\n                          {writeOff.quantity}\n                        </TableCell>\n                        <TableCell>{getReasonBadge(writeOff.reason)}</TableCell>\n                        <TableCell className=\"font-semibold text-red-600\" data-testid={`text-cost-${writeOff.id}`}>\n                          {formatCurrency(parseFloat(writeOff.cost || \"0\"))}\n                        </TableCell>\n                        <TableCell>\n                          {writeOff.approved ? (\n                            <Badge\n                              className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\"\n                              data-testid={`badge-status-approved-${writeOff.id}`}\n                            >\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Утверждено\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\" data-testid={`badge-status-pending-${writeOff.id}`}>\n                              На рассмотрении\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell data-testid={`text-date-${writeOff.id}`}>\n                          {formatDate(new Date(writeOff.createdAt))}\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\" data-testid={`text-created-by-${writeOff.id}`}>\n                          {writeOff.createdByUser?.username || \"N/A\"}\n                        </TableCell>\n                        {isAdmin && (\n                          <TableCell>\n                            {!writeOff.approved && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => approveMutation.mutate(writeOff.id)}\n                                disabled={approveMutation.isPending}\n                                data-testid={`button-approve-${writeOff.id}`}\n                              >\n                                {approveMutation.isPending ? \"...\" : \"Одобрить\"}\n                              </Button>\n                            )}\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22144},"client/src/domain/cart.ts":{"content":"import type { Product } from \"@shared/schema\";\n\nexport interface CartItem {\n  id: string;\n  sku: string;\n  name: string;\n  price: string;\n  stock: number;\n  quantity: number;\n}\n\nexport interface CartSummary {\n  subtotal: number;\n  tax: number;\n  total: number;\n  itemCount: number;\n}\n\n// Pure functions for cart operations\n\n/**\n * Add item to cart immutably\n */\nexport const addItemToCart = (cart: CartItem[], newItem: Omit<CartItem, 'quantity'>): CartItem[] => {\n  const existingItemIndex = cart.findIndex(item => item.id === newItem.id);\n  \n  if (existingItemIndex >= 0) {\n    const existingItem = cart[existingItemIndex];\n    if (existingItem.quantity >= newItem.stock) {\n      return cart; // Cannot add more items than stock\n    }\n    \n    return cart.map((item, index) =>\n      index === existingItemIndex\n        ? { ...item, quantity: item.quantity + 1 }\n        : item\n    );\n  }\n  \n  return [...cart, { ...newItem, quantity: 1 }];\n};\n\n/**\n * Remove item from cart immutably\n */\nexport const removeItemFromCart = (cart: CartItem[], itemId: string): CartItem[] =>\n  cart.filter(item => item.id !== itemId);\n\n/**\n * Update item quantity immutably\n */\nexport const updateItemQuantity = (cart: CartItem[], itemId: string, quantity: number): CartItem[] => {\n  if (quantity <= 0) {\n    return removeItemFromCart(cart, itemId);\n  }\n  \n  return cart.map(item =>\n    item.id === itemId\n      ? { ...item, quantity: Math.min(quantity, item.stock) }\n      : item\n  );\n};\n\n/**\n * Clear cart\n */\nexport const clearCart = (): CartItem[] => [];\n\n/**\n * Calculate cart totals\n */\nexport const calculateCartSummary = (cart: CartItem[], taxRate: number = 0.12): CartSummary => {\n  const subtotal = cart.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);\n  const tax = subtotal * taxRate;\n  const total = subtotal + tax;\n  const itemCount = cart.reduce((sum, item) => sum + item.quantity, 0);\n  \n  return {\n    subtotal: Math.round(subtotal * 100) / 100,\n    tax: Math.round(tax * 100) / 100,\n    total: Math.round(total * 100) / 100,\n    itemCount\n  };\n};\n\n/**\n * Check if cart is empty\n */\nexport const isCartEmpty = (cart: CartItem[]): boolean => cart.length === 0;\n\n/**\n * Get cart item by ID\n */\nexport const getCartItem = (cart: CartItem[], itemId: string): CartItem | undefined =>\n  cart.find(item => item.id === itemId);\n\n/**\n * Convert Product to CartItem\n */\nexport const productToCartItem = (product: Product): Omit<CartItem, 'quantity'> => ({\n  id: product.id,\n  sku: product.sku,\n  name: product.name,\n  price: product.price,\n  stock: product.stock\n});","size_bytes":2578},"client/src/domain/navigation.ts":{"content":"import { ReactNode } from \"react\";\nimport { \n  ShoppingCart, \n  Package, \n  Users, \n  RotateCcw, \n  Clock, \n  BarChart3, \n  Settings,\n  User,\n  Inbox,\n  ListChecks,\n  FileText\n} from \"lucide-react\";\n\n// Tab configuration interface\nexport interface TabConfig {\n  id: string;\n  labelKey: string;\n  icon: React.ComponentType<any>;\n  component: React.ComponentType<any>;\n  roles?: string[];\n  hidden?: boolean;\n}\n\n// Modal configuration interface\nexport interface ModalConfig {\n  id: string;\n  component: React.ComponentType<any>;\n  persistent?: boolean;\n}\n\n// Navigation state interface\nexport interface NavigationState {\n  activeTab: string;\n  openModals: string[];\n  sidebarCollapsed: boolean;\n}\n\n// Pure functions for navigation\n\n/**\n * Get filtered tabs based on user role and visibility\n */\nexport const getVisibleTabs = (\n  tabs: TabConfig[], \n  userRole?: string\n): TabConfig[] => {\n  return tabs.filter(tab => {\n    if (tab.hidden) return false;\n    if (!tab.roles || tab.roles.length === 0) return true;\n    return userRole && tab.roles.includes(userRole);\n  });\n};\n\n/**\n * Find tab by ID\n */\nexport const findTab = (tabs: TabConfig[], tabId: string): TabConfig | undefined => {\n  return tabs.find(tab => tab.id === tabId);\n};\n\n/**\n * Get next/previous tab in sequence\n */\nexport const getAdjacentTab = (\n  tabs: TabConfig[], \n  currentTabId: string, \n  direction: 'next' | 'prev'\n): TabConfig | null => {\n  const visibleTabs = getVisibleTabs(tabs);\n  const currentIndex = visibleTabs.findIndex(tab => tab.id === currentTabId);\n  \n  if (currentIndex === -1) return null;\n  \n  const nextIndex = direction === 'next' \n    ? (currentIndex + 1) % visibleTabs.length\n    : (currentIndex - 1 + visibleTabs.length) % visibleTabs.length;\n  \n  return visibleTabs[nextIndex] || null;\n};\n\n/**\n * Check if tab is active\n */\nexport const isTabActive = (tabId: string, activeTab: string): boolean => {\n  return tabId === activeTab;\n};\n\n/**\n * Add modal to open modals list\n */\nexport const openModal = (openModals: string[], modalId: string): string[] => {\n  return openModals.includes(modalId) ? openModals : [...openModals, modalId];\n};\n\n/**\n * Remove modal from open modals list\n */\nexport const closeModal = (openModals: string[], modalId: string): string[] => {\n  return openModals.filter(id => id !== modalId);\n};\n\n/**\n * Check if modal is open\n */\nexport const isModalOpen = (openModals: string[], modalId: string): boolean => {\n  return openModals.includes(modalId);\n};\n\n/**\n * Close all non-persistent modals\n */\nexport const closeAllModals = (\n  openModals: string[], \n  modalConfigs: ModalConfig[]\n): string[] => {\n  return openModals.filter(modalId => {\n    const config = modalConfigs.find(c => c.id === modalId);\n    return config?.persistent === true;\n  });\n};\n\n/**\n * Toggle sidebar collapsed state\n */\nexport const toggleSidebar = (collapsed: boolean): boolean => !collapsed;\n\n/**\n * Create initial navigation state\n */\nexport const createInitialNavigationState = (defaultTab: string = 'sales'): NavigationState => ({\n  activeTab: defaultTab,\n  openModals: [],\n  sidebarCollapsed: false\n});\n\n/**\n * Update navigation state immutably\n */\nexport const updateNavigationState = (\n  state: NavigationState,\n  updates: Partial<NavigationState>\n): NavigationState => ({\n  ...state,\n  ...updates\n});","size_bytes":3300},"client/src/domain/payment.ts":{"content":"import type { CartItem, CartSummary } from \"./cart\";\nimport type { Transaction, TransactionItem, InsertTransaction, InsertTransactionItem } from \"@shared/schema\";\n\nexport type PaymentMethod = 'cash' | 'card';\n\nexport interface PaymentRequest {\n  method: PaymentMethod;\n  amount: number;\n  receivedAmount?: number;\n}\n\nexport interface PaymentResult {\n  success: boolean;\n  changeAmount?: number;\n  error?: string;\n}\n\nexport interface TransactionBuilder {\n  receiptNumber: string;\n  shiftId: string;\n  customerId?: string;\n  userId: string;\n  subtotal: number;\n  tax: number;\n  total: number;\n  paymentMethod: PaymentMethod;\n  receivedAmount?: number;\n  changeAmount?: number;\n  items: CartItem[];\n}\n\n// Pure functions for payment operations\n\n/**\n * Validate payment amount\n */\nexport const validatePayment = (payment: PaymentRequest, totalAmount: number): PaymentResult => {\n  if (payment.method === 'card') {\n    return { success: true };\n  }\n  \n  if (payment.method === 'cash') {\n    const receivedAmount = payment.receivedAmount ?? payment.amount;\n    \n    if (receivedAmount < totalAmount) {\n      return {\n        success: false,\n        error: 'Недостаточная сумма наличных'\n      };\n    }\n    \n    const changeAmount = receivedAmount - totalAmount;\n    return {\n      success: true,\n      changeAmount: Math.round(changeAmount * 100) / 100\n    };\n  }\n  \n  return {\n    success: false,\n    error: 'Неподдерживаемый способ оплаты'\n  };\n};\n\n/**\n * Generate receipt number\n */\nexport const generateReceiptNumber = (): string => {\n  const timestamp = Date.now();\n  const random = Math.floor(Math.random() * 1000);\n  return `RCP-${timestamp}-${random.toString().padStart(3, '0')}`;\n};\n\n/**\n * Build transaction from cart and payment data\n */\nexport const buildTransaction = (\n  cart: CartItem[],\n  summary: CartSummary,\n  payment: PaymentRequest,\n  paymentResult: PaymentResult,\n  context: {\n    shiftId: string;\n    userId: string;\n    customerId?: string;\n  }\n): TransactionBuilder => {\n  return {\n    receiptNumber: generateReceiptNumber(),\n    shiftId: context.shiftId,\n    customerId: context.customerId,\n    userId: context.userId,\n    subtotal: summary.subtotal,\n    tax: summary.tax,\n    total: summary.total,\n    paymentMethod: payment.method,\n    receivedAmount: payment.receivedAmount,\n    changeAmount: paymentResult.changeAmount,\n    items: [...cart] // immutable copy\n  };\n};\n\n/**\n * Convert TransactionBuilder to InsertTransaction\n */\nexport const transactionBuilderToInsert = (builder: TransactionBuilder): InsertTransaction => ({\n  receiptNumber: builder.receiptNumber,\n  shiftId: builder.shiftId,\n  customerId: builder.customerId || null,\n  userId: builder.userId,\n  subtotal: builder.subtotal.toString(),\n  tax: builder.tax.toString(),\n  total: builder.total.toString(),\n  paymentMethod: builder.paymentMethod,\n  receivedAmount: builder.receivedAmount?.toString(),\n  changeAmount: builder.changeAmount?.toString(),\n  status: 'completed',\n  isOffline: false\n});\n\n/**\n * Convert cart items to transaction items\n */\nexport const cartItemsToTransactionItems = (\n  cart: CartItem[],\n  transactionId: string\n): InsertTransactionItem[] => {\n  return cart.map(item => ({\n    transactionId,\n    productId: item.id,\n    quantity: item.quantity,\n    unitPrice: item.price,\n    totalPrice: (parseFloat(item.price) * item.quantity).toString()\n  }));\n};\n\n/**\n * Calculate refund amount for return\n */\nexport const calculateRefundAmount = (\n  originalItems: TransactionItem[],\n  returnItems: { productId: string; quantity: number }[]\n): number => {\n  return returnItems.reduce((total, returnItem) => {\n    const originalItem = originalItems.find(item => item.productId === returnItem.productId);\n    if (!originalItem) return total;\n    \n    const unitPrice = parseFloat(originalItem.unitPrice);\n    const refundQuantity = Math.min(returnItem.quantity, originalItem.quantity);\n    \n    return total + (unitPrice * refundQuantity);\n  }, 0);\n};\n\n/**\n * Validate return request\n */\nexport const validateReturn = (\n  originalItems: TransactionItem[],\n  returnItems: { productId: string; quantity: number }[]\n): { success: boolean; error?: string } => {\n  for (const returnItem of returnItems) {\n    const originalItem = originalItems.find(item => item.productId === returnItem.productId);\n    \n    if (!originalItem) {\n      return {\n        success: false,\n        error: `Товар с ID ${returnItem.productId} не найден в оригинальной транзакции`\n      };\n    }\n    \n    if (returnItem.quantity > originalItem.quantity) {\n      return {\n        success: false,\n        error: `Количество для возврата превышает оригинальное количество`\n      };\n    }\n    \n    if (returnItem.quantity <= 0) {\n      return {\n        success: false,\n        error: `Неверное количество для возврата`\n      };\n    }\n  }\n  \n  return { success: true };\n};","size_bytes":5004},"client/src/hooks/use-pos-mutations.ts":{"content":"import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { usePOSStore } from './use-pos-store';\nimport { \n  buildTransaction, \n  transactionBuilderToInsert, \n  cartItemsToTransactionItems,\n  type PaymentRequest \n} from '@/domain/payment';\nimport type { TransactionWithItems } from '@shared/schema';\n\n/**\n * Separate hook for POS mutations following functional programming principles\n * Side effects are isolated from pure state management\n */\nexport const usePOSMutations = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { \n    prepareTransaction, \n    validatePaymentRequest, \n    clearCart, \n    closePaymentModal, \n    openReceiptModal \n  } = usePOSStore();\n\n  const createTransactionMutation = useMutation({\n    mutationFn: async (payment: PaymentRequest) => {\n      // Get transaction data from store\n      const transactionData = prepareTransaction();\n      if (!transactionData) {\n        throw new Error('Откройте смену, чтобы продолжить оплату');\n      }\n\n      // Validate payment\n      const paymentResult = validatePaymentRequest(payment);\n      if (!paymentResult.success) {\n        throw new Error(paymentResult.error || 'Ошибка валидации платежа');\n      }\n\n      // Build transaction using pure functions\n      const transactionBuilder = buildTransaction(\n        transactionData.cart,\n        transactionData.summary,\n        payment,\n        paymentResult,\n        transactionData.context\n      );\n\n      // Convert to API format\n      const transactionInsert = transactionBuilderToInsert(transactionBuilder);\n      \n      // Make API call\n      const response = await apiRequest('POST', '/api/transactions', {\n        transaction: transactionInsert,\n        items: cartItemsToTransactionItems(transactionBuilder.items, 'temp-id')\n      });\n      \n      return response.json();\n    },\n    onSuccess: (transaction: TransactionWithItems) => {\n      // Clear cart and close modal using pure actions\n      clearCart();\n      closePaymentModal();\n      \n      // Open receipt modal\n      openReceiptModal(transaction);\n      \n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });\n      \n      toast({\n        title: 'Успех',\n        description: 'Транзакция завершена успешно',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Ошибка',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const createReturnMutation = useMutation({\n    mutationFn: async ({ \n      originalTransactionId, \n      returnItems, \n      reason \n    }: {\n      originalTransactionId: string;\n      returnItems: { productId: string; quantity: number }[];\n      reason?: string;\n    }) => {\n      const response = await apiRequest('POST', '/api/returns', {\n        originalTransactionId,\n        returnItems,\n        reason,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/returns'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      \n      toast({\n        title: 'Успех',\n        description: 'Возврат оформлен успешно',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Ошибка',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  return {\n    createTransaction: createTransactionMutation,\n    createReturn: createReturnMutation,\n  };\n};","size_bytes":3865},"client/src/hooks/use-session-store.ts":{"content":"import { create } from 'zustand';\nimport type { Shift } from '@shared/schema';\n\ninterface SessionStore {\n  userId: string;\n  currentShift: Shift | null;\n  setUserId: (userId: string) => void;\n  setCurrentShift: (shift: Shift | null) => void;\n}\n\nexport const useSessionStore = create<SessionStore>((set) => ({\n  userId: '',\n  currentShift: null,\n  setUserId: (userId) => set({ userId }),\n  setCurrentShift: (shift) => set({ currentShift: shift }),\n}));\n","size_bytes":452},"client/src/hooks/use-sync-current-shift.ts":{"content":"import { useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useSessionStore } from './use-session-store';\nimport type { Shift } from '@shared/schema';\n\n/**\n * Hook to sync current shift from backend to session store\n * Should be mounted once at the POS page level\n */\nexport const useSyncCurrentShift = () => {\n  const { userId, setCurrentShift } = useSessionStore();\n\n  const { data: currentShift } = useQuery<Shift | null>({\n    queryKey: ['/api/shifts/current', userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/shifts/current/${userId}`);\n      if (!response.ok) {\n        if (response.status === 404 || response.status === 204) {\n          return null;\n        }\n        throw new Error('Failed to fetch current shift');\n      }\n      const data = await response.json();\n      return data || null;\n    },\n  });\n\n  useEffect(() => {\n    setCurrentShift(currentShift || null);\n  }, [currentShift, setCurrentShift]);\n\n  return currentShift;\n};\n","size_bytes":1007},"server/seed.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { users, categories, products } from \"@shared/schema\";\nimport ws from \"ws\";\nimport bcrypt from \"bcrypt\";\n\nconst db = drizzle({\n  connection: process.env.DATABASE_URL!,\n  ws: ws,\n});\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  const existingCategories = await db.select().from(categories);\n  if (existingCategories.length > 0) {\n    console.log(\"Database already seeded. Skipping...\");\n    return;\n  }\n\n  const [beverages, pastry, snacks] = await db.insert(categories).values([\n    {\n      name: \"Напитки\",\n      description: \"Горячие и холодные напитки\"\n    },\n    {\n      name: \"Выпечка\",\n      description: \"Свежая выпечка и десерты\"\n    },\n    {\n      name: \"Закуски\",\n      description: \"Легкие закуски и снеки\"\n    }\n  ]).returning();\n\n  await db.insert(products).values([\n    {\n      sku: \"ESP001\",\n      name: \"Эспрессо\",\n      description: \"Классический эспрессо\",\n      price: \"120.00\",\n      stock: 25,\n      categoryId: beverages.id,\n      isActive: true,\n    },\n    {\n      sku: \"CRS001\",\n      name: \"Круассан\",\n      description: \"Французский круассан с маслом\",\n      price: \"180.00\",\n      stock: 12,\n      categoryId: pastry.id,\n      isActive: true,\n    },\n    {\n      sku: \"JCE001\",\n      name: \"Сок апельсиновый\",\n      description: \"Свежевыжатый апельсиновый сок\",\n      price: \"150.00\",\n      stock: 8,\n      categoryId: beverages.id,\n      isActive: true,\n    },\n    {\n      sku: \"SND001\",\n      name: \"Сэндвич с курицей\",\n      description: \"Сэндвич с жареной курицей и овощами\",\n      price: \"320.00\",\n      stock: 6,\n      categoryId: snacks.id,\n      isActive: true,\n    },\n    {\n      sku: \"ICE001\",\n      name: \"Мороженое ванильное\",\n      description: \"Классическое ванильное мороженое\",\n      price: \"95.00\",\n      stock: 15,\n      categoryId: pastry.id,\n      isActive: true,\n    },\n    {\n      sku: \"WTR001\",\n      name: \"Вода минеральная\",\n      description: \"Минеральная вода без газа\",\n      price: \"60.00\",\n      stock: 30,\n      categoryId: beverages.id,\n      isActive: true,\n    }\n  ]);\n\n  const hashedPasswordCashier = await bcrypt.hash(\"password\", 10);\n  const hashedPasswordAdmin = await bcrypt.hash(\"admin123\", 10);\n  \n  await db.insert(users).values([\n    {\n      username: \"cashier\",\n      password: hashedPasswordCashier,\n      role: \"cashier\",\n      email: \"cashier@pos.local\"\n    },\n    {\n      username: \"admin\",\n      password: hashedPasswordAdmin,\n      role: \"admin\",\n      email: \"admin@pos.local\"\n    }\n  ]);\n\n  console.log(\"Database seeded successfully!\");\n}\n\nseed()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"Error seeding database:\", error);\n    process.exit(1);\n  });\n","size_bytes":3058},"BUG_REPORT.md":{"content":"# Отчет по найденным и исправленным ошибкам в POS System\n\n**Дата:** 02.10.2025  \n**Статус:** ✅ Исправлено\n\n---\n\n## 🔴 КРИТИЧЕСКАЯ ОШИБКА #1: Отсутствие UI для аутентификации\n\n### Описание проблемы\nСистема имела полнофункциональный backend аутентификации (Passport.js, bcrypt, express-session), но **полностью отсутствовал фронтенд для входа в систему**:\n- ❌ Нет страницы логина\n- ❌ Нет защищенных маршрутов\n- ❌ Нет кнопки выхода\n- ❌ Нет проверки сессии пользователя\n\n### Последствия\nПриложение было полностью недоступно для использования - нет способа войти в систему.\n\n### Решение\n**Созданы файлы:**\n1. `client/src/pages/login.tsx` - Страница входа с формой аутентификации\n2. Обновлен `client/src/App.tsx` - Добавлен компонент `ProtectedRoute` с проверкой сессии\n3. Обновлен `client/src/components/pos/sidebar.tsx` - Добавлена кнопка выхода\n\n**Реализовано:**\n- ✅ Полная форма входа с валидацией\n- ✅ Проверка сессии при каждом переходе на защищенные страницы\n- ✅ Автоматический редирект на `/login` для неавторизованных пользователей\n- ✅ Функция выхода с очисткой сессии и кэша\n- ✅ Показ учетных данных по умолчанию (username: `cashier`, password: `password`)\n\n---\n\n## 🟡 ОШИБКА #2: Мутация состояния во время рендера (React anti-pattern)\n\n### Описание проблемы\nВ компоненте `ProtectedRoute` вызов `setUserId` происходил **во время рендера**, а не в `useEffect`:\n\n```typescript\n// ❌ НЕПРАВИЛЬНО - вызов во время рендера\nif (session.user && session.user.id) {\n  setUserId(session.user.id);\n}\n```\n\n### Последствия\n- React warning о мутации состояния во время рендера\n- Возможные циклы повторного рендера\n- Непредсказуемое поведение при обновлении компонента\n\n### Решение\n```typescript\n// ✅ ПРАВИЛЬНО - вызов в useEffect\nuseEffect(() => {\n  if (session?.user?.id) {\n    setUserId(session.user.id);\n  }\n}, [session, setUserId]);\n```\n\n---\n\n## 🟡 ОШИБКА #3: Неполная очистка состояния при выходе\n\n### Описание проблемы\nФункция logout очищала только React Query кэш, но **не очищала Zustand store** (`useSessionStore`), оставляя устаревшие данные:\n\n```typescript\n// ❌ НЕПРАВИЛЬНО - только очистка кэша\nawait apiRequest(\"POST\", \"/api/auth/logout\", {});\nqueryClient.clear();\n```\n\n### Последствия\n- После выхода userId и currentShift оставались в store\n- Возможная утечка данных между сессиями\n- Некорректное состояние при повторном входе\n\n### Решение\n```typescript\n// ✅ ПРАВИЛЬНО - полная очистка\nawait apiRequest(\"POST\", \"/api/auth/logout\", {});\nqueryClient.clear();\nqueryClient.invalidateQueries({ queryKey: [\"/api/auth/session\"] });\nuseSessionStore.setState({ userId: '', currentShift: null });\n```\n\n---\n\n## 🟡 ОШИБКА #4: Хардкоженный userId в session store\n\n### Описание проблемы\nВ `use-session-store.ts` был прописан **дефолтный userId**, который должен был загружаться из сессии:\n\n```typescript\n// ❌ НЕПРАВИЛЬНО\nuserId: '28fb1a59-5202-4cb1-a2b0-c1aee6e4686b'\n```\n\n### Последствия\n- Не работает правильная гидратация состояния из сессии\n- Всегда используется один и тот же пользователь\n\n### Решение\n```typescript\n// ✅ ПРАВИЛЬНО - пустая строка, загрузка из сессии\nuserId: ''\n```\n\n---\n\n## ✅ Подтвержденные корректные настройки\n\n### Credentials: 'include' в fetch запросах\n**Статус:** ✅ Уже настроено правильно\n\nВ `client/src/lib/queryClient.ts` корректно настроено:\n- `apiRequest` - строка 21: `credentials: \"include\"`\n- `getQueryFn` - строка 35: `credentials: \"include\"`\n\nЭто обеспечивает передачу session cookies в каждом запросе.\n\n---\n\n## 📊 Итоги\n\n### Статистика\n- **Найдено критических ошибок:** 1\n- **Найдено важных ошибок:** 3\n- **Всего исправлений:** 4\n- **Создано новых файлов:** 1 (login.tsx)\n- **Обновлено файлов:** 3 (App.tsx, sidebar.tsx, use-session-store.ts)\n\n### Текущее состояние\n- ✅ Система полностью функциональна\n- ✅ Вход/выход работает корректно\n- ✅ Защищенные маршруты настроены\n- ✅ Session store работает правильно\n- ✅ Нет LSP ошибок\n- ✅ React anti-patterns устранены\n\n### Учетные данные для тестирования\n```\nusername: cashier\npassword: password\n```\n\n---\n\n## 🔐 Рекомендации по безопасности\n\n1. **Session Secret:** Для production необходимо установить переменную окружения `SESSION_SECRET`\n2. **HTTPS:** В production использовать HTTPS для безопасной передачи cookies\n3. **Rate Limiting:** Добавить ограничение попыток входа\n4. **Password Policy:** Рассмотреть требования к сложности паролей\n\n---\n\n## 📝 Примечания для разработки\n\n- Backend использует `express-session` с `memorystore` (для dev среды)\n- Пароли хешируются с помощью `bcrypt`\n- Сессии сохраняются в памяти (для production использовать Redis или PostgreSQL store)\n- React Query настроен с `refetchOnMount: true` для проверки сессии при каждом монтировании\n\n---\n\n**Автор:** Replit Agent  \n**Версия системы:** POS System v1.0  \n**Среда:** Replit Development Environment\n","size_bytes":7059},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSessionStore } from \"@/hooks/use-session-store\";\nimport { ShoppingCart } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const setUserId = useSessionStore((state) => state.setUserId);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n      const data = await response.json();\n\n      if (data.user) {\n        setUserId(data.user.id);\n        toast({\n          title: \"Успешный вход\",\n          description: `Добро пожаловать, ${data.user.username}!`,\n        });\n        setLocation(\"/\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка входа\",\n        description: error.message || \"Неверное имя пользователя или пароль\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md\" role=\"main\" aria-labelledby=\"login-title\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex justify-center mb-4\" aria-hidden=\"true\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center\">\n              <ShoppingCart className=\"w-8 h-8 text-primary-foreground\" aria-hidden=\"true\" />\n            </div>\n          </div>\n          <CardTitle id=\"login-title\" className=\"text-2xl font-bold\">POS System</CardTitle>\n          <CardDescription>\n            Введите ваши учетные данные для входа в систему\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\" aria-label=\"Форма входа в систему\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Имя пользователя</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"cashier\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                autoComplete=\"username\"\n                aria-required=\"true\"\n                aria-label=\"Введите имя пользователя\"\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Пароль</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                autoComplete=\"current-password\"\n                aria-required=\"true\"\n                aria-label=\"Введите пароль\"\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              aria-busy={isLoading}\n              aria-label={isLoading ? \"Выполняется вход в систему\" : \"Войти в систему\"}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Вход...\" : \"Войти\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4285},"client/src/pages/users-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Pencil, Trash2, UserCog, Shield, User as UserIcon } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient as importedQueryClient } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\nconst userSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string(),\n  role: z.enum(['admin', 'cashier']),\n  email: z.string().email(\"Invalid email\").optional().or(z.literal('')).transform(val => val === '' ? undefined : val),\n});\n\ntype UserFormData = z.infer<typeof userSchema>;\n\ninterface User {\n  id: string;\n  username: string;\n  role: 'admin' | 'cashier';\n  email: string | null;\n  createdAt: Date;\n}\n\nexport default function UsersManagement() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      role: \"cashier\",\n      email: \"\",\n    },\n  });\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: UserFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Успех\",\n        description: \"Пользователь создан\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось создать пользователя\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<UserFormData> }) => {\n      const response = await apiRequest(\"PUT\", `/api/users/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setEditingUser(null);\n      form.reset();\n      toast({\n        title: \"Успех\",\n        description: \"Пользователь обновлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось обновить пользователя\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/users/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Пользователь удален\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось удалить пользователя\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UserFormData) => {\n    if (editingUser) {\n      // For editing, validate password only if provided\n      if (data.password && data.password.length > 0 && data.password.length < 6) {\n        form.setError('password', { message: 'Password must be at least 6 characters' });\n        return;\n      }\n      \n      const updates: any = { \n        username: data.username,\n        role: data.role,\n        email: data.email || null\n      };\n      if (data.password && data.password.length > 0) {\n        updates.password = data.password;\n      }\n      updateMutation.mutate({ id: editingUser.id, data: updates });\n    } else {\n      // For creating, password is required\n      if (!data.password || data.password.length < 6) {\n        form.setError('password', { message: 'Password must be at least 6 characters' });\n        return;\n      }\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (user: User) => {\n    setEditingUser(user);\n    form.reset({\n      username: user.username,\n      password: \"\",\n      role: user.role,\n      email: user.email || \"\",\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsAddDialogOpen(false);\n    setEditingUser(null);\n    form.reset();\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Вы уверены, что хотите удалить этого пользователя?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return <Shield className=\"w-4 h-4\" />;\n      case 'cashier':\n        return <UserIcon className=\"w-4 h-4\" />;\n      default:\n        return <UserIcon className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    return role === 'admin' ? 'default' : 'secondary';\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Управление пользователями</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Создавайте и управляйте учетными записями пользователей системы\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-user\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Добавить пользователя\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingUser ? \"Редактировать пользователя\" : \"Создать пользователя\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Имя пользователя</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"username\"\n                          data-testid=\"input-username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {editingUser ? \"Новый пароль (оставьте пустым для сохранения текущего)\" : \"Пароль *\"}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"••••••••\"\n                          data-testid=\"input-password\"\n                          required={!editingUser}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Роль</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        value={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-role\">\n                            <SelectValue placeholder=\"Выберите роль\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cashier\">Кассир</SelectItem>\n                          <SelectItem value=\"admin\">Администратор</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (опционально)</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"user@example.com\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex gap-2 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleCloseDialog}\n                    data-testid=\"button-cancel\"\n                  >\n                    Отмена\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-save-user\"\n                  >\n                    {editingUser ? \"Сохранить\" : \"Создать\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <UserCog className=\"w-5 h-5\" />\n            Список пользователей\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Загрузка...</div>\n          ) : users.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              Нет пользователей\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Пользователь</TableHead>\n                  <TableHead>Роль</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Дата создания</TableHead>\n                  <TableHead className=\"text-right\">Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.map((user) => (\n                  <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                    <TableCell className=\"font-medium\">{user.username}</TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={getRoleBadgeVariant(user.role)}\n                        className=\"flex items-center gap-1 w-fit\"\n                      >\n                        {getRoleIcon(user.role)}\n                        {user.role === 'admin' ? 'Администратор' : 'Кассир'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{user.email || \"—\"}</TableCell>\n                    <TableCell>\n                      {new Date(user.createdAt).toLocaleDateString('ru-RU')}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex gap-2 justify-end\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(user)}\n                          data-testid={`button-edit-${user.id}`}\n                        >\n                          <Pencil className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(user.id)}\n                          data-testid={`button-delete-${user.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14135},"client/src/components/pos/expiration-alert.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertTriangle, X } from \"lucide-react\";\nimport type { ProductWithCategory } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { format } from \"date-fns\";\nimport { ru } from \"date-fns/locale\";\n\nexport default function ExpirationAlert() {\n  const [dismissed, setDismissed] = useState(false);\n\n  const { data: allExpiringProducts = [] } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products/expiring\"],\n    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes\n  });\n\n  // Filter products expiring within 7 days\n  const criticalProducts = allExpiringProducts.filter(p => {\n    if (!p.expirationDate) return false;\n    const expDate = new Date(p.expirationDate);\n    const now = new Date();\n    const daysUntilExpiry = Math.ceil((expDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return daysUntilExpiry <= 7;\n  });\n\n  if (dismissed || criticalProducts.length === 0) {\n    return null;\n  }\n\n  const expiredProducts = criticalProducts.filter(p => {\n    const expDate = new Date(p.expirationDate!);\n    return expDate < new Date();\n  });\n\n  const expiringProducts = criticalProducts.filter(p => {\n    const expDate = new Date(p.expirationDate!);\n    return expDate >= new Date();\n  });\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50 max-w-md\" data-testid=\"expiration-alert\">\n      <Alert variant=\"destructive\" className=\"relative pr-10\">\n        <AlertTriangle className=\"h-4 w-4\" />\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-2 right-2 h-6 w-6\"\n          onClick={() => setDismissed(true)}\n          data-testid=\"dismiss-alert\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n        <AlertTitle>Внимание! Просроченные товары</AlertTitle>\n        <AlertDescription className=\"mt-2\">\n          {expiredProducts.length > 0 && (\n            <div className=\"mb-2\">\n              <p className=\"font-semibold text-destructive\">\n                Просрочено ({expiredProducts.length}):\n              </p>\n              <ul className=\"mt-1 space-y-1\">\n                {expiredProducts.slice(0, 3).map((product) => (\n                  <li key={product.id} className=\"text-sm\">\n                    • {product.name} (\n                    {format(new Date(product.expirationDate!), \"dd.MM.yyyy\", { locale: ru })})\n                  </li>\n                ))}\n                {expiredProducts.length > 3 && (\n                  <li className=\"text-sm italic\">\n                    и ещё {expiredProducts.length - 3}...\n                  </li>\n                )}\n              </ul>\n            </div>\n          )}\n          {expiringProducts.length > 0 && (\n            <div>\n              <p className=\"font-semibold\">\n                Истекает в ближайшие 7 дней ({expiringProducts.length}):\n              </p>\n              <ul className=\"mt-1 space-y-1\">\n                {expiringProducts.slice(0, 3).map((product) => {\n                  const expDate = new Date(product.expirationDate!);\n                  const daysLeft = Math.ceil((expDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n                  return (\n                    <li key={product.id} className=\"text-sm\">\n                      • {product.name} (через {daysLeft} {daysLeft === 1 ? \"день\" : daysLeft < 5 ? \"дня\" : \"дней\"})\n                    </li>\n                  );\n                })}\n                {expiringProducts.length > 3 && (\n                  <li className=\"text-sm italic\">\n                    и ещё {expiringProducts.length - 3}...\n                  </li>\n                )}\n              </ul>\n            </div>\n          )}\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n}\n","size_bytes":3970},"client/src/components/ErrorBoundary.tsx":{"content":"import { Component, ReactNode } from \"react\";\nimport { AlertCircle, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: string | null;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return {\n      hasError: true,\n      error,\n      errorInfo: null,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: { componentStack: string }) {\n    console.error(\"ErrorBoundary caught an error:\", error);\n    console.error(\"Component stack:\", errorInfo.componentStack);\n\n    this.setState({\n      error,\n      errorInfo: errorInfo.componentStack,\n    });\n\n    if (import.meta.env.PROD) {\n      console.error(\"Production error details:\", {\n        message: error.message,\n        stack: error.stack,\n        componentStack: errorInfo.componentStack,\n      });\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  handleReload = () => {\n    window.location.reload();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n          <Card className=\"max-w-2xl w-full\">\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <AlertCircle className=\"h-6 w-6 text-destructive\" />\n                <CardTitle>Произошла ошибка</CardTitle>\n              </div>\n              <CardDescription>\n                Приложение столкнулось с непредвиденной ошибкой. Приносим извинения за неудобства.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {this.state.error && (\n                <div className=\"p-4 bg-destructive/10 rounded-lg border border-destructive/20\">\n                  <p className=\"text-sm font-medium text-destructive mb-2\">\n                    Сообщение об ошибке:\n                  </p>\n                  <p className=\"text-sm text-muted-foreground font-mono\">\n                    {this.state.error.message}\n                  </p>\n                </div>\n              )}\n\n              {import.meta.env.DEV && this.state.errorInfo && (\n                <details className=\"p-4 bg-muted rounded-lg\">\n                  <summary className=\"text-sm font-medium cursor-pointer hover:text-primary\">\n                    Детали для разработчика (только в режиме разработки)\n                  </summary>\n                  <pre className=\"mt-2 text-xs overflow-auto max-h-48 text-muted-foreground\">\n                    {this.state.error?.stack}\n                    {\"\\n\\n\"}\n                    {this.state.errorInfo}\n                  </pre>\n                </details>\n              )}\n\n              <div className=\"flex gap-2 pt-2\">\n                <Button\n                  onClick={this.handleReload}\n                  variant=\"default\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-reload-page\"\n                >\n                  <RefreshCw className=\"h-4 w-4\" />\n                  Перезагрузить страницу\n                </Button>\n                <Button\n                  onClick={() => {\n                    this.handleReset();\n                    setTimeout(() => window.location.href = \"/\", 100);\n                  }}\n                  variant=\"outline\"\n                  data-testid=\"button-reset-app\"\n                >\n                  Сбросить приложение\n                </Button>\n              </div>\n\n              <p className=\"text-xs text-muted-foreground pt-2\">\n                Если проблема повторяется, обратитесь к администратору системы.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","size_bytes":4433},"server/logger.ts":{"content":"import { type Request } from \"express\";\nimport { log } from \"./vite\";\nimport winston from \"winston\";\n\nexport interface ErrorLogContext {\n  method: string;\n  path: string;\n  statusCode: number;\n  userId?: string;\n  username?: string;\n  userRole?: string;\n  ip?: string;\n  userAgent?: string;\n  params?: any;\n  query?: any;\n  body?: any;\n}\n\n// Winston logger configuration\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'pos-system' },\n  transports: [\n    // Write all logs to console in development\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.printf(({ level, message, timestamp, ...meta }) => {\n          const metaStr = Object.keys(meta).length ? JSON.stringify(meta, null, 2) : '';\n          return `${timestamp} [${level}]: ${message} ${metaStr}`;\n        })\n      ),\n    }),\n  ],\n});\n\n// Export logger for use in other modules\nexport { logger };\n\nexport function logError(error: Error, context: ErrorLogContext) {\n  const isDev = process.env.NODE_ENV === \"development\";\n  \n  const errorSummary = `ERROR ${context.method} ${context.path} ${context.statusCode}: ${error.message}`;\n  const userContext = context.userId ? ` [User: ${context.username || context.userId}]` : \"\";\n  \n  log(`${errorSummary}${userContext}`, \"express\");\n\n  // Winston structured logging\n  logger.error('Request error', {\n    error: {\n      name: error.name,\n      message: error.message,\n      stack: isDev ? error.stack : undefined,\n    },\n    request: {\n      method: context.method,\n      path: context.path,\n      statusCode: context.statusCode,\n    },\n    user: context.userId ? {\n      id: context.userId,\n      username: context.username,\n      role: context.userRole,\n    } : undefined,\n    client: isDev ? {\n      ip: context.ip,\n      userAgent: context.userAgent,\n    } : undefined,\n    params: isDev ? context.params : undefined,\n    query: isDev ? context.query : undefined,\n    body: isDev && context.body ? deepSanitize(context.body) : undefined,\n  });\n\n  if (isDev) {\n    console.error(\"\\n--- Detailed Error Context ---\");\n    console.error(`Error Type: ${error.name}`);\n    console.error(`Message: ${error.message}`);\n    \n    if (context.userId) {\n      console.error(`User: ${context.username} (${context.userId}) - Role: ${context.userRole}`);\n    }\n    \n    if (context.ip) {\n      console.error(`IP: ${context.ip}`);\n    }\n\n    if (Object.keys(context.params || {}).length > 0) {\n      console.error(`Params:`, context.params);\n    }\n\n    if (Object.keys(context.query || {}).length > 0) {\n      console.error(`Query:`, context.query);\n    }\n\n    if (context.body && Object.keys(context.body).length > 0) {\n      const sanitized = deepSanitize(context.body);\n      console.error(`Body (sanitized):`, sanitized);\n    }\n\n    if (error.stack) {\n      console.error(`Stack:\\n${error.stack}`);\n    }\n    console.error(\"--- End Error Context ---\\n\");\n  } else {\n    console.error(`${error.name}: ${error.message} at ${context.method} ${context.path}`);\n  }\n}\n\nfunction deepSanitize(obj: any, depth = 0): any {\n  const MAX_DEPTH = 10;\n  if (depth > MAX_DEPTH || obj === null || obj === undefined) {\n    return obj;\n  }\n\n  const sensitiveFields = [\n    \"password\", \"passwd\", \"pwd\",\n    \"token\", \"accessToken\", \"refreshToken\", \"access_token\", \"refresh_token\",\n    \"secret\", \"apiKey\", \"api_key\", \"privateKey\", \"private_key\",\n    \"sessionId\", \"session_id\", \"cookie\", \"authorization\",\n    \"creditCard\", \"credit_card\", \"ssn\", \"cvv\"\n  ];\n\n  if (Array.isArray(obj)) {\n    return obj.map(item => deepSanitize(item, depth + 1));\n  }\n\n  if (typeof obj === \"object\") {\n    const sanitized: any = {};\n    for (const key in obj) {\n      const lowerKey = key.toLowerCase();\n      const isSensitive = sensitiveFields.some(field => \n        lowerKey.includes(field.toLowerCase())\n      );\n      \n      if (isSensitive) {\n        sanitized[key] = \"[REDACTED]\";\n      } else if (typeof obj[key] === \"object\") {\n        sanitized[key] = deepSanitize(obj[key], depth + 1);\n      } else {\n        sanitized[key] = obj[key];\n      }\n    }\n    return sanitized;\n  }\n\n  return obj;\n}\n\nexport function extractErrorContext(req: Request, statusCode: number): ErrorLogContext {\n  const user = req.user as any;\n  const isDev = process.env.NODE_ENV === \"development\";\n  \n  return {\n    method: req.method,\n    path: req.path,\n    statusCode,\n    userId: user?.id,\n    username: user?.username,\n    userRole: user?.role,\n    ip: isDev ? (req.ip || req.socket.remoteAddress) : undefined,\n    userAgent: isDev ? req.get(\"user-agent\") : undefined,\n    params: isDev ? req.params : undefined,\n    query: isDev ? req.query : undefined,\n    body: isDev ? req.body : undefined,\n  };\n}\n","size_bytes":4960},"server/excel-generator.ts":{"content":"import * as XLSX from 'xlsx';\nimport { type ShiftSummary, type Product, type Customer, type ProductWithCategory } from '@shared/schema';\n\nexport function generateProductsExcel(products: ProductWithCategory[]) {\n  const workbook = XLSX.utils.book_new();\n\n  const headers = ['SKU', 'Название', 'Категория', 'Цена', 'Остаток', 'Статус', 'Срок годности'];\n  const data = [\n    headers,\n    ...products.map(p => [\n      p.sku,\n      p.name,\n      p.category?.name || 'Без категории',\n      `${parseFloat(p.price).toFixed(2)} ₸`,\n      p.stock,\n      p.isActive ? 'Активен' : 'Неактивен',\n      p.expirationDate ? new Date(p.expirationDate).toLocaleDateString('ru-RU') : '-'\n    ])\n  ];\n\n  const sheet = XLSX.utils.aoa_to_sheet(data);\n  XLSX.utils.book_append_sheet(workbook, sheet, 'Товары');\n\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport function generateCustomersExcel(customers: any[]) {\n  const workbook = XLSX.utils.book_new();\n\n  const headers = ['Имя', 'Телефон', 'Email', 'Баллы лояльности', 'Уровень', 'Дата регистрации'];\n  const data = [\n    headers,\n    ...customers.map(c => [\n      c.name,\n      c.phone || '-',\n      c.email || '-',\n      c.loyaltyPoints,\n      c.tier?.name || 'Без уровня',\n      new Date(c.createdAt).toLocaleDateString('ru-RU')\n    ])\n  ];\n\n  const sheet = XLSX.utils.aoa_to_sheet(data);\n  XLSX.utils.book_append_sheet(workbook, sheet, 'Клиенты');\n\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport function generateSalesReportExcel(transactions: any[], startDate: string, endDate: string) {\n  const workbook = XLSX.utils.book_new();\n\n  const summaryData = [\n    ['Отчет о продажах'],\n    [],\n    ['Период', `${new Date(startDate).toLocaleDateString('ru-RU')} - ${new Date(endDate).toLocaleDateString('ru-RU')}`],\n    [],\n    ['Показатель', 'Значение'],\n    ['Всего транзакций', transactions.length],\n    ['Общая сумма', `${transactions.reduce((sum, t) => sum + parseFloat(t.total), 0).toFixed(2)} ₸`],\n    ['Наличные', `${transactions.filter(t => t.paymentMethod === 'cash').reduce((sum, t) => sum + parseFloat(t.total), 0).toFixed(2)} ₸`],\n    ['Карта', `${transactions.filter(t => t.paymentMethod === 'card').reduce((sum, t) => sum + parseFloat(t.total), 0).toFixed(2)} ₸`],\n  ];\n\n  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);\n  XLSX.utils.book_append_sheet(workbook, summarySheet, 'Сводка');\n\n  const transactionHeaders = ['Чек', 'Дата', 'Оплата', 'Сумма', 'Налог', 'Итого', 'Клиент'];\n  const transactionData = [\n    transactionHeaders,\n    ...transactions.map(t => [\n      t.receiptNumber,\n      new Date(t.createdAt).toLocaleString('ru-RU'),\n      t.paymentMethod === 'cash' ? 'Наличные' : 'Карта',\n      `${parseFloat(t.subtotal).toFixed(2)} ₸`,\n      `${parseFloat(t.tax).toFixed(2)} ₸`,\n      `${parseFloat(t.total).toFixed(2)} ₸`,\n      t.customer?.name || 'Без клиента'\n    ])\n  ];\n\n  const transactionsSheet = XLSX.utils.aoa_to_sheet(transactionData);\n  XLSX.utils.book_append_sheet(workbook, transactionsSheet, 'Транзакции');\n\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport function generateInventoryReportExcel(products: ProductWithCategory[]) {\n  const workbook = XLSX.utils.book_new();\n\n  const lowStock = products.filter(p => p.stock < 10);\n  const expiring = products.filter(p => p.expirationDate && new Date(p.expirationDate) <= new Date(Date.now() + 7 * 24 * 60 * 60 * 1000));\n\n  const summaryData = [\n    ['Отчет по инвентарю'],\n    [],\n    ['Показатель', 'Значение'],\n    ['Всего товаров', products.length],\n    ['Активных', products.filter(p => p.isActive).length],\n    ['Низкие остатки', lowStock.length],\n    ['Истекают (7 дней)', expiring.length],\n    ['Общая стоимость', `${products.reduce((sum, p) => sum + (parseFloat(p.price) * p.stock), 0).toFixed(2)} ₸`],\n  ];\n\n  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);\n  XLSX.utils.book_append_sheet(workbook, summarySheet, 'Сводка');\n\n  if (lowStock.length > 0) {\n    const lowStockData = [\n      ['SKU', 'Название', 'Остаток', 'Категория'],\n      ...lowStock.map(p => [p.sku, p.name, p.stock, p.category?.name || '-'])\n    ];\n    const lowStockSheet = XLSX.utils.aoa_to_sheet(lowStockData);\n    XLSX.utils.book_append_sheet(workbook, lowStockSheet, 'Низкие остатки');\n  }\n\n  if (expiring.length > 0) {\n    const expiringData = [\n      ['SKU', 'Название', 'Срок годности', 'Остаток'],\n      ...expiring.map(p => [p.sku, p.name, new Date(p.expirationDate!).toLocaleDateString('ru-RU'), p.stock])\n    ];\n    const expiringSheet = XLSX.utils.aoa_to_sheet(expiringData);\n    XLSX.utils.book_append_sheet(workbook, expiringSheet, 'Истекающие');\n  }\n\n  return XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n}\n\nexport function generateShiftReportExcel(summary: ShiftSummary, transactions: any[]) {\n  // Создаем новую книгу Excel\n  const workbook = XLSX.utils.book_new();\n\n  // Данные для листа \"Сводка смены\"\n  const summaryData = [\n    ['Отчет по смене'],\n    [],\n    ['Параметр', 'Значение'],\n    ['Начало смены', new Date(summary.shift.startTime).toLocaleString('ru-RU')],\n    ['Окончание смены', summary.shift.endTime ? new Date(summary.shift.endTime).toLocaleString('ru-RU') : 'Не закрыта'],\n    ['Статус', summary.shift.status === 'open' ? 'Открыта' : 'Закрыта'],\n    [],\n    ['Финансы'],\n    ['Начальная касса', `${parseFloat(summary.shift.startingCash).toFixed(2)} ₸`],\n    ['Конечная касса', summary.shift.endingCash ? `${parseFloat(summary.shift.endingCash).toFixed(2)} ₸` : '-'],\n    [],\n    ['Продажи'],\n    ['Всего продаж', `${parseFloat(summary.totalSales).toFixed(2)} ₸`],\n    ['Количество транзакций', summary.totalTransactions],\n    ['Наличные', `${parseFloat(summary.cashSales).toFixed(2)} ₸`],\n    ['Карта', `${parseFloat(summary.cardSales).toFixed(2)} ₸`],\n  ];\n\n  const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);\n  XLSX.utils.book_append_sheet(workbook, summarySheet, 'Сводка');\n\n  // Данные для листа \"Транзакции\"\n  const transactionHeaders = [\n    'Номер чека',\n    'Дата/время',\n    'Способ оплаты',\n    'Сумма',\n    'Налог',\n    'Итого',\n    'Клиент',\n    'Товары'\n  ];\n\n  const transactionData = [\n    transactionHeaders,\n    ...transactions.map(txn => [\n      txn.receiptNumber,\n      new Date(txn.createdAt).toLocaleString('ru-RU'),\n      txn.paymentMethod === 'cash' ? 'Наличные' : 'Карта',\n      `${parseFloat(txn.subtotal).toFixed(2)} ₸`,\n      `${parseFloat(txn.tax).toFixed(2)} ₸`,\n      `${parseFloat(txn.total).toFixed(2)} ₸`,\n      txn.customer ? txn.customer.name : 'Без клиента',\n      txn.items.map((item: any) => `${item.product.name} x${item.quantity}`).join(', ')\n    ])\n  ];\n\n  const transactionsSheet = XLSX.utils.aoa_to_sheet(transactionData);\n  XLSX.utils.book_append_sheet(workbook, transactionsSheet, 'Транзакции');\n\n  // Генерируем буфер Excel файла\n  const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n  return excelBuffer;\n}\n\nexport function generateShiftReportCSV(summary: ShiftSummary, transactions: any[]) {\n  // Создаем CSV данные для транзакций\n  const csvData = [\n    ['Номер чека', 'Дата/время', 'Способ оплаты', 'Сумма', 'Налог', 'Итого', 'Клиент', 'Товары'],\n    ...transactions.map(txn => [\n      txn.receiptNumber,\n      new Date(txn.createdAt).toLocaleString('ru-RU'),\n      txn.paymentMethod === 'cash' ? 'Наличные' : 'Карта',\n      parseFloat(txn.subtotal).toFixed(2),\n      parseFloat(txn.tax).toFixed(2),\n      parseFloat(txn.total).toFixed(2),\n      txn.customer ? txn.customer.name : 'Без клиента',\n      txn.items.map((item: any) => `${item.product.name} x${item.quantity}`).join('; ')\n    ])\n  ];\n\n  const worksheet = XLSX.utils.aoa_to_sheet(csvData);\n  const csv = XLSX.utils.sheet_to_csv(worksheet);\n  return Buffer.from(csv, 'utf-8');\n}\n","size_bytes":8736},"client/src/hooks/use-keyboard-shortcuts.ts":{"content":"import { useEffect, useCallback } from 'react';\n\nexport interface KeyboardShortcut {\n  key: string;\n  ctrl?: boolean;\n  alt?: boolean;\n  shift?: boolean;\n  description: string;\n  action: () => void;\n  enabled?: boolean;\n}\n\nexport function useKeyboardShortcuts(shortcuts: KeyboardShortcut[]) {\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // Don't trigger shortcuts when typing in input fields\n      const target = event.target as HTMLElement;\n      if (\n        target.tagName === 'INPUT' ||\n        target.tagName === 'TEXTAREA' ||\n        target.isContentEditable\n      ) {\n        return;\n      }\n\n      for (const shortcut of shortcuts) {\n        // Skip disabled shortcuts\n        if (shortcut.enabled === false) {\n          continue;\n        }\n\n        const keyMatch = event.key.toLowerCase() === shortcut.key.toLowerCase() ||\n                        event.code.toLowerCase() === shortcut.key.toLowerCase();\n        const ctrlMatch = shortcut.ctrl ? event.ctrlKey || event.metaKey : !event.ctrlKey && !event.metaKey;\n        const altMatch = shortcut.alt ? event.altKey : !event.altKey;\n        const shiftMatch = shortcut.shift ? event.shiftKey : !event.shiftKey;\n\n        if (keyMatch && ctrlMatch && altMatch && shiftMatch) {\n          event.preventDefault();\n          shortcut.action();\n          break;\n        }\n      }\n    },\n    [shortcuts]\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n}\n\n// Predefined keyboard shortcuts for POS\nexport const POS_SHORTCUTS = {\n  HELP: 'F1',\n  BARCODE_SCANNER: 'F2',\n  OPEN_PAYMENT: 'F5',\n  CLEAR_CART: 'F6',\n  ADD_CUSTOMER: 'F8',\n  CANCEL: 'Escape',\n  INCREASE_QTY: '+',\n  DECREASE_QTY: '-',\n  COMPLETE_PAYMENT: 'F9',\n  OPEN_SHIFT: 'F10',\n  CLOSE_SHIFT: 'F11',\n  PRINT_RECEIPT: 'F12',\n} as const;\n","size_bytes":1922},"client/src/components/pos/keyboard-shortcuts-help.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Keyboard } from \"lucide-react\";\nimport { POS_SHORTCUTS } from \"@/hooks/use-keyboard-shortcuts\";\n\ninterface KeyboardShortcutsHelpProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport default function KeyboardShortcutsHelp({ open, onOpenChange }: KeyboardShortcutsHelpProps = {}) {\n  const shortcuts = [\n    { key: POS_SHORTCUTS.HELP, description: \"Показать справку\" },\n    { key: POS_SHORTCUTS.OPEN_PAYMENT, description: \"Инициировать оплату\" },\n    { key: POS_SHORTCUTS.CLEAR_CART, description: \"Очистить корзину\" },\n    { key: POS_SHORTCUTS.CANCEL, description: \"Отмена/закрыть модальное окно\" },\n    { key: POS_SHORTCUTS.BARCODE_SCANNER, description: \"Сканер штрих-кода\" },\n    { key: POS_SHORTCUTS.ADD_CUSTOMER, description: \"Добавить клиента\" },\n    { key: POS_SHORTCUTS.INCREASE_QTY, description: \"Увеличить количество\" },\n    { key: POS_SHORTCUTS.DECREASE_QTY, description: \"Уменьшить количество\" },\n    { key: POS_SHORTCUTS.COMPLETE_PAYMENT, description: \"Завершить оплату\" },\n    { key: POS_SHORTCUTS.OPEN_SHIFT, description: \"Открыть смену\" },\n    { key: POS_SHORTCUTS.CLOSE_SHIFT, description: \"Закрыть смену\" },\n    { key: POS_SHORTCUTS.PRINT_RECEIPT, description: \"Печать чека\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"keyboard-shortcuts-button\">\n          <Keyboard className=\"w-4 h-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Клавиатурные сокращения</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"text-sm text-muted-foreground mb-2\">\n            Используйте эти клавиатурные сокращения для быстрой работы:\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            {shortcuts.map((shortcut, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <span className=\"text-sm\">{shortcut.description}</span>\n                <kbd className=\"px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500\">\n                  {shortcut.key}\n                </kbd>\n              </div>\n            ))}\n          </div>\n          <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n            <p className=\"text-sm text-muted-foreground\">\n              <strong>Совет:</strong> Горячие клавиши не работают когда вы вводите текст в поля ввода.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3198},"client/src/components/pos/low-stock-alert.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AlertTriangle, Package } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport type { ProductWithCategory } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ninterface LowStockAlertProps {\n  threshold?: number; // Порог низкого остатка (по умолчанию 5)\n}\n\nexport default function LowStockAlert({ threshold = 5 }: LowStockAlertProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dismissed, setDismissed] = useState(false);\n  const { toast } = useToast();\n\n  const { data: products = [] } = useQuery<ProductWithCategory[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Фильтруем товары с низким остатком\n  const lowStockProducts = products.filter(\n    (product) => product.isActive && product.stock <= threshold && product.stock > 0\n  );\n\n  const outOfStockProducts = products.filter(\n    (product) => product.isActive && product.stock === 0\n  );\n\n  // Показываем уведомление при обнаружении товаров с низким остатком\n  useEffect(() => {\n    if (lowStockProducts.length > 0 && !dismissed) {\n      toast({\n        title: \"⚠️ Низкий остаток товаров\",\n        description: `${lowStockProducts.length} товаров с низким остатком на складе`,\n        variant: \"default\",\n      });\n    }\n\n    if (outOfStockProducts.length > 0 && !dismissed) {\n      toast({\n        title: \"❌ Товары закончились\",\n        description: `${outOfStockProducts.length} товаров закончились на складе`,\n        variant: \"destructive\",\n      });\n    }\n  }, [lowStockProducts.length, outOfStockProducts.length]);\n\n  if (lowStockProducts.length === 0 && outOfStockProducts.length === 0) {\n    return null;\n  }\n\n  if (dismissed) {\n    return (\n      <div className=\"fixed bottom-4 left-4 z-40\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setDismissed(false)}\n          data-testid=\"show-stock-alerts\"\n        >\n          <AlertTriangle className=\"w-4 h-4 mr-2 text-orange-500\" />\n          <Badge variant=\"destructive\" className=\"ml-1\">\n            {lowStockProducts.length + outOfStockProducts.length}\n          </Badge>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-4 left-4 z-40 max-w-md\">\n      <Card className=\"border-orange-200 dark:border-orange-800\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <Package className=\"w-5 h-5 text-orange-500\" />\n              Контроль остатков\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setDismissed(true)}\n              data-testid=\"dismiss-stock-alerts\"\n            >\n              Скрыть\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {outOfStockProducts.length > 0 && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertTitle>Товары закончились</AlertTitle>\n              <AlertDescription>\n                <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n                  <div className=\"flex items-center justify-between\">\n                    <span>{outOfStockProducts.length} товаров</span>\n                    <CollapsibleTrigger asChild>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        {isOpen ? \"Скрыть\" : \"Показать\"}\n                      </Button>\n                    </CollapsibleTrigger>\n                  </div>\n                  <CollapsibleContent className=\"mt-2 space-y-1\">\n                    {outOfStockProducts.slice(0, 5).map((product) => (\n                      <div key={product.id} className=\"text-sm py-1\">\n                        • {product.name} ({product.sku})\n                      </div>\n                    ))}\n                    {outOfStockProducts.length > 5 && (\n                      <div className=\"text-sm text-muted-foreground\">\n                        и еще {outOfStockProducts.length - 5}...\n                      </div>\n                    )}\n                  </CollapsibleContent>\n                </Collapsible>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {lowStockProducts.length > 0 && (\n            <Alert>\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertTitle>Низкий остаток</AlertTitle>\n              <AlertDescription>\n                <div className=\"space-y-1 mt-2\">\n                  {lowStockProducts.slice(0, 3).map((product) => (\n                    <div key={product.id} className=\"text-sm flex items-center justify-between\">\n                      <span>• {product.name}</span>\n                      <Badge variant=\"outline\" className=\"ml-2\">\n                        {product.stock} шт\n                      </Badge>\n                    </div>\n                  ))}\n                  {lowStockProducts.length > 3 && (\n                    <div className=\"text-sm text-muted-foreground\">\n                      и еще {lowStockProducts.length - 3} товаров\n                    </div>\n                  )}\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"text-xs text-muted-foreground pt-1\">\n            Порог оповещения: {threshold} шт\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6187},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState, type ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n  toggleTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"pos-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1599},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-theme-toggle\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Переключить тему</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")} data-testid=\"theme-light\">\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>Светлая</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")} data-testid=\"theme-dark\">\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Тёмная</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nexport function ThemeToggleSimple() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle-simple\"\n      className=\"relative\"\n    >\n      {theme === \"light\" ? (\n        <Sun className=\"h-5 w-5\" />\n      ) : (\n        <Moon className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Переключить тему</span>\n    </Button>\n  );\n}\n","size_bytes":1809},"client/src/components/pos/suppliers-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Edit, Trash2, Truck, Users, UserCheck, UserX, Search } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertSupplierSchema } from \"@shared/schema\";\nimport type { Supplier } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst supplierFormSchema = insertSupplierSchema.extend({\n  name: z.string().min(1, \"Название обязательно\"),\n  contactPerson: z.string().optional().or(z.literal(\"\")).transform(val => val || \"\"),\n  phone: z.string().optional().or(z.literal(\"\")).transform(val => val || \"\"),\n  email: z.string().email(\"Неверный формат email\").optional().or(z.literal(\"\")).transform(val => val || \"\"),\n  address: z.string().optional().or(z.literal(\"\")).transform(val => val || \"\"),\n  taxId: z.string().optional().or(z.literal(\"\")).transform(val => val || \"\"),\n  notes: z.string().optional().or(z.literal(\"\")).transform(val => val || \"\"),\n});\n\nexport default function SuppliersTab() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: session } = useQuery<{ user?: { id: string; username: string; role: string } }>({\n    queryKey: [\"/api/auth/session\"],\n  });\n\n  const isAdmin = session?.user?.role === \"admin\";\n\n  const form = useForm<z.infer<typeof supplierFormSchema>>({\n    resolver: zodResolver(supplierFormSchema),\n    defaultValues: {\n      name: \"\",\n      contactPerson: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n      taxId: \"\",\n      isActive: true,\n      notes: \"\",\n    },\n  });\n\n  const { data: suppliers = [], isLoading } = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const addSupplierMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof supplierFormSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/suppliers\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Успех\",\n        description: \"Поставщик успешно добавлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось добавить поставщика\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSupplierMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof supplierFormSchema> }) => {\n      const response = await apiRequest(\"PUT\", `/api/suppliers/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      setIsEditDialogOpen(false);\n      setEditingSupplier(null);\n      form.reset();\n      toast({\n        title: \"Успех\",\n        description: \"Поставщик успешно обновлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось обновить поставщика\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSupplierMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/suppliers/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Поставщик успешно удален\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось удалить поставщика\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleSupplierStatusMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      const response = await apiRequest(\"PUT\", `/api/suppliers/${id}`, { isActive });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({\n        title: \"Успех\",\n        description: \"Статус поставщика обновлен\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось обновить статус\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredSuppliers = suppliers.filter((supplier) => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      supplier.name?.toLowerCase().includes(searchLower) ||\n      supplier.email?.toLowerCase().includes(searchLower) ||\n      supplier.phone?.toLowerCase().includes(searchLower) ||\n      supplier.contactPerson?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const totalSuppliers = suppliers.length;\n  const activeSuppliers = suppliers.filter((s) => s.isActive).length;\n  const inactiveSuppliers = suppliers.filter((s) => !s.isActive).length;\n\n  const handleEdit = (supplier: Supplier) => {\n    setEditingSupplier(supplier);\n    form.reset({\n      name: supplier.name,\n      contactPerson: supplier.contactPerson || \"\",\n      phone: supplier.phone || \"\",\n      email: supplier.email || \"\",\n      address: supplier.address || \"\",\n      taxId: supplier.taxId || \"\",\n      isActive: supplier.isActive,\n      notes: supplier.notes || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Вы уверены, что хотите удалить этого поставщика?\")) {\n      deleteSupplierMutation.mutate(id);\n    }\n  };\n\n  const handleToggleStatus = (id: string, currentStatus: boolean) => {\n    toggleSupplierStatusMutation.mutate({ id, isActive: !currentStatus });\n  };\n\n  const onSubmit = (data: z.infer<typeof supplierFormSchema>) => {\n    if (editingSupplier) {\n      updateSupplierMutation.mutate({ id: editingSupplier.id, data });\n    } else {\n      addSupplierMutation.mutate(data);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 p-6\" data-testid=\"suppliers-tab-loading\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]\" />\n            <p className=\"mt-4 text-muted-foreground\">Загрузка...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6\" data-testid=\"suppliers-tab\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Управление поставщиками</h1>\n          {isAdmin && (\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-supplier\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Добавить поставщика\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Новый поставщик</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Название *</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"ООО Поставщик\" data-testid=\"input-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"contactPerson\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Контактное лицо</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Иван Иванов\" data-testid=\"input-contact-person\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Телефон</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"+7 (999) 123-45-67\" data-testid=\"input-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"email\" placeholder=\"contact@example.com\" data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Адрес</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"г. Москва, ул. Примерная, д. 1\" data-testid=\"input-address\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"taxId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>ИНН</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"1234567890\" data-testid=\"input-tax-id\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Примечания</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} placeholder=\"Дополнительная информация...\" rows={3} data-testid=\"input-notes\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex justify-end gap-3\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsAddDialogOpen(false)}\n                        data-testid=\"button-cancel-add\"\n                      >\n                        Отмена\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={addSupplierMutation.isPending}\n                        data-testid=\"button-submit-add\"\n                      >\n                        {addSupplierMutation.isPending ? \"Добавление...\" : \"Добавить\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n          <Card className=\"bg-card dark:bg-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Всего поставщиков</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-suppliers\">{totalSuppliers}</div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-card dark:bg-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Активных</CardTitle>\n              <UserCheck className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"stat-active-suppliers\">\n                {activeSuppliers}\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-card dark:bg-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Неактивных</CardTitle>\n              <UserX className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600 dark:text-red-400\" data-testid=\"stat-inactive-suppliers\">\n                {inactiveSuppliers}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder=\"Поиск по названию, email, телефону...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Suppliers Table */}\n        <Card className=\"bg-card dark:bg-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Truck className=\"h-5 w-5\" />\n              Список поставщиков\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredSuppliers.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Truck className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                <p className=\"mt-4 text-muted-foreground\">\n                  {searchTerm ? \"Поставщики не найдены\" : \"Нет поставщиков\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Название</TableHead>\n                      <TableHead>Контактное лицо</TableHead>\n                      <TableHead>Телефон</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>ИНН</TableHead>\n                      <TableHead>Статус</TableHead>\n                      {isAdmin && <TableHead className=\"text-right\">Действия</TableHead>}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredSuppliers.map((supplier) => (\n                      <TableRow key={supplier.id} data-testid={`row-supplier-${supplier.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-name-${supplier.id}`}>\n                          {supplier.name}\n                        </TableCell>\n                        <TableCell data-testid={`text-contact-${supplier.id}`}>\n                          {supplier.contactPerson || \"-\"}\n                        </TableCell>\n                        <TableCell data-testid={`text-phone-${supplier.id}`}>\n                          {supplier.phone || \"-\"}\n                        </TableCell>\n                        <TableCell data-testid={`text-email-${supplier.id}`}>\n                          {supplier.email || \"-\"}\n                        </TableCell>\n                        <TableCell data-testid={`text-tax-id-${supplier.id}`}>\n                          {supplier.taxId || \"-\"}\n                        </TableCell>\n                        <TableCell data-testid={`text-status-${supplier.id}`}>\n                          {supplier.isActive ? (\n                            <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\">\n                              Активен\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"secondary\">\n                              Неактивен\n                            </Badge>\n                          )}\n                        </TableCell>\n                        {isAdmin && (\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end gap-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleToggleStatus(supplier.id, supplier.isActive)}\n                                disabled={toggleSupplierStatusMutation.isPending}\n                                data-testid={`button-toggle-status-${supplier.id}`}\n                                title={supplier.isActive ? \"Деактивировать\" : \"Активировать\"}\n                              >\n                                {supplier.isActive ? (\n                                  <UserX className=\"h-4 w-4\" />\n                                ) : (\n                                  <UserCheck className=\"h-4 w-4\" />\n                                )}\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEdit(supplier)}\n                                data-testid={`button-edit-${supplier.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDelete(supplier.id)}\n                                disabled={deleteSupplierMutation.isPending}\n                                data-testid={`button-delete-${supplier.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4 text-destructive\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Dialog */}\n        {isAdmin && (\n          <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Редактировать поставщика</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Название *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"ООО Поставщик\" data-testid=\"input-edit-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"contactPerson\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Контактное лицо</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Иван Иванов\" data-testid=\"input-edit-contact-person\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Телефон</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"+7 (999) 123-45-67\" data-testid=\"input-edit-phone\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"email\" placeholder=\"contact@example.com\" data-testid=\"input-edit-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Адрес</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"г. Москва, ул. Примерная, д. 1\" data-testid=\"input-edit-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"taxId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ИНН</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"1234567890\" data-testid=\"input-edit-tax-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Примечания</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Дополнительная информация...\" rows={3} data-testid=\"input-edit-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end gap-3\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setIsEditDialogOpen(false);\n                        setEditingSupplier(null);\n                        form.reset();\n                      }}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      Отмена\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={updateSupplierMutation.isPending}\n                      data-testid=\"button-submit-edit\"\n                    >\n                      {updateSupplierMutation.isPending ? \"Сохранение...\" : \"Сохранить\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":27350}},"version":1}